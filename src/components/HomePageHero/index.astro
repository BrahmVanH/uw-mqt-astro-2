---
import type { RootQueryToHomePageHeroConnection } from '@/__generated__/types';
import { getDefaultProps, onImageError } from '@/lib/error';
import ResponsiveImage from '@/components/ResponsiveImage.astro';
import Card from './Card.astro';

export interface Props {
	bg: string;
	bgMobile: string;
	heading: string;
	subheading: string;
	features: HomePageHeroFeature[];
	bgAlt: string;
	bgMobileAlt: string;
}

export interface HomePageHeroFeature {
	title: string;
	text: string;
	link: string;
	linkText: string;
	linkTwo?: string;
	linkTextTwo?: string;
	img?: string;
	imgAlt?: string;
	optionalMedia?: string;
	optionalMediaTitle?: string;
}

export function createProps(graphQLContent: RootQueryToHomePageHeroConnection): Props {
	if (!graphQLContent?.nodes[0]?.homePageHeroFields) {
		return getDefaultProps<Props>('HomePageHero createProps', Astro);
	}

	const root = graphQLContent?.nodes[0]?.homePageHeroFields;
	let features = Array.from({ length: 3 }, (_, i) => ({
		title: (root[`feature${i + 1}` as keyof typeof root] as any)?.title ?? '',
		text: (root[`feature${i + 1}` as keyof typeof root] as any)?.text ?? '',
		link: (root[`feature${i + 1}` as keyof typeof root] as any)?.link ?? '',
		linkText: (root[`feature${i + 1}` as keyof typeof root] as any)?.linkText ?? '',
		linkTwo: (root[`feature${i + 1}` as keyof typeof root] as any)?.secondLink ?? '',
		linkTextTwo: (root[`feature${i + 1}` as keyof typeof root] as any)?.secondLinkText ?? '',
		img: (root[`feature${i + 1}` as keyof typeof root] as any)?.image?.node?.sourceUrl ?? '',
		imgAlt: (root[`feature${i + 1}` as keyof typeof root] as any)?.image?.node?.altText ?? '',
		optionalMedia: (root[`feature${i + 1}` as keyof typeof root] as any)?.optionalMedia?.node?.mediaItemUrl ?? '',
		optionalMediaTitle: (root[`feature${i + 1}` as keyof typeof root] as any)?.optionalMediaLabel ?? '',
	})).filter((feature) => feature.title !== '');

	return {
		bg: root?.bg?.node?.sourceUrl ?? onImageError('missing bg image home page hero').src,
		bgMobile: root?.bgMobile?.node?.sourceUrl ?? onImageError('missing bg mobile image home page hero').src,
		heading: root?.heading ?? '',
		subheading: root?.subheading ?? '',
		features,
		bgAlt: root?.bg?.node?.altText ?? 'placeholder image',
		bgMobileAlt: root?.bgMobile?.node?.altText ?? 'placeholder image',
	};
}

function addNewLineAfterNthWord(heading: string, n: number): string {
	const headingArr = heading.split(' ');
	headingArr[1] = `${headingArr[n - 1]}\n`;
	return headingArr.join(' ');
}

const { bg, bgMobile, heading, subheading, features, bgAlt, bgMobileAlt } = Astro.props;

const headingWithNewLine2ndWord = addNewLineAfterNthWord(heading, 2);
---

<section class='relative w-full min-h-screen' role='region' aria-labelledby='hero-heading'>
	<ResponsiveImage mobileImgUrl={bgMobile} desktopImgUrl={bg} desktopAlt={bgAlt} mobileAlt={bgMobileAlt} className='absolute top-0 left-0 w-full h-full object-cover max-w-[1800px] mx-auto z-0' />

	<div class='relative z-10 w-full max-w-[1800px] mx-auto'>
		<div class='features-grid px-1 xs:px-4 pb-2 lg:py-8' role='list'>
			{
				features &&
					features.map((feature, i) => (
						<div role='listitem'>
							<Card {...feature} index={i} class={i === 0 ? 'featured-card' : 'regular-card'} />
						</div>
					))
			}
		</div>

		<div class='px-4 md:px-8 pb-8'>
			{
				heading && (
					<h1 id='hero-heading' class='text-tertiary-black-2 text-2xl lg:text-3xl 2xl:text-4xl max-w-[80%] lg:max-w-3xl leading-relaxed'>
						{headingWithNewLine2ndWord}
					</h1>
				)
			}
			{subheading && <p class='text-tertiary-black-2 text-md font-bold mt-4 max-w-[800px] leading-relaxed'>{subheading}</p>}
		</div>
	</div>
</section>

<style>
	.features-grid {
		display: grid;
		grid-template-columns: 2fr 1fr;
		grid-template-rows: auto;
		gap: 1rem;
		width: 100%;
	}

	.features-grid :global(.featured-card) {
		grid-column: 1;
		grid-row: 1 / span 2;
	}

	.features-grid :global(.regular-card) {
		grid-column: 2;
	}

	@media (max-width: 768px) {
		.features-grid {
			grid-template-columns: 1fr;
		}

		.features-grid :global(.featured-card),
		.features-grid :global(.regular-card) {
			grid-column: 1;
			grid-row: auto;
		}
	}
</style>
