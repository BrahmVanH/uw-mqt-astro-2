---
export const prerender = false;

import DefaultLayout from '@/layouts/DefaultLayout.astro';
import AliceIntro from '@/components/AliceIntro.astro';
import AliceStats, { createProps as createStatsProps } from '@/components/AliceStats';
import ErrorBoundary from '@/components/ErrorBoundary';
import ErrorDisplay from '@/components/ErrorDisplay';
import AliceHero, { createProps as createHeroProps } from '@/components/AliceHero.astro';
import AliceHub, { createHubPrograms } from '@/components/AliceHub/index.svelte';
import ErrorBoundarySvelte from '@/components/ErrorBoundary.svelte';
import ErrorDisplaySvelte from '@/components/ErrorDisplay.svelte';

import type { AliceHubProgramsByCategory } from '@/types/aliceHub';

import type { UserGeo } from '@/types/alice';
import getPageContent from '@/lib/API';
import { getDefaultProps, onError } from '@/lib/error';
import type { AlicePageQueryResponse } from '@/types';
import type { RootQueryToAliceHubProgramConnection } from '@/types/__generated__/types';
import { CategoryNames, type AliceHubProgram } from '@/types/aliceHub';

export enum CategoryContainerDisplayOptions {
	hidden = 'hidden',
	visible = '',
}

const country = Astro.request.headers.get('x-user-country') || 'unknown';
const city = Astro.request.headers.get('x-user-city') || 'unknown';
const region = Astro.request.headers.get('x-user-region') || 'unknown';
const latitude = parseFloat(Astro.request.headers.get('x-user-lat') || '46.5440');
const longitude = parseFloat(Astro.request.headers.get('x-user-lng') || '-87.3994');

const geoData: UserGeo = {
	success: country !== 'unknown',
	latitude,
	longitude,
	country,
	city,
	region,
	fallback:
		country === 'unknown'
			? {
					latitude: 46.544, // Downtown Marquette as fallback
					longitude: -87.3994,
					country: 'US',
				}
			: undefined,
};

const path = Astro.url.pathname;
const queryResponse = await getPageContent(path);
if (!queryResponse) {
	onError('No data returned from the server home page query', Astro);
}

const pageContent: AlicePageQueryResponse = queryResponse;

if (!pageContent) {
	onError('No data returned from the server home page query', Astro);
}

interface Props {
	programsByCategory: AliceHubProgramsByCategory;
}

const heroProps = createHeroProps({ aliceReportPdfs: pageContent.aliceReportPdfs });

const aliceStatsProps = createStatsProps(pageContent.allAliceStats);

function destringifyWpArr(arrStr: string) {
	if (!arrStr) {
		return [];
	}

	if (!arrStr.includes('<br />\n')) {
		return [arrStr];
	}
	const arr = arrStr.split('<br />\n');

	return arr;
}

function createHubProps(wpContent: RootQueryToAliceHubProgramConnection): Props {
	if (!wpContent?.nodes.length) {
		return getDefaultProps<Props>('AliceHubPrograms');
	}

	const programNodes = wpContent?.nodes;

	const programs: AliceHubProgram[] = programNodes
		.map((n) => ({
			...n.aliceHubProgramFields,
			serviceAreas: destringifyWpArr(n.aliceHubProgramFields?.serviceAreas ?? ''),
			requirements: destringifyWpArr(n.aliceHubProgramFields?.requirements ?? ''),
		}))
		.filter((n) => n !== undefined) as unknown as AliceHubProgram[];

	if (!programs) {
		return getDefaultProps<Props>('AliceHubPrograms');
	}

	const categories = Object.values(CategoryNames);
	let programsByCategory: AliceHubProgramsByCategory = {} as AliceHubProgramsByCategory;

	if (!programs) {
		return getDefaultProps<Props>('AliceHubPrograms');
	}

	for (let program of programs) {
		const category = program.category[0] as CategoryNames;
		if (!programsByCategory[category]) {
			programsByCategory[category] = [program];
			continue;
		}
		programsByCategory[category].push(program);
	}

	for (let category of categories) {
		if (!programsByCategory[category]) {
			programsByCategory[category] = [];
		}
	}

	return { programsByCategory };
}

const hubPrograms = createHubPrograms(pageContent.aliceHubPrograms);
---

<DefaultLayout title='ALICE'>
	<main class='max-w-[1800px]'>
		<AliceHero {...heroProps} />
		<AliceIntro />
		<ErrorBoundary client:load fallback={ErrorDisplay}>
			<AliceStats {...aliceStatsProps} client:visible />
		</ErrorBoundary>
		<ErrorBoundarySvelte client:load fallback={ErrorDisplaySvelte}>
			<AliceHub client:only='svelte' userGeoData={geoData} programsByCategory={hubPrograms} />
		</ErrorBoundarySvelte>
	</main>
</DefaultLayout>
