export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
};

/** The &quot;ALICEReportPDFFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceReportPdfFields = AliceReportPdfFields_Fields & AcfFieldGroup & AcfFieldGroupFields & {
  __typename?: 'ALICEReportPDFFields';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;ALICEReportPDFFields&quot; Field Group */
  pdfFile?: Maybe<AcfMediaItemConnectionEdge>;
};

/** Interface representing fields of the ACF &quot;ALICEReportPDFFields&quot; Field Group */
export type AliceReportPdfFields_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;ALICEReportPDFFields&quot; Field Group */
  pdfFile?: Maybe<AcfMediaItemConnectionEdge>;
};

/** The &quot;ALICEReportPageFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceReportPageFields = AliceReportPageFields_Fields & AcfFieldGroup & AcfFieldGroupFields & {
  __typename?: 'ALICEReportPageFields';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  fullReportLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  heading?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  hero?: Maybe<AliceReportPageFieldsHero>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image1?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image2?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image3?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image4?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image5?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image6?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image7?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image8?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  interactiveReportLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  subHeading?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  text1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  text2?: Maybe<Scalars['String']['output']>;
};

/** The &quot;ALICEReportPageFieldsHero&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceReportPageFieldsHero = AliceReportPageFieldsHero_Fields & AcfFieldGroup & AcfFieldGroupFields & {
  __typename?: 'ALICEReportPageFieldsHero';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFieldsHero&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFieldsHero&quot; Field Group */
  img?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFieldsHero&quot; Field Group */
  mobileBg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFieldsHero&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFieldsHero&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;ALICEReportPageFieldsHero&quot; Field Group */
export type AliceReportPageFieldsHero_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFieldsHero&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFieldsHero&quot; Field Group */
  img?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFieldsHero&quot; Field Group */
  mobileBg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFieldsHero&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFieldsHero&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;ALICEReportPageFields&quot; Field Group */
export type AliceReportPageFields_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  fullReportLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  heading?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  hero?: Maybe<AliceReportPageFieldsHero>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image1?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image2?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image3?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image4?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image5?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image6?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image7?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  image8?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  interactiveReportLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  subHeading?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  text1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ALICEReportPageFields&quot; Field Group */
  text2?: Maybe<Scalars['String']['output']>;
};

/** A Field Group managed by ACF */
export type AcfFieldGroup = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
};

/** Fields associated with an ACF Field Group */
export type AcfFieldGroupFields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
};

/** Connection between the ALICEReportPDFFields_Fields type and the MediaItem type */
export type AcfMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {
  __typename?: 'AcfMediaItemConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: MediaItem;
};

/** The adminCostPdf type */
export type AdminCostPdf = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfAdminCostsPdfFields & {
  __typename?: 'AdminCostPdf';
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  adminCostPdfId: Scalars['Int']['output'];
  /** Fields of the AdminCostsPDFFields ACF Field Group */
  adminCostsPDFFields?: Maybe<AdminCostsPdfFields>;
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<AdminCostPdfToAdminCostPdfConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the admin_costs_pdf object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the admin_costs_pdf object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<AdminCostPdfToParentConnectionEdge>;
  /** The password for the admin_costs_pdf object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the AdminCostPdf type and the adminCostPdf type */
  preview?: Maybe<AdminCostPdfToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The adminCostPdf type */
export type AdminCostPdfAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The adminCostPdf type */
export type AdminCostPdfEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The adminCostPdf type */
export type AdminCostPdfEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The adminCostPdf type */
export type AdminCostPdfTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of adminCostPdf Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of adminCostPdf Nodes */
export type AdminCostPdfConnection = {
  /** A list of edges (relational context) between RootQuery and connected adminCostPdf Nodes */
  edges: Array<AdminCostPdfConnectionEdge>;
  /** A list of connected adminCostPdf Nodes */
  nodes: Array<AdminCostPdf>;
  /** Information about pagination in a connection. */
  pageInfo: AdminCostPdfConnectionPageInfo;
};

/** Represents a connection to a adminCostPdf. Contains both the adminCostPdf Node and metadata about the relationship. */
export type AdminCostPdfConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected adminCostPdf Node */
  node: AdminCostPdf;
};

/** Pagination metadata specific to &quot;AdminCostPdfConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;AdminCostPdfConnectionEdge&quot; Nodes. */
export type AdminCostPdfConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific AdminCostPdf. Specifies which unique attribute is used to find an exact AdminCostPdf. */
export enum AdminCostPdfIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the AdminCostPdf type and the adminCostPdf type */
export type AdminCostPdfToAdminCostPdfConnection = AdminCostPdfConnection & Connection & {
  __typename?: 'AdminCostPdfToAdminCostPdfConnection';
  /** Edges for the AdminCostPdfToAdminCostPdfConnection connection */
  edges: Array<AdminCostPdfToAdminCostPdfConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<AdminCostPdf>;
  /** Information about pagination in a connection. */
  pageInfo: AdminCostPdfToAdminCostPdfConnectionPageInfo;
};

/** An edge in a connection */
export type AdminCostPdfToAdminCostPdfConnectionEdge = AdminCostPdfConnectionEdge & Edge & {
  __typename?: 'AdminCostPdfToAdminCostPdfConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: AdminCostPdf;
};

/** Pagination metadata specific to &quot;AdminCostPdfToAdminCostPdfConnection&quot; collections. Provides cursors and flags for navigating through sets of AdminCostPdfToAdminCostPdfConnection Nodes. */
export type AdminCostPdfToAdminCostPdfConnectionPageInfo = AdminCostPdfConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'AdminCostPdfToAdminCostPdfConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the AdminCostPdf type and the adminCostPdf type */
export type AdminCostPdfToParentConnectionEdge = AdminCostPdfConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'AdminCostPdfToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: AdminCostPdf;
};

/** Connection between the AdminCostPdf type and the adminCostPdf type */
export type AdminCostPdfToPreviewConnectionEdge = AdminCostPdfConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'AdminCostPdfToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: AdminCostPdf;
};

/** The &quot;AdminCostsPDFFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AdminCostsPdfFields = AcfFieldGroup & AcfFieldGroupFields & AdminCostsPdfFields_Fields & {
  __typename?: 'AdminCostsPDFFields';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;AdminCostsPDFFields&quot; Field Group */
  pdfFile?: Maybe<AcfMediaItemConnectionEdge>;
};

/** Interface representing fields of the ACF &quot;AdminCostsPDFFields&quot; Field Group */
export type AdminCostsPdfFields_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;AdminCostsPDFFields&quot; Field Group */
  pdfFile?: Maybe<AcfMediaItemConnectionEdge>;
};

/** The aliceHubProgram type */
export type AliceHubProgram = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfAliceHubProgramFields & {
  __typename?: 'AliceHubProgram';
  /** Fields of the AliceHubProgramFields ACF Field Group */
  aliceHubProgramFields?: Maybe<AliceHubProgramFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  aliceHubProgramId: Scalars['Int']['output'];
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<AliceHubProgramToAliceHubProgramConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the alice_hub_program object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the alice_hub_program object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<AliceHubProgramToParentConnectionEdge>;
  /** The password for the alice_hub_program object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the AliceHubProgram type and the aliceHubProgram type */
  preview?: Maybe<AliceHubProgramToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The aliceHubProgram type */
export type AliceHubProgramAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The aliceHubProgram type */
export type AliceHubProgramEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The aliceHubProgram type */
export type AliceHubProgramEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The aliceHubProgram type */
export type AliceHubProgramTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of aliceHubProgram Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of aliceHubProgram Nodes */
export type AliceHubProgramConnection = {
  /** A list of edges (relational context) between RootQuery and connected aliceHubProgram Nodes */
  edges: Array<AliceHubProgramConnectionEdge>;
  /** A list of connected aliceHubProgram Nodes */
  nodes: Array<AliceHubProgram>;
  /** Information about pagination in a connection. */
  pageInfo: AliceHubProgramConnectionPageInfo;
};

/** Represents a connection to a aliceHubProgram. Contains both the aliceHubProgram Node and metadata about the relationship. */
export type AliceHubProgramConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected aliceHubProgram Node */
  node: AliceHubProgram;
};

/** Pagination metadata specific to &quot;AliceHubProgramConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;AliceHubProgramConnectionEdge&quot; Nodes. */
export type AliceHubProgramConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;AliceHubProgramFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceHubProgramFields = AcfFieldGroup & AcfFieldGroupFields & AliceHubProgramFields_Fields & {
  __typename?: 'AliceHubProgramFields';
  /** Field of the &quot;select&quot; Field Type added to the schema as part of the &quot;AliceHubProgramFields&quot; Field Group */
  category?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Enter a detailed description of the program */
  description?: Maybe<Scalars['String']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Enter a website link for more information (optional) */
  link?: Maybe<Scalars['String']['output']>;
  /** Enter the name of the program */
  name?: Maybe<Scalars['String']['output']>;
  /** Enter the organization or entity providing this program */
  provider?: Maybe<Scalars['String']['output']>;
  /** Enter program requirements, one per line */
  requirements?: Maybe<Scalars['String']['output']>;
  /** Enter service areas, one per line */
  serviceAreas?: Maybe<Scalars['String']['output']>;
  /** Enter program types, one per line (optional) */
  type?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceHubProgramFields&quot; Field Group */
export type AliceHubProgramFields_Fields = {
  /** Field of the &quot;select&quot; Field Type added to the schema as part of the &quot;AliceHubProgramFields&quot; Field Group */
  category?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Enter a detailed description of the program */
  description?: Maybe<Scalars['String']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Enter a website link for more information (optional) */
  link?: Maybe<Scalars['String']['output']>;
  /** Enter the name of the program */
  name?: Maybe<Scalars['String']['output']>;
  /** Enter the organization or entity providing this program */
  provider?: Maybe<Scalars['String']['output']>;
  /** Enter program requirements, one per line */
  requirements?: Maybe<Scalars['String']['output']>;
  /** Enter service areas, one per line */
  serviceAreas?: Maybe<Scalars['String']['output']>;
  /** Enter program types, one per line (optional) */
  type?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific AliceHubProgram. Specifies which unique attribute is used to find an exact AliceHubProgram. */
export enum AliceHubProgramIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the AliceHubProgram type and the aliceHubProgram type */
export type AliceHubProgramToAliceHubProgramConnection = AliceHubProgramConnection & Connection & {
  __typename?: 'AliceHubProgramToAliceHubProgramConnection';
  /** Edges for the AliceHubProgramToAliceHubProgramConnection connection */
  edges: Array<AliceHubProgramToAliceHubProgramConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<AliceHubProgram>;
  /** Information about pagination in a connection. */
  pageInfo: AliceHubProgramToAliceHubProgramConnectionPageInfo;
};

/** An edge in a connection */
export type AliceHubProgramToAliceHubProgramConnectionEdge = AliceHubProgramConnectionEdge & Edge & {
  __typename?: 'AliceHubProgramToAliceHubProgramConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: AliceHubProgram;
};

/** Pagination metadata specific to &quot;AliceHubProgramToAliceHubProgramConnection&quot; collections. Provides cursors and flags for navigating through sets of AliceHubProgramToAliceHubProgramConnection Nodes. */
export type AliceHubProgramToAliceHubProgramConnectionPageInfo = AliceHubProgramConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'AliceHubProgramToAliceHubProgramConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the AliceHubProgram type and the aliceHubProgram type */
export type AliceHubProgramToParentConnectionEdge = AliceHubProgramConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'AliceHubProgramToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: AliceHubProgram;
};

/** Connection between the AliceHubProgram type and the aliceHubProgram type */
export type AliceHubProgramToPreviewConnectionEdge = AliceHubProgramConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'AliceHubProgramToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: AliceHubProgram;
};

/** The aliceReportPage type */
export type AliceReportPage = ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfAliceReportPageFields & {
  __typename?: 'AliceReportPage';
  /** Fields of the ALICEReportPageFields ACF Field Group */
  aLICEReportPageFields?: Maybe<AliceReportPageFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  aliceReportPageId: Scalars['Int']['output'];
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the alice_report_page object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the alice_report_page object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** The password for the alice_report_page object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the AliceReportPage type and the aliceReportPage type */
  preview?: Maybe<AliceReportPageToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to a node of content */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The aliceReportPage type */
export type AliceReportPageAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** The aliceReportPage type */
export type AliceReportPageChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};


/** The aliceReportPage type */
export type AliceReportPageEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The aliceReportPage type */
export type AliceReportPageEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The aliceReportPage type */
export type AliceReportPageTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of aliceReportPage Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of aliceReportPage Nodes */
export type AliceReportPageConnection = {
  /** A list of edges (relational context) between RootQuery and connected aliceReportPage Nodes */
  edges: Array<AliceReportPageConnectionEdge>;
  /** A list of connected aliceReportPage Nodes */
  nodes: Array<AliceReportPage>;
  /** Information about pagination in a connection. */
  pageInfo: AliceReportPageConnectionPageInfo;
};

/** Represents a connection to a aliceReportPage. Contains both the aliceReportPage Node and metadata about the relationship. */
export type AliceReportPageConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected aliceReportPage Node */
  node: AliceReportPage;
};

/** Pagination metadata specific to &quot;AliceReportPageConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;AliceReportPageConnectionEdge&quot; Nodes. */
export type AliceReportPageConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific AliceReportPage. Specifies which unique attribute is used to find an exact AliceReportPage. */
export enum AliceReportPageIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the AliceReportPage type and the aliceReportPage type */
export type AliceReportPageToPreviewConnectionEdge = AliceReportPageConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'AliceReportPageToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: AliceReportPage;
};

/** The aliceReportPdf type */
export type AliceReportPdf = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfAliceReportPdfFields & {
  __typename?: 'AliceReportPdf';
  /** Fields of the ALICEReportPDFFields ACF Field Group */
  aLICEReportPDFFields?: Maybe<AliceReportPdfFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  aliceReportPdfId: Scalars['Int']['output'];
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<AliceReportPdfToAliceReportPdfConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the alice_report_pdf object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the alice_report_pdf object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<AliceReportPdfToParentConnectionEdge>;
  /** The password for the alice_report_pdf object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the AliceReportPdf type and the aliceReportPdf type */
  preview?: Maybe<AliceReportPdfToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The aliceReportPdf type */
export type AliceReportPdfAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The aliceReportPdf type */
export type AliceReportPdfEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The aliceReportPdf type */
export type AliceReportPdfEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The aliceReportPdf type */
export type AliceReportPdfTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of aliceReportPdf Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of aliceReportPdf Nodes */
export type AliceReportPdfConnection = {
  /** A list of edges (relational context) between RootQuery and connected aliceReportPdf Nodes */
  edges: Array<AliceReportPdfConnectionEdge>;
  /** A list of connected aliceReportPdf Nodes */
  nodes: Array<AliceReportPdf>;
  /** Information about pagination in a connection. */
  pageInfo: AliceReportPdfConnectionPageInfo;
};

/** Represents a connection to a aliceReportPdf. Contains both the aliceReportPdf Node and metadata about the relationship. */
export type AliceReportPdfConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected aliceReportPdf Node */
  node: AliceReportPdf;
};

/** Pagination metadata specific to &quot;AliceReportPdfConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;AliceReportPdfConnectionEdge&quot; Nodes. */
export type AliceReportPdfConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific AliceReportPdf. Specifies which unique attribute is used to find an exact AliceReportPdf. */
export enum AliceReportPdfIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the AliceReportPdf type and the aliceReportPdf type */
export type AliceReportPdfToAliceReportPdfConnection = AliceReportPdfConnection & Connection & {
  __typename?: 'AliceReportPdfToAliceReportPdfConnection';
  /** Edges for the AliceReportPdfToAliceReportPdfConnection connection */
  edges: Array<AliceReportPdfToAliceReportPdfConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<AliceReportPdf>;
  /** Information about pagination in a connection. */
  pageInfo: AliceReportPdfToAliceReportPdfConnectionPageInfo;
};

/** An edge in a connection */
export type AliceReportPdfToAliceReportPdfConnectionEdge = AliceReportPdfConnectionEdge & Edge & {
  __typename?: 'AliceReportPdfToAliceReportPdfConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: AliceReportPdf;
};

/** Pagination metadata specific to &quot;AliceReportPdfToAliceReportPdfConnection&quot; collections. Provides cursors and flags for navigating through sets of AliceReportPdfToAliceReportPdfConnection Nodes. */
export type AliceReportPdfToAliceReportPdfConnectionPageInfo = AliceReportPdfConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'AliceReportPdfToAliceReportPdfConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the AliceReportPdf type and the aliceReportPdf type */
export type AliceReportPdfToParentConnectionEdge = AliceReportPdfConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'AliceReportPdfToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: AliceReportPdf;
};

/** Connection between the AliceReportPdf type and the aliceReportPdf type */
export type AliceReportPdfToPreviewConnectionEdge = AliceReportPdfConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'AliceReportPdfToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: AliceReportPdf;
};

/** The aliceStats type */
export type AliceStats = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfAliceStatsFields & {
  __typename?: 'AliceStats';
  /** Fields of the AliceStatsFields ACF Field Group */
  aliceStatsFields?: Maybe<AliceStatsFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  aliceStatsId: Scalars['Int']['output'];
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<AliceStatsToAliceStatsConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the alice_stats object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the alice_stats object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<AliceStatsToParentConnectionEdge>;
  /** The password for the alice_stats object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the AliceStats type and the aliceStats type */
  preview?: Maybe<AliceStatsToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The aliceStats type */
export type AliceStatsAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The aliceStats type */
export type AliceStatsEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The aliceStats type */
export type AliceStatsEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The aliceStats type */
export type AliceStatsTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of aliceStats Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of aliceStats Nodes */
export type AliceStatsConnection = {
  /** A list of edges (relational context) between RootQuery and connected aliceStats Nodes */
  edges: Array<AliceStatsConnectionEdge>;
  /** A list of connected aliceStats Nodes */
  nodes: Array<AliceStats>;
  /** Information about pagination in a connection. */
  pageInfo: AliceStatsConnectionPageInfo;
};

/** Represents a connection to a aliceStats. Contains both the aliceStats Node and metadata about the relationship. */
export type AliceStatsConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected aliceStats Node */
  node: AliceStats;
};

/** Pagination metadata specific to &quot;AliceStatsConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;AliceStatsConnectionEdge&quot; Nodes. */
export type AliceStatsConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;AliceStatsFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFields = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFields_Fields & {
  __typename?: 'AliceStatsFields';
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFields&quot; Field Group */
  content?: Maybe<AliceStatsFieldsContent>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFields&quot; Field Group */
  countyStats?: Maybe<AliceStatsFieldsCountyStats>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
};

/** The &quot;AliceStatsFieldsContent&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsContent = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsContent_Fields & {
  __typename?: 'AliceStatsFieldsContent';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  heading?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;url&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  listItem1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  listItem2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  listItem3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  popoverText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  text2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  text3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  textWithPopover?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsContent&quot; Field Group */
export type AliceStatsFieldsContent_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  heading?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;url&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  listItem1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  listItem2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  listItem3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  popoverText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  text2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  text3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsContent&quot; Field Group */
  textWithPopover?: Maybe<Scalars['String']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStats&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStats = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStats_Fields & {
  __typename?: 'AliceStatsFieldsCountyStats';
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  alger?: Maybe<AliceStatsFieldsCountyStatsAlger>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  baraga?: Maybe<AliceStatsFieldsCountyStatsBaraga>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  chippewa?: Maybe<AliceStatsFieldsCountyStatsChippewa>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  delta?: Maybe<AliceStatsFieldsCountyStatsDelta>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  dickinson?: Maybe<AliceStatsFieldsCountyStatsDickinson>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  goegebic?: Maybe<AliceStatsFieldsCountyStatsGoegebic>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  houghton?: Maybe<AliceStatsFieldsCountyStatsHoughton>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  iron?: Maybe<AliceStatsFieldsCountyStatsIron>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  kewenaw?: Maybe<AliceStatsFieldsCountyStatsKewenaw>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  luce?: Maybe<AliceStatsFieldsCountyStatsLuce>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  mackinac?: Maybe<AliceStatsFieldsCountyStatsMackinac>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  marquette?: Maybe<AliceStatsFieldsCountyStatsMarquette>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  menominee?: Maybe<AliceStatsFieldsCountyStatsMenominee>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  ontonagon?: Maybe<AliceStatsFieldsCountyStatsOntonagon>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  overall?: Maybe<AliceStatsFieldsCountyStatsOverall>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  schoolcraft?: Maybe<AliceStatsFieldsCountyStatsSchoolcraft>;
};

/** The &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsAlger = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsAlger_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsAlger';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
export type AliceStatsFieldsCountyStatsAlger_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsAlger&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsBaraga = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsBaraga_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsBaraga';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
export type AliceStatsFieldsCountyStatsBaraga_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsBaraga&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsChippewa = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsChippewa_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsChippewa';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
export type AliceStatsFieldsCountyStatsChippewa_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsChippewa&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsDelta = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsDelta_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsDelta';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
export type AliceStatsFieldsCountyStatsDelta_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDelta&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsDickinson = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsDickinson_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsDickinson';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
export type AliceStatsFieldsCountyStatsDickinson_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsDickinson&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsGoegebic = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsGoegebic_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsGoegebic';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
export type AliceStatsFieldsCountyStatsGoegebic_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsGoegebic&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsHoughton = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsHoughton_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsHoughton';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
export type AliceStatsFieldsCountyStatsHoughton_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsHoughton&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsIron = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsIron_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsIron';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
export type AliceStatsFieldsCountyStatsIron_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsIron&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsKewenaw = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsKewenaw_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsKewenaw';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
export type AliceStatsFieldsCountyStatsKewenaw_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsKewenaw&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsLuce = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsLuce_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsLuce';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
export type AliceStatsFieldsCountyStatsLuce_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsLuce&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsMackinac = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsMackinac_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsMackinac';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
export type AliceStatsFieldsCountyStatsMackinac_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMackinac&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsMarquette = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsMarquette_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsMarquette';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
export type AliceStatsFieldsCountyStatsMarquette_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMarquette&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsMenominee = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsMenominee_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsMenominee';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
export type AliceStatsFieldsCountyStatsMenominee_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsMenominee&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsOntonagon = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsOntonagon_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsOntonagon';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
export type AliceStatsFieldsCountyStatsOntonagon_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOntonagon&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsOverall = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsOverall_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsOverall';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
export type AliceStatsFieldsCountyStatsOverall_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsOverall&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** The &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type AliceStatsFieldsCountyStatsSchoolcraft = AcfFieldGroup & AcfFieldGroupFields & AliceStatsFieldsCountyStatsSchoolcraft_Fields & {
  __typename?: 'AliceStatsFieldsCountyStatsSchoolcraft';
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
export type AliceStatsFieldsCountyStatsSchoolcraft_Fields = {
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
  aboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
  belowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
  belowFpl?: Maybe<Scalars['Float']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
  percentAboveAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
  percentBelowAlice?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
  percentBelowFpl?: Maybe<Scalars['Float']['output']>;
  /** Field of the &quot;number&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStatsSchoolcraft&quot; Field Group */
  totalHouseholds?: Maybe<Scalars['Float']['output']>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFieldsCountyStats&quot; Field Group */
export type AliceStatsFieldsCountyStats_Fields = {
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  alger?: Maybe<AliceStatsFieldsCountyStatsAlger>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  baraga?: Maybe<AliceStatsFieldsCountyStatsBaraga>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  chippewa?: Maybe<AliceStatsFieldsCountyStatsChippewa>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  delta?: Maybe<AliceStatsFieldsCountyStatsDelta>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  dickinson?: Maybe<AliceStatsFieldsCountyStatsDickinson>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  goegebic?: Maybe<AliceStatsFieldsCountyStatsGoegebic>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  houghton?: Maybe<AliceStatsFieldsCountyStatsHoughton>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  iron?: Maybe<AliceStatsFieldsCountyStatsIron>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  kewenaw?: Maybe<AliceStatsFieldsCountyStatsKewenaw>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  luce?: Maybe<AliceStatsFieldsCountyStatsLuce>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  mackinac?: Maybe<AliceStatsFieldsCountyStatsMackinac>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  marquette?: Maybe<AliceStatsFieldsCountyStatsMarquette>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  menominee?: Maybe<AliceStatsFieldsCountyStatsMenominee>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  ontonagon?: Maybe<AliceStatsFieldsCountyStatsOntonagon>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  overall?: Maybe<AliceStatsFieldsCountyStatsOverall>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFieldsCountyStats&quot; Field Group */
  schoolcraft?: Maybe<AliceStatsFieldsCountyStatsSchoolcraft>;
};

/** Interface representing fields of the ACF &quot;AliceStatsFields&quot; Field Group */
export type AliceStatsFields_Fields = {
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFields&quot; Field Group */
  content?: Maybe<AliceStatsFieldsContent>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;AliceStatsFields&quot; Field Group */
  countyStats?: Maybe<AliceStatsFieldsCountyStats>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific AliceStats. Specifies which unique attribute is used to find an exact AliceStats. */
export enum AliceStatsIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the AliceStats type and the aliceStats type */
export type AliceStatsToAliceStatsConnection = AliceStatsConnection & Connection & {
  __typename?: 'AliceStatsToAliceStatsConnection';
  /** Edges for the AliceStatsToAliceStatsConnection connection */
  edges: Array<AliceStatsToAliceStatsConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<AliceStats>;
  /** Information about pagination in a connection. */
  pageInfo: AliceStatsToAliceStatsConnectionPageInfo;
};

/** An edge in a connection */
export type AliceStatsToAliceStatsConnectionEdge = AliceStatsConnectionEdge & Edge & {
  __typename?: 'AliceStatsToAliceStatsConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: AliceStats;
};

/** Pagination metadata specific to &quot;AliceStatsToAliceStatsConnection&quot; collections. Provides cursors and flags for navigating through sets of AliceStatsToAliceStatsConnection Nodes. */
export type AliceStatsToAliceStatsConnectionPageInfo = AliceStatsConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'AliceStatsToAliceStatsConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the AliceStats type and the aliceStats type */
export type AliceStatsToParentConnectionEdge = AliceStatsConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'AliceStatsToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: AliceStats;
};

/** Connection between the AliceStats type and the aliceStats type */
export type AliceStatsToPreviewConnectionEdge = AliceStatsConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'AliceStatsToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: AliceStats;
};

/** Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from. */
export type Avatar = {
  __typename?: 'Avatar';
  /** TEST: URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo). */
  default?: Maybe<Scalars['String']['output']>;
  /** HTML attributes to insert in the IMG element. Is not sanitized. */
  extraAttr?: Maybe<Scalars['String']['output']>;
  /** Whether to always show the default image, never the Gravatar. */
  forceDefault?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the avatar was successfully found. */
  foundAvatar?: Maybe<Scalars['Boolean']['output']>;
  /** Height of the avatar image. */
  height?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order. */
  rating?: Maybe<Scalars['String']['output']>;
  /** Type of url scheme to use. Typically HTTP vs. HTTPS. */
  scheme?: Maybe<Scalars['String']['output']>;
  /** The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image. */
  size?: Maybe<Scalars['Int']['output']>;
  /** URL for the gravatar image source. */
  url?: Maybe<Scalars['String']['output']>;
  /** Width of the avatar image. */
  width?: Maybe<Scalars['Int']['output']>;
};

/** Content rating filter for user avatars. Determines the maximum maturity level of avatars to display, following standard content rating classifications (G, PG, R, X). */
export enum AvatarRatingEnum {
  /** Indicates a G level avatar rating level. */
  G = 'G',
  /** Indicates a PG level avatar rating level. */
  Pg = 'PG',
  /** Indicates an R level avatar rating level. */
  R = 'R',
  /** Indicates an X level avatar rating level. */
  X = 'X'
}

/** The campaignToolkitAsset type */
export type CampaignToolkitAsset = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfCampaignToolkitAssetFields & {
  __typename?: 'CampaignToolkitAsset';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<CampaignToolkitAssetToCampaignToolkitAssetConnection>;
  /** Fields of the CampaignToolkitAssetFields ACF Field Group */
  campaignToolkitAssetFields?: Maybe<CampaignToolkitAssetFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  campaignToolkitAssetId: Scalars['Int']['output'];
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the campaign_tlkit_asst object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the campaign_tlkit_asst object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<CampaignToolkitAssetToParentConnectionEdge>;
  /** The password for the campaign_tlkit_asst object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the CampaignToolkitAsset type and the campaignToolkitAsset type */
  preview?: Maybe<CampaignToolkitAssetToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The campaignToolkitAsset type */
export type CampaignToolkitAssetAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The campaignToolkitAsset type */
export type CampaignToolkitAssetEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The campaignToolkitAsset type */
export type CampaignToolkitAssetEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The campaignToolkitAsset type */
export type CampaignToolkitAssetTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of campaignToolkitAsset Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of campaignToolkitAsset Nodes */
export type CampaignToolkitAssetConnection = {
  /** A list of edges (relational context) between RootQuery and connected campaignToolkitAsset Nodes */
  edges: Array<CampaignToolkitAssetConnectionEdge>;
  /** A list of connected campaignToolkitAsset Nodes */
  nodes: Array<CampaignToolkitAsset>;
  /** Information about pagination in a connection. */
  pageInfo: CampaignToolkitAssetConnectionPageInfo;
};

/** Represents a connection to a campaignToolkitAsset. Contains both the campaignToolkitAsset Node and metadata about the relationship. */
export type CampaignToolkitAssetConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected campaignToolkitAsset Node */
  node: CampaignToolkitAsset;
};

/** Pagination metadata specific to &quot;CampaignToolkitAssetConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;CampaignToolkitAssetConnectionEdge&quot; Nodes. */
export type CampaignToolkitAssetConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;CampaignToolkitAssetFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type CampaignToolkitAssetFields = AcfFieldGroup & AcfFieldGroupFields & CampaignToolkitAssetFields_Fields & {
  __typename?: 'CampaignToolkitAssetFields';
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFields&quot; Field Group */
  collageImages?: Maybe<CampaignToolkitAssetFieldsCollageImages>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFields&quot; Field Group */
  pledgeForm?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFields&quot; Field Group */
  radioPsaAudio?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFields&quot; Field Group */
  radioPsaTranscript?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFields&quot; Field Group */
  workplacePacket?: Maybe<AcfMediaItemConnectionEdge>;
};

/** The &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type CampaignToolkitAssetFieldsCollageImages = AcfFieldGroup & AcfFieldGroupFields & CampaignToolkitAssetFieldsCollageImages_Fields & {
  __typename?: 'CampaignToolkitAssetFieldsCollageImages';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
  image1?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
  image2?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
  image3?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
  image4?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
  image5?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
  image6?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
  image7?: Maybe<AcfMediaItemConnectionEdge>;
};

/** Interface representing fields of the ACF &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
export type CampaignToolkitAssetFieldsCollageImages_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
  image1?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
  image2?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
  image3?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
  image4?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
  image5?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
  image6?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFieldsCollageImages&quot; Field Group */
  image7?: Maybe<AcfMediaItemConnectionEdge>;
};

/** Interface representing fields of the ACF &quot;CampaignToolkitAssetFields&quot; Field Group */
export type CampaignToolkitAssetFields_Fields = {
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFields&quot; Field Group */
  collageImages?: Maybe<CampaignToolkitAssetFieldsCollageImages>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFields&quot; Field Group */
  pledgeForm?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFields&quot; Field Group */
  radioPsaAudio?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFields&quot; Field Group */
  radioPsaTranscript?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;CampaignToolkitAssetFields&quot; Field Group */
  workplacePacket?: Maybe<AcfMediaItemConnectionEdge>;
};

/** Identifier types for retrieving a specific CampaignToolkitAsset. Specifies which unique attribute is used to find an exact CampaignToolkitAsset. */
export enum CampaignToolkitAssetIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the CampaignToolkitAsset type and the campaignToolkitAsset type */
export type CampaignToolkitAssetToCampaignToolkitAssetConnection = CampaignToolkitAssetConnection & Connection & {
  __typename?: 'CampaignToolkitAssetToCampaignToolkitAssetConnection';
  /** Edges for the CampaignToolkitAssetToCampaignToolkitAssetConnection connection */
  edges: Array<CampaignToolkitAssetToCampaignToolkitAssetConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<CampaignToolkitAsset>;
  /** Information about pagination in a connection. */
  pageInfo: CampaignToolkitAssetToCampaignToolkitAssetConnectionPageInfo;
};

/** An edge in a connection */
export type CampaignToolkitAssetToCampaignToolkitAssetConnectionEdge = CampaignToolkitAssetConnectionEdge & Edge & {
  __typename?: 'CampaignToolkitAssetToCampaignToolkitAssetConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: CampaignToolkitAsset;
};

/** Pagination metadata specific to &quot;CampaignToolkitAssetToCampaignToolkitAssetConnection&quot; collections. Provides cursors and flags for navigating through sets of CampaignToolkitAssetToCampaignToolkitAssetConnection Nodes. */
export type CampaignToolkitAssetToCampaignToolkitAssetConnectionPageInfo = CampaignToolkitAssetConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'CampaignToolkitAssetToCampaignToolkitAssetConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the CampaignToolkitAsset type and the campaignToolkitAsset type */
export type CampaignToolkitAssetToParentConnectionEdge = CampaignToolkitAssetConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'CampaignToolkitAssetToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: CampaignToolkitAsset;
};

/** Connection between the CampaignToolkitAsset type and the campaignToolkitAsset type */
export type CampaignToolkitAssetToPreviewConnectionEdge = CampaignToolkitAssetConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'CampaignToolkitAssetToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: CampaignToolkitAsset;
};

/** A taxonomy term that classifies content. Categories support hierarchy and can be used to create a nested structure. */
export type Category = DatabaseIdentifier & HierarchicalNode & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable & {
  __typename?: 'Category';
  /** The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<CategoryToAncestorsCategoryConnection>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  categoryId?: Maybe<Scalars['Int']['output']>;
  /** Connection between the category type and its children categories. */
  children?: Maybe<CategoryToCategoryConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the Category type and the ContentNode type */
  contentNodes?: Maybe<CategoryToContentNodeConnection>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The description of the object */
  description?: Maybe<Scalars['String']['output']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The link to the term */
  link?: Maybe<Scalars['String']['output']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']['output']>;
  /** Connection between the category type and its parent category. */
  parent?: Maybe<CategoryToParentCategoryConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** Connection between the Category type and the post type */
  posts?: Maybe<CategoryToPostConnection>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']['output']>;
  /** Connection between the Category type and the Taxonomy type */
  taxonomy?: Maybe<CategoryToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']['output']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** A taxonomy term that classifies content. Categories support hierarchy and can be used to create a nested structure. */
export type CategoryAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A taxonomy term that classifies content. Categories support hierarchy and can be used to create a nested structure. */
export type CategoryChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CategoryToCategoryConnectionWhereArgs>;
};


/** A taxonomy term that classifies content. Categories support hierarchy and can be used to create a nested structure. */
export type CategoryContentNodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CategoryToContentNodeConnectionWhereArgs>;
};


/** A taxonomy term that classifies content. Categories support hierarchy and can be used to create a nested structure. */
export type CategoryEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A taxonomy term that classifies content. Categories support hierarchy and can be used to create a nested structure. */
export type CategoryEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A taxonomy term that classifies content. Categories support hierarchy and can be used to create a nested structure. */
export type CategoryPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CategoryToPostConnectionWhereArgs>;
};

/** A paginated collection of category Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of category Nodes */
export type CategoryConnection = {
  /** A list of edges (relational context) between RootQuery and connected category Nodes */
  edges: Array<CategoryConnectionEdge>;
  /** A list of connected category Nodes */
  nodes: Array<Category>;
  /** Information about pagination in a connection. */
  pageInfo: CategoryConnectionPageInfo;
};

/** Represents a connection to a category. Contains both the category Node and metadata about the relationship. */
export type CategoryConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected category Node */
  node: Category;
};

/** Pagination metadata specific to &quot;CategoryConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;CategoryConnectionEdge&quot; Nodes. */
export type CategoryConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific Category. Determines which unique property (global ID, database ID, slug, etc.) is used to locate the Category. */
export enum CategoryIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the Category type and the category type */
export type CategoryToAncestorsCategoryConnection = CategoryConnection & Connection & {
  __typename?: 'CategoryToAncestorsCategoryConnection';
  /** Edges for the CategoryToAncestorsCategoryConnection connection */
  edges: Array<CategoryToAncestorsCategoryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Category>;
  /** Information about pagination in a connection. */
  pageInfo: CategoryToAncestorsCategoryConnectionPageInfo;
};

/** An edge in a connection */
export type CategoryToAncestorsCategoryConnectionEdge = CategoryConnectionEdge & Edge & {
  __typename?: 'CategoryToAncestorsCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Category;
};

/** Pagination metadata specific to &quot;CategoryToAncestorsCategoryConnection&quot; collections. Provides cursors and flags for navigating through sets of CategoryToAncestorsCategoryConnection Nodes. */
export type CategoryToAncestorsCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'CategoryToAncestorsCategoryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the Category type and the category type */
export type CategoryToCategoryConnection = CategoryConnection & Connection & {
  __typename?: 'CategoryToCategoryConnection';
  /** Edges for the CategoryToCategoryConnection connection */
  edges: Array<CategoryToCategoryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Category>;
  /** Information about pagination in a connection. */
  pageInfo: CategoryToCategoryConnectionPageInfo;
};

/** An edge in a connection */
export type CategoryToCategoryConnectionEdge = CategoryConnectionEdge & Edge & {
  __typename?: 'CategoryToCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Category;
};

/** Pagination metadata specific to &quot;CategoryToCategoryConnection&quot; collections. Provides cursors and flags for navigating through sets of CategoryToCategoryConnection Nodes. */
export type CategoryToCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'CategoryToCategoryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the CategoryToCategoryConnection connection */
export type CategoryToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the Category type and the ContentNode type */
export type CategoryToContentNodeConnection = Connection & ContentNodeConnection & {
  __typename?: 'CategoryToContentNodeConnection';
  /** Edges for the CategoryToContentNodeConnection connection */
  edges: Array<CategoryToContentNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: CategoryToContentNodeConnectionPageInfo;
};

/** An edge in a connection */
export type CategoryToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'CategoryToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Pagination metadata specific to &quot;CategoryToContentNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of CategoryToContentNodeConnection Nodes. */
export type CategoryToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'CategoryToContentNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the CategoryToContentNodeConnection connection */
export type CategoryToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfCategoryEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the Category type and the category type */
export type CategoryToParentCategoryConnectionEdge = CategoryConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'CategoryToParentCategoryConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Category;
};

/** Connection between the Category type and the post type */
export type CategoryToPostConnection = Connection & PostConnection & {
  __typename?: 'CategoryToPostConnection';
  /** Edges for the CategoryToPostConnection connection */
  edges: Array<CategoryToPostConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: CategoryToPostConnectionPageInfo;
};

/** An edge in a connection */
export type CategoryToPostConnectionEdge = Edge & PostConnectionEdge & {
  __typename?: 'CategoryToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Post;
};

/** Pagination metadata specific to &quot;CategoryToPostConnection&quot; collections. Provides cursors and flags for navigating through sets of CategoryToPostConnection Nodes. */
export type CategoryToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {
  __typename?: 'CategoryToPostConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the CategoryToPostConnection connection */
export type CategoryToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']['input']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']['input']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag slugs, used to display objects from one tag AND another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of tag slugs, used to include objects in ANY specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the Category type and the Taxonomy type */
export type CategoryToTaxonomyConnectionEdge = Edge & OneToOneConnection & TaxonomyConnectionEdge & {
  __typename?: 'CategoryToTaxonomyConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Taxonomy;
};

/** A response or reaction to content submitted by users. Comments are typically associated with a specific content entry. */
export type Comment = DatabaseIdentifier & Node & UniformResourceIdentifiable & {
  __typename?: 'Comment';
  /** User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL. */
  agent?: Maybe<Scalars['String']['output']>;
  /**
   * The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL.
   * @deprecated Deprecated in favor of the `status` field
   */
  approved?: Maybe<Scalars['Boolean']['output']>;
  /** The author of the comment */
  author?: Maybe<CommentToCommenterConnectionEdge>;
  /**
   * IP address for the author at the time of commenting. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL.
   * @deprecated Use the ipAddress field on the edge between the comment and author
   */
  authorIp?: Maybe<Scalars['String']['output']>;
  /**
   * ID for the comment, unique among comments.
   * @deprecated Deprecated in favor of databaseId
   */
  commentId?: Maybe<Scalars['Int']['output']>;
  /** Connection between the Comment type and the ContentNode type */
  commentedOn?: Maybe<CommentToContentNodeConnectionEdge>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL. */
  content?: Maybe<Scalars['String']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL. */
  date?: Maybe<Scalars['String']['output']>;
  /** Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier for the comment object */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL. */
  karma?: Maybe<Scalars['Int']['output']>;
  /** The permalink of the comment */
  link?: Maybe<Scalars['String']['output']>;
  /** Connection between the Comment type and the Comment type */
  parent?: Maybe<CommentToParentCommentConnectionEdge>;
  /** The database id of the parent comment node or null if it is the root comment */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent comment node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** Connection between the Comment type and the Comment type */
  replies?: Maybe<CommentToCommentConnection>;
  /** The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL. */
  status?: Maybe<CommentStatusEnum>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL. */
  type?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** A response or reaction to content submitted by users. Comments are typically associated with a specific content entry. */
export type CommentContentArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** A response or reaction to content submitted by users. Comments are typically associated with a specific content entry. */
export type CommentParentArgs = {
  where?: InputMaybe<CommentToParentCommentConnectionWhereArgs>;
};


/** A response or reaction to content submitted by users. Comments are typically associated with a specific content entry. */
export type CommentRepliesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CommentToCommentConnectionWhereArgs>;
};

/** A Comment Author object */
export type CommentAuthor = Commenter & DatabaseIdentifier & Node & {
  __typename?: 'CommentAuthor';
  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
  avatar?: Maybe<Avatar>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The email for the comment author */
  email?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier for the comment author object */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** The name for the comment author. */
  name?: Maybe<Scalars['String']['output']>;
  /** The url the comment author. */
  url?: Maybe<Scalars['String']['output']>;
};


/** A Comment Author object */
export type CommentAuthorAvatarArgs = {
  forceDefault?: InputMaybe<Scalars['Boolean']['input']>;
  rating?: InputMaybe<AvatarRatingEnum>;
  size?: InputMaybe<Scalars['Int']['input']>;
};

/** A paginated collection of Comment Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of Comment Nodes */
export type CommentConnection = {
  /** A list of edges (relational context) between RootQuery and connected Comment Nodes */
  edges: Array<CommentConnectionEdge>;
  /** A list of connected Comment Nodes */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: CommentConnectionPageInfo;
};

/** Represents a connection to a Comment. Contains both the Comment Node and metadata about the relationship. */
export type CommentConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected Comment Node */
  node: Comment;
};

/** Pagination metadata specific to &quot;CommentConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;CommentConnectionEdge&quot; Nodes. */
export type CommentConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific comment. Specifies which unique attribute is used to find a particular comment. */
export enum CommentNodeIdTypeEnum {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID'
}

/** Moderation state for user comments. Determines whether comments are publicly visible, pending approval, or marked as spam. */
export enum CommentStatusEnum {
  /** Comments with the Approved status */
  Approve = 'APPROVE',
  /** Comments with the Unapproved status */
  Hold = 'HOLD',
  /** Comments with the Spam status */
  Spam = 'SPAM',
  /** Comments with the Trash status */
  Trash = 'TRASH'
}

/** Connection between the Comment type and the Comment type */
export type CommentToCommentConnection = CommentConnection & Connection & {
  __typename?: 'CommentToCommentConnection';
  /** Edges for the CommentToCommentConnection connection */
  edges: Array<CommentToCommentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: CommentToCommentConnectionPageInfo;
};

/** An edge in a connection */
export type CommentToCommentConnectionEdge = CommentConnectionEdge & Edge & {
  __typename?: 'CommentToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Comment;
};

/** Pagination metadata specific to &quot;CommentToCommentConnection&quot; collections. Provides cursors and flags for navigating through sets of CommentToCommentConnection Nodes. */
export type CommentToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'CommentToCommentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the CommentToCommentConnection connection */
export type CommentToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** One or more Comment Statuses to limit results by */
  statusIn?: InputMaybe<Array<InputMaybe<CommentStatusEnum>>>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the Comment type and the Commenter type */
export type CommentToCommenterConnectionEdge = CommenterConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'CommentToCommenterConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The email address representing the author for this particular comment */
  email?: Maybe<Scalars['String']['output']>;
  /** IP address of the author at the time of making this comment. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL. */
  ipAddress?: Maybe<Scalars['String']['output']>;
  /** The display name of the comment author for this particular comment */
  name?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Commenter;
  /** The url entered for the comment author on this particular comment */
  url?: Maybe<Scalars['String']['output']>;
};

/** Connection between the Comment type and the ContentNode type */
export type CommentToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'CommentToContentNodeConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: ContentNode;
};

/** Connection between the Comment type and the Comment type */
export type CommentToParentCommentConnectionEdge = CommentConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'CommentToParentCommentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Comment;
};

/** Arguments for filtering the CommentToParentCommentConnection connection */
export type CommentToParentCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** One or more Comment Statuses to limit results by */
  statusIn?: InputMaybe<Array<InputMaybe<CommentStatusEnum>>>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** A user or guest who has submitted a comment. Provides identification and contact information for the comment author. */
export type Commenter = {
  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
  avatar?: Maybe<Avatar>;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int']['output'];
  /** The email address of the author of a comment. */
  email?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier for the comment author. */
  id: Scalars['ID']['output'];
  /** Whether the author information is considered restricted. (not fully public) */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** The name of the author of a comment. */
  name?: Maybe<Scalars['String']['output']>;
  /** The url of the author of a comment. */
  url?: Maybe<Scalars['String']['output']>;
};

/** Represents a connection to a Commenter. Contains both the Commenter Node and metadata about the relationship. */
export type CommenterConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected Commenter Node */
  node: Commenter;
};

/** Sorting attributes for comment collections. Specifies which comment property determines the order of results. */
export enum CommentsConnectionOrderbyEnum {
  /** Order by browser user agent of the commenter. */
  CommentAgent = 'COMMENT_AGENT',
  /** Order by approval status of the comment. */
  CommentApproved = 'COMMENT_APPROVED',
  /** Order by name of the comment author. */
  CommentAuthor = 'COMMENT_AUTHOR',
  /** Order by e-mail of the comment author. */
  CommentAuthorEmail = 'COMMENT_AUTHOR_EMAIL',
  /** Order by IP address of the comment author. */
  CommentAuthorIp = 'COMMENT_AUTHOR_IP',
  /** Order by URL address of the comment author. */
  CommentAuthorUrl = 'COMMENT_AUTHOR_URL',
  /** Order by the comment contents. */
  CommentContent = 'COMMENT_CONTENT',
  /** Chronological ordering by comment submission date. */
  CommentDate = 'COMMENT_DATE',
  /** Chronological ordering by comment date in UTC/GMT time. */
  CommentDateGmt = 'COMMENT_DATE_GMT',
  /** Ordering by internal ID (typically reflects creation order). */
  CommentId = 'COMMENT_ID',
  /** Preserve custom order of IDs as specified in the query. */
  CommentIn = 'COMMENT_IN',
  /** Order by the comment karma score. */
  CommentKarma = 'COMMENT_KARMA',
  /** Ordering by parent comment relationship (threaded discussions). */
  CommentParent = 'COMMENT_PARENT',
  /** Ordering by associated content item ID. */
  CommentPostId = 'COMMENT_POST_ID',
  /** Ordering by comment classification (standard comments, pingbacks, etc.). */
  CommentType = 'COMMENT_TYPE',
  /** Ordering by the user account ID associated with the comment as the comment author. */
  UserId = 'USER_ID'
}

/** GraphQL representation of WordPress Conditional Tags. */
export type ConditionalTags = {
  __typename?: 'ConditionalTags';
  /**
   * Determines whether the query is for an existing archive page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isArchive?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing attachment page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isAttachment?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing author archive page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isAuthor?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing category archive page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isCategory?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing date archive.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isDate?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing day archive.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isDay?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for the front page of the site.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isFrontPage?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for the blog homepage.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isHome?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing month archive.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isMonth?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether this site has more than one author.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isMultiAuthor?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing single page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isPage?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether currently in a page template.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isPageTemplate?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing post type archive page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isPostTypeArchive?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for a post or page preview.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for the Privacy Policy page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isPrivacyPolicy?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for a search.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isSearch?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing single post.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isSingle?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing single post of any post type (post, attachment, page, custom post types).
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isSingular?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether a post is sticky.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isSticky?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing tag archive page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isTag?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing custom taxonomy archive page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isTax?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing year archive.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isYear?: Maybe<Scalars['Boolean']['output']>;
};

/** A paginated relationship between objects. Supports cursor-based pagination with edges containing relationship metadata and nodes containing the related objects. */
export type Connection = {
  /** A list of edges (relational context) between connected nodes */
  edges: Array<Edge>;
  /** A list of connected nodes */
  nodes: Array<Node>;
  /** Information about pagination in a connection. */
  pageInfo: PageInfo;
};

/** Base interface for content objects like posts, pages, and media items. Provides common fields available across these content types. */
export type ContentNode = {
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The ID of the node in the database. */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to a node of content */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** Base interface for content objects like posts, pages, and media items. Provides common fields available across these content types. */
export type ContentNodeEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Base interface for content objects like posts, pages, and media items. Provides common fields available across these content types. */
export type ContentNodeEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** A paginated collection of ContentNode Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of ContentNode Nodes */
export type ContentNodeConnection = {
  /** A list of edges (relational context) between ContentType and connected ContentNode Nodes */
  edges: Array<ContentNodeConnectionEdge>;
  /** A list of connected ContentNode Nodes */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: ContentNodeConnectionPageInfo;
};

/** Represents a connection to a ContentNode. Contains both the ContentNode Node and metadata about the relationship. */
export type ContentNodeConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected ContentNode Node */
  node: ContentNode;
};

/** Pagination metadata specific to &quot;ContentNodeConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;ContentNodeConnectionEdge&quot; Nodes. */
export type ContentNodeConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving specific content. Determines which property (global ID, database ID, URI) is used to locate content objects. */
export enum ContentNodeIdTypeEnum {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the ContentNode type and the ContentType type */
export type ContentNodeToContentTypeConnectionEdge = ContentTypeConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'ContentNodeToContentTypeConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: ContentType;
};

/** Connection between the ContentNode type and the User type */
export type ContentNodeToEditLastConnectionEdge = Edge & OneToOneConnection & UserConnectionEdge & {
  __typename?: 'ContentNodeToEditLastConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: User;
};

/** Connection between the ContentNode type and the User type */
export type ContentNodeToEditLockConnectionEdge = Edge & OneToOneConnection & UserConnectionEdge & {
  __typename?: 'ContentNodeToEditLockConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The timestamp for when the node was last edited */
  lockTimestamp?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: User;
};

/** Connection between the ContentNode type and the EnqueuedScript type */
export type ContentNodeToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {
  __typename?: 'ContentNodeToEnqueuedScriptConnection';
  /** Edges for the ContentNodeToEnqueuedScriptConnection connection */
  edges: Array<ContentNodeToEnqueuedScriptConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedScript>;
  /** Information about pagination in a connection. */
  pageInfo: ContentNodeToEnqueuedScriptConnectionPageInfo;
};

/** An edge in a connection */
export type ContentNodeToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {
  __typename?: 'ContentNodeToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedScript;
};

/** Pagination metadata specific to &quot;ContentNodeToEnqueuedScriptConnection&quot; collections. Provides cursors and flags for navigating through sets of ContentNodeToEnqueuedScriptConnection Nodes. */
export type ContentNodeToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'ContentNodeToEnqueuedScriptConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the ContentNode type and the EnqueuedStylesheet type */
export type ContentNodeToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {
  __typename?: 'ContentNodeToEnqueuedStylesheetConnection';
  /** Edges for the ContentNodeToEnqueuedStylesheetConnection connection */
  edges: Array<ContentNodeToEnqueuedStylesheetConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedStylesheet>;
  /** Information about pagination in a connection. */
  pageInfo: ContentNodeToEnqueuedStylesheetConnectionPageInfo;
};

/** An edge in a connection */
export type ContentNodeToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {
  __typename?: 'ContentNodeToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedStylesheet;
};

/** Pagination metadata specific to &quot;ContentNodeToEnqueuedStylesheetConnection&quot; collections. Provides cursors and flags for navigating through sets of ContentNodeToEnqueuedStylesheetConnection Nodes. */
export type ContentNodeToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'ContentNodeToEnqueuedStylesheetConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** A layout pattern that can help inform how content might be structured and displayed. Templates can define specialized layouts for different types of content. */
export type ContentTemplate = {
  /** The name of the template */
  templateName?: Maybe<Scalars['String']['output']>;
};

/** An Post Type object */
export type ContentType = Node & UniformResourceIdentifiable & {
  __typename?: 'ContentType';
  /** Whether this content type should can be exported. */
  canExport?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentType type and the Taxonomy type */
  connectedTaxonomies?: Maybe<ContentTypeToTaxonomyConnection>;
  /** Connection between the ContentType type and the ContentNode type */
  contentNodes?: Maybe<ContentTypeToContentNodeConnection>;
  /** Whether content of this type should be deleted when the author of it is deleted from the system. */
  deleteWithUser?: Maybe<Scalars['Boolean']['output']>;
  /** Description of the content type. */
  description?: Maybe<Scalars['String']['output']>;
  /** Whether to exclude nodes of this content type from front end search results. */
  excludeFromSearch?: Maybe<Scalars['Boolean']['output']>;
  /** The plural name of the content type within the GraphQL Schema. */
  graphqlPluralName?: Maybe<Scalars['String']['output']>;
  /** The singular name of the content type within the GraphQL Schema. */
  graphqlSingleName?: Maybe<Scalars['String']['output']>;
  /** Whether this content type should have archives. Content archives are generated by type and by date. */
  hasArchive?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the content type is hierarchical, for example pages. */
  hierarchical?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the post-type object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether this page is set to the static front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether this page is set to the blog posts page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** Display name of the content type. */
  label?: Maybe<Scalars['String']['output']>;
  /** Details about the content type labels. */
  labels?: Maybe<PostTypeLabelDetails>;
  /** The name of the icon file to display as a menu icon. */
  menuIcon?: Maybe<Scalars['String']['output']>;
  /** The position of this post type in the menu. Only applies if show_in_menu is true. */
  menuPosition?: Maybe<Scalars['Int']['output']>;
  /** The internal name of the post type. This should not be used for display purposes. */
  name?: Maybe<Scalars['String']['output']>;
  /** Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention. */
  public?: Maybe<Scalars['Boolean']['output']>;
  /** Whether queries can be performed on the front end for the content type as part of parse_request(). */
  publiclyQueryable?: Maybe<Scalars['Boolean']['output']>;
  /** Name of content type to display in REST API &quot;wp/v2&quot; namespace. */
  restBase?: Maybe<Scalars['String']['output']>;
  /** The REST Controller class assigned to handling this content type. */
  restControllerClass?: Maybe<Scalars['String']['output']>;
  /** Makes this content type available via the admin bar. */
  showInAdminBar?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to add the content type to the GraphQL Schema. */
  showInGraphql?: Maybe<Scalars['Boolean']['output']>;
  /** Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that. */
  showInMenu?: Maybe<Scalars['Boolean']['output']>;
  /** Makes this content type available for selection in navigation menus. */
  showInNavMenus?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace. */
  showInRest?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to generate and allow a UI for managing this content type in the admin. */
  showUi?: Maybe<Scalars['Boolean']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** An Post Type object */
export type ContentTypeConnectedTaxonomiesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** An Post Type object */
export type ContentTypeContentNodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ContentTypeToContentNodeConnectionWhereArgs>;
};

/** A paginated collection of ContentType Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of ContentType Nodes */
export type ContentTypeConnection = {
  /** A list of edges (relational context) between RootQuery and connected ContentType Nodes */
  edges: Array<ContentTypeConnectionEdge>;
  /** A list of connected ContentType Nodes */
  nodes: Array<ContentType>;
  /** Information about pagination in a connection. */
  pageInfo: ContentTypeConnectionPageInfo;
};

/** Represents a connection to a ContentType. Contains both the ContentType Node and metadata about the relationship. */
export type ContentTypeConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected ContentType Node */
  node: ContentType;
};

/** Pagination metadata specific to &quot;ContentTypeConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;ContentTypeConnectionEdge&quot; Nodes. */
export type ContentTypeConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Available content entity types that can be queried or filtered. Identifies the primary content structures available in the system. */
export enum ContentTypeEnum {
  /** The Type of Content object */
  AdminCostsPdf = 'ADMIN_COSTS_PDF',
  /** The Type of Content object */
  AliceHubProgram = 'ALICE_HUB_PROGRAM',
  /** The Type of Content object */
  AliceReportPage = 'ALICE_REPORT_PAGE',
  /** The Type of Content object */
  AliceReportPdf = 'ALICE_REPORT_PDF',
  /** The Type of Content object */
  AliceStats = 'ALICE_STATS',
  /** The Type of Content object */
  Attachment = 'ATTACHMENT',
  /** The Type of Content object */
  CampaignTlkitAsst = 'CAMPAIGN_TLKIT_ASST',
  /** The Type of Content object */
  Current_990FormPdf = 'CURRENT_990_FORM_PDF',
  /** The Type of Content object */
  DonorPrivacyPdf = 'DONOR_PRIVACY_PDF',
  /** The Type of Content object */
  Faqs = 'FAQS',
  /** The Type of Content object */
  FourPillarsHero = 'FOUR_PILLARS_HERO',
  /** The Type of Content object */
  FourPillarsPreview = 'FOUR_PILLARS_PREVIEW',
  /** The Type of Content object */
  GetInvolvedHero = 'GET_INVOLVED_HERO',
  /** The Type of Content object */
  GiftPolicyPdf = 'GIFT_POLICY_PDF',
  /** The Type of Content object */
  GirlScoutsComp = 'GIRL_SCOUTS_COMP',
  /** The Type of Content object */
  HeroOurImpactPage = 'HERO_OUR_IMPACT_PAGE',
  /** The Type of Content object */
  HomePageHero = 'HOME_PAGE_HERO',
  /** The Type of Content object */
  HowToContribute = 'HOW_TO_CONTRIBUTE',
  /** The Type of Content object */
  ImpactCarousel = 'IMPACT_CAROUSEL',
  /** The Type of Content object */
  ImpactStatistics = 'IMPACT_STATISTICS',
  /** The Type of Content object */
  IndivdlsPageHero = 'INDIVDLS_PAGE_HERO',
  /** The Type of Content object */
  MobileFoodPantry = 'MOBILE_FOOD_PANTRY',
  /** The Type of Content object */
  NrtwdsAirLflne = 'NRTWDS_AIR_LFLNE',
  /** The Type of Content object */
  OurImpactHomePage = 'OUR_IMPACT_HOME_PAGE',
  /** The Type of Content object */
  Page = 'PAGE',
  /** The Type of Content object */
  PartnersTicker = 'PARTNERS_TICKER',
  /** The Type of Content object */
  PartnerPageHero = 'PARTNER_PAGE_HERO',
  /** The Type of Content object */
  Post = 'POST',
  /** The Type of Content object */
  UwContactInfo = 'UW_CONTACT_INFO',
  /** The Type of Content object */
  ValuesHistory = 'VALUES_HISTORY',
  /** The Type of Content object */
  VitaTaxPrep = 'VITA_TAX_PREP',
  /** The Type of Content object */
  YmcaComp = 'YMCA_COMP'
}

/** Identifier types for retrieving a specific content type definition. Determines whether to look up content types by ID or name. */
export enum ContentTypeIdTypeEnum {
  /** The globally unique ID */
  Id = 'ID',
  /** The name of the content type. */
  Name = 'NAME'
}

/** Connection between the ContentType type and the ContentNode type */
export type ContentTypeToContentNodeConnection = Connection & ContentNodeConnection & {
  __typename?: 'ContentTypeToContentNodeConnection';
  /** Edges for the ContentTypeToContentNodeConnection connection */
  edges: Array<ContentTypeToContentNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: ContentTypeToContentNodeConnectionPageInfo;
};

/** An edge in a connection */
export type ContentTypeToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'ContentTypeToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Pagination metadata specific to &quot;ContentTypeToContentNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of ContentTypeToContentNodeConnection Nodes. */
export type ContentTypeToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'ContentTypeToContentNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the ContentTypeToContentNodeConnection connection */
export type ContentTypeToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the ContentType type and the Taxonomy type */
export type ContentTypeToTaxonomyConnection = Connection & TaxonomyConnection & {
  __typename?: 'ContentTypeToTaxonomyConnection';
  /** Edges for the ContentTypeToTaxonomyConnection connection */
  edges: Array<ContentTypeToTaxonomyConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Taxonomy>;
  /** Information about pagination in a connection. */
  pageInfo: ContentTypeToTaxonomyConnectionPageInfo;
};

/** An edge in a connection */
export type ContentTypeToTaxonomyConnectionEdge = Edge & TaxonomyConnectionEdge & {
  __typename?: 'ContentTypeToTaxonomyConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Taxonomy;
};

/** Pagination metadata specific to &quot;ContentTypeToTaxonomyConnection&quot; collections. Provides cursors and flags for navigating through sets of ContentTypeToTaxonomyConnection Nodes. */
export type ContentTypeToTaxonomyConnectionPageInfo = PageInfo & TaxonomyConnectionPageInfo & WpPageInfo & {
  __typename?: 'ContentTypeToTaxonomyConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Allowed Content Types of the Category taxonomy. */
export enum ContentTypesOfCategoryEnum {
  /** The Type of Content object */
  Post = 'POST'
}

/** Allowed Content Types of the PostFormat taxonomy. */
export enum ContentTypesOfPostFormatEnum {
  /** The Type of Content object */
  Post = 'POST'
}

/** Allowed Content Types of the Tag taxonomy. */
export enum ContentTypesOfTagEnum {
  /** The Type of Content object */
  Post = 'POST'
}

/** Input for the createAdminCostPdf mutation. */
export type CreateAdminCostPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createAdminCostPdf mutation. */
export type CreateAdminCostPdfPayload = {
  __typename?: 'CreateAdminCostPdfPayload';
  /** The Post object mutation type. */
  adminCostPdf?: Maybe<AdminCostPdf>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the createAliceHubProgram mutation. */
export type CreateAliceHubProgramInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createAliceHubProgram mutation. */
export type CreateAliceHubProgramPayload = {
  __typename?: 'CreateAliceHubProgramPayload';
  /** The Post object mutation type. */
  aliceHubProgram?: Maybe<AliceHubProgram>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the createAliceReportPage mutation. */
export type CreateAliceReportPageInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createAliceReportPage mutation. */
export type CreateAliceReportPagePayload = {
  __typename?: 'CreateAliceReportPagePayload';
  /** The Post object mutation type. */
  aliceReportPage?: Maybe<AliceReportPage>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the createAliceReportPdf mutation. */
export type CreateAliceReportPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createAliceReportPdf mutation. */
export type CreateAliceReportPdfPayload = {
  __typename?: 'CreateAliceReportPdfPayload';
  /** The Post object mutation type. */
  aliceReportPdf?: Maybe<AliceReportPdf>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the createAliceStats mutation. */
export type CreateAliceStatsInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createAliceStats mutation. */
export type CreateAliceStatsPayload = {
  __typename?: 'CreateAliceStatsPayload';
  /** The Post object mutation type. */
  aliceStats?: Maybe<AliceStats>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the createCampaignToolkitAsset mutation. */
export type CreateCampaignToolkitAssetInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createCampaignToolkitAsset mutation. */
export type CreateCampaignToolkitAssetPayload = {
  __typename?: 'CreateCampaignToolkitAssetPayload';
  /** The Post object mutation type. */
  campaignToolkitAsset?: Maybe<CampaignToolkitAsset>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the createCategory mutation. */
export type CreateCategoryInput = {
  /** The slug that the category will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the category object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The name of the category object to mutate */
  name: Scalars['String']['input'];
  /** The database ID of the category that should be set as the parent. This field cannot be used in conjunction with parentId */
  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the category that should be set as the parent. This field cannot be used in conjunction with parentDatabaseId */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createCategory mutation. */
export type CreateCategoryPayload = {
  __typename?: 'CreateCategoryPayload';
  /** The created category */
  category?: Maybe<Category>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the createComment mutation. */
export type CreateCommentInput = {
  /** The name of the comment's author. */
  author?: InputMaybe<Scalars['String']['input']>;
  /** The email of the comment's author. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** The url of the comment's author. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The database ID of the post object the comment belongs to. */
  commentOn?: InputMaybe<Scalars['Int']['input']>;
  /** Content of the comment. */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** Parent comment ID of current comment. */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** The approval status of the comment */
  status?: InputMaybe<CommentStatusEnum>;
  /** Type of comment. */
  type?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createComment mutation. */
export type CreateCommentPayload = {
  __typename?: 'CreateCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The comment that was created */
  comment?: Maybe<Comment>;
  /** Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache */
  success?: Maybe<Scalars['Boolean']['output']>;
};

/** Input for the createCurrent990FormPdf mutation. */
export type CreateCurrent990FormPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createCurrent990FormPdf mutation. */
export type CreateCurrent990FormPdfPayload = {
  __typename?: 'CreateCurrent990FormPdfPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  current990FormPdf?: Maybe<Current990FormPdf>;
};

/** Input for the createDonorPrivacyPolicyPdf mutation. */
export type CreateDonorPrivacyPolicyPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createDonorPrivacyPolicyPdf mutation. */
export type CreateDonorPrivacyPolicyPdfPayload = {
  __typename?: 'CreateDonorPrivacyPolicyPdfPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  donorPrivacyPolicyPdf?: Maybe<DonorPrivacyPolicyPdf>;
};

/** Input for the createFaq mutation. */
export type CreateFaqInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createFaq mutation. */
export type CreateFaqPayload = {
  __typename?: 'CreateFaqPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  faq?: Maybe<Faq>;
};

/** Input for the createFourPillarsHeroComponent mutation. */
export type CreateFourPillarsHeroComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createFourPillarsHeroComponent mutation. */
export type CreateFourPillarsHeroComponentPayload = {
  __typename?: 'CreateFourPillarsHeroComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  fourPillarsHeroComponent?: Maybe<FourPillarsHeroComponent>;
};

/** Input for the createFourPillarsPreview mutation. */
export type CreateFourPillarsPreviewInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createFourPillarsPreview mutation. */
export type CreateFourPillarsPreviewPayload = {
  __typename?: 'CreateFourPillarsPreviewPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  fourPillarsPreview?: Maybe<FourPillarsPreview>;
};

/** Input for the createGetInvolvedHero mutation. */
export type CreateGetInvolvedHeroInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createGetInvolvedHero mutation. */
export type CreateGetInvolvedHeroPayload = {
  __typename?: 'CreateGetInvolvedHeroPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  getInvolvedHero?: Maybe<GetInvolvedHero>;
};

/** Input for the createGiftAcceptancePolicyPdf mutation. */
export type CreateGiftAcceptancePolicyPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createGiftAcceptancePolicyPdf mutation. */
export type CreateGiftAcceptancePolicyPdfPayload = {
  __typename?: 'CreateGiftAcceptancePolicyPdfPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  giftAcceptancePolicyPdf?: Maybe<GiftAcceptancePolicyPdf>;
};

/** Input for the createGirlScoutsComponent mutation. */
export type CreateGirlScoutsComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createGirlScoutsComponent mutation. */
export type CreateGirlScoutsComponentPayload = {
  __typename?: 'CreateGirlScoutsComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  girlScoutsComponent?: Maybe<GirlScoutsComponent>;
};

/** Input for the createHeroComponentOurImpactPage mutation. */
export type CreateHeroComponentOurImpactPageInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createHeroComponentOurImpactPage mutation. */
export type CreateHeroComponentOurImpactPagePayload = {
  __typename?: 'CreateHeroComponentOurImpactPagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  heroComponentOurImpactPage?: Maybe<HeroComponentOurImpactPage>;
};

/** Input for the createHomePageHero mutation. */
export type CreateHomePageHeroInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createHomePageHero mutation. */
export type CreateHomePageHeroPayload = {
  __typename?: 'CreateHomePageHeroPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  homePageHero?: Maybe<HomePageHero>;
};

/** Input for the createHowToContributeComponent mutation. */
export type CreateHowToContributeComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createHowToContributeComponent mutation. */
export type CreateHowToContributeComponentPayload = {
  __typename?: 'CreateHowToContributeComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  howToContributeComponent?: Maybe<HowToContributeComponent>;
};

/** Input for the createImpactCarousel mutation. */
export type CreateImpactCarouselInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createImpactCarousel mutation. */
export type CreateImpactCarouselPayload = {
  __typename?: 'CreateImpactCarouselPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  impactCarousel?: Maybe<ImpactCarousel>;
};

/** Input for the createImpactStatistic mutation. */
export type CreateImpactStatisticInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createImpactStatistic mutation. */
export type CreateImpactStatisticPayload = {
  __typename?: 'CreateImpactStatisticPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  impactStatistic?: Maybe<ImpactStatistic>;
};

/** Input for the createIndividualsPageHero mutation. */
export type CreateIndividualsPageHeroInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createIndividualsPageHero mutation. */
export type CreateIndividualsPageHeroPayload = {
  __typename?: 'CreateIndividualsPageHeroPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  individualsPageHero?: Maybe<IndividualsPageHero>;
};

/** Input for the createMediaItem mutation. */
export type CreateMediaItemInput = {
  /** Alternative text to display when mediaItem is not displayed */
  altText?: InputMaybe<Scalars['String']['input']>;
  /** The userId to assign as the author of the mediaItem */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** The caption for the mediaItem */
  caption?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The comment status for the mediaItem */
  commentStatus?: InputMaybe<Scalars['String']['input']>;
  /** The date of the mediaItem */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The date (in GMT zone) of the mediaItem */
  dateGmt?: InputMaybe<Scalars['String']['input']>;
  /** Description of the mediaItem */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The file name of the mediaItem */
  filePath?: InputMaybe<Scalars['String']['input']>;
  /** The file type of the mediaItem */
  fileType?: InputMaybe<MimeTypeEnum>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The ping status for the mediaItem */
  pingStatus?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the mediaItem */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the mediaItem */
  status?: InputMaybe<MediaItemStatusEnum>;
  /** The title of the mediaItem */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createMediaItem mutation. */
export type CreateMediaItemPayload = {
  __typename?: 'CreateMediaItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The MediaItem object mutation type. */
  mediaItem?: Maybe<MediaItem>;
};

/** Input for the createMobileFoodPantryComponent mutation. */
export type CreateMobileFoodPantryComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createMobileFoodPantryComponent mutation. */
export type CreateMobileFoodPantryComponentPayload = {
  __typename?: 'CreateMobileFoodPantryComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  mobileFoodPantryComponent?: Maybe<MobileFoodPantryComponent>;
};

/** Input for the createNorthwoodsAirLifeline mutation. */
export type CreateNorthwoodsAirLifelineInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createNorthwoodsAirLifeline mutation. */
export type CreateNorthwoodsAirLifelinePayload = {
  __typename?: 'CreateNorthwoodsAirLifelinePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  northwoodsAirLifeline?: Maybe<NorthwoodsAirLifeline>;
};

/** Input for the createOurImpactHomePage mutation. */
export type CreateOurImpactHomePageInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createOurImpactHomePage mutation. */
export type CreateOurImpactHomePagePayload = {
  __typename?: 'CreateOurImpactHomePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  ourImpactHomePage?: Maybe<OurImpactHomePage>;
};

/** Input for the createPage mutation. */
export type CreatePageInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createPage mutation. */
export type CreatePagePayload = {
  __typename?: 'CreatePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  page?: Maybe<Page>;
};

/** Input for the createPartnerPageHero mutation. */
export type CreatePartnerPageHeroInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createPartnerPageHero mutation. */
export type CreatePartnerPageHeroPayload = {
  __typename?: 'CreatePartnerPageHeroPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  partnerPageHero?: Maybe<PartnerPageHero>;
};

/** Input for the createPartnersTickerItem mutation. */
export type CreatePartnersTickerItemInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createPartnersTickerItem mutation. */
export type CreatePartnersTickerItemPayload = {
  __typename?: 'CreatePartnersTickerItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  partnersTickerItem?: Maybe<PartnersTickerItem>;
};

/** Input for the createPostFormat mutation. */
export type CreatePostFormatInput = {
  /** The slug that the post_format will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the post_format object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The name of the post_format object to mutate */
  name: Scalars['String']['input'];
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createPostFormat mutation. */
export type CreatePostFormatPayload = {
  __typename?: 'CreatePostFormatPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The created post_format */
  postFormat?: Maybe<PostFormat>;
};

/** Input for the createPost mutation. */
export type CreatePostInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** Set connections between the post and categories */
  categories?: InputMaybe<PostCategoriesInput>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The excerpt of the object */
  excerpt?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The ping status for the object */
  pingStatus?: InputMaybe<Scalars['String']['input']>;
  /** URLs that have been pinged. */
  pinged?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Set connections between the post and postFormats */
  postFormats?: InputMaybe<PostPostFormatsInput>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** Set connections between the post and tags */
  tags?: InputMaybe<PostTagsInput>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
  /** URLs queued to be pinged. */
  toPing?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

/** The payload for the createPost mutation. */
export type CreatePostPayload = {
  __typename?: 'CreatePostPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  post?: Maybe<Post>;
};

/** Input for the createTag mutation. */
export type CreateTagInput = {
  /** The slug that the post_tag will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the post_tag object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The name of the post_tag object to mutate */
  name: Scalars['String']['input'];
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createTag mutation. */
export type CreateTagPayload = {
  __typename?: 'CreateTagPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The created post_tag */
  tag?: Maybe<Tag>;
};

/** Input for the createUser mutation. */
export type CreateUserInput = {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** The user's first name. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars['String']['input']>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** User's locale. */
  locale?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars['String']['input']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** If true, this will refresh the users JWT secret. */
  refreshJwtUserSecret?: InputMaybe<Scalars['Boolean']['input']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars['String']['input']>;
  /** If true, this will revoke the users JWT secret. If false, this will unrevoke the JWT secret AND issue a new one. To revoke, the user must have proper capabilities to edit users JWT secrets. */
  revokeJwtUserSecret?: InputMaybe<Scalars['Boolean']['input']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars['String']['input']>;
  /** An array of roles to be assigned to the user. */
  roles?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** A string that contains the user's username for logging in. */
  username: Scalars['String']['input'];
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars['String']['input']>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createUser mutation. */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The User object mutation type. */
  user?: Maybe<User>;
};

/** Input for the createUwContactInfo mutation. */
export type CreateUwContactInfoInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createUwContactInfo mutation. */
export type CreateUwContactInfoPayload = {
  __typename?: 'CreateUwContactInfoPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  uwContactInfo?: Maybe<UwContactInfo>;
};

/** Input for the createValuesHistory mutation. */
export type CreateValuesHistoryInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createValuesHistory mutation. */
export type CreateValuesHistoryPayload = {
  __typename?: 'CreateValuesHistoryPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  valuesHistory?: Maybe<ValuesHistory>;
};

/** Input for the createVitaTaxPrep mutation. */
export type CreateVitaTaxPrepInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createVitaTaxPrep mutation. */
export type CreateVitaTaxPrepPayload = {
  __typename?: 'CreateVitaTaxPrepPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  vitaTaxPrep?: Maybe<VitaTaxPrep>;
};

/** Input for the createYmcaComponent mutation. */
export type CreateYmcaComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createYmcaComponent mutation. */
export type CreateYmcaComponentPayload = {
  __typename?: 'CreateYmcaComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  ymcaComponent?: Maybe<YmcaComponent>;
};

/** The &quot;Current990FormPDFFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type Current990FormPdfFields = AcfFieldGroup & AcfFieldGroupFields & Current990FormPdfFields_Fields & {
  __typename?: 'Current990FormPDFFields';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;Current990FormPDFFields&quot; Field Group */
  pdfFile?: Maybe<AcfMediaItemConnectionEdge>;
};

/** Interface representing fields of the ACF &quot;Current990FormPDFFields&quot; Field Group */
export type Current990FormPdfFields_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;Current990FormPDFFields&quot; Field Group */
  pdfFile?: Maybe<AcfMediaItemConnectionEdge>;
};

/** The current990FormPdf type */
export type Current990FormPdf = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfCurrent990FormPdfFields & {
  __typename?: 'Current990FormPdf';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<Current990FormPdfToCurrent990FormPdfConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** Fields of the Current990FormPDFFields ACF Field Group */
  current990FormPDFFields?: Maybe<Current990FormPdfFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  current990FormPdfId: Scalars['Int']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the current_990_form_pdf object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the current_990_form_pdf object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<Current990FormPdfToParentConnectionEdge>;
  /** The password for the current_990_form_pdf object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the Current990FormPdf type and the current990FormPdf type */
  preview?: Maybe<Current990FormPdfToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The current990FormPdf type */
export type Current990FormPdfAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The current990FormPdf type */
export type Current990FormPdfEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The current990FormPdf type */
export type Current990FormPdfEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The current990FormPdf type */
export type Current990FormPdfTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of current990FormPdf Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of current990FormPdf Nodes */
export type Current990FormPdfConnection = {
  /** A list of edges (relational context) between RootQuery and connected current990FormPdf Nodes */
  edges: Array<Current990FormPdfConnectionEdge>;
  /** A list of connected current990FormPdf Nodes */
  nodes: Array<Current990FormPdf>;
  /** Information about pagination in a connection. */
  pageInfo: Current990FormPdfConnectionPageInfo;
};

/** Represents a connection to a current990FormPdf. Contains both the current990FormPdf Node and metadata about the relationship. */
export type Current990FormPdfConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected current990FormPdf Node */
  node: Current990FormPdf;
};

/** Pagination metadata specific to &quot;Current990FormPdfConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;Current990FormPdfConnectionEdge&quot; Nodes. */
export type Current990FormPdfConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific Current990FormPdf. Specifies which unique attribute is used to find an exact Current990FormPdf. */
export enum Current990FormPdfIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the Current990FormPdf type and the current990FormPdf type */
export type Current990FormPdfToCurrent990FormPdfConnection = Connection & Current990FormPdfConnection & {
  __typename?: 'Current990FormPdfToCurrent990FormPdfConnection';
  /** Edges for the Current990FormPdfToCurrent990FormPdfConnection connection */
  edges: Array<Current990FormPdfToCurrent990FormPdfConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Current990FormPdf>;
  /** Information about pagination in a connection. */
  pageInfo: Current990FormPdfToCurrent990FormPdfConnectionPageInfo;
};

/** An edge in a connection */
export type Current990FormPdfToCurrent990FormPdfConnectionEdge = Current990FormPdfConnectionEdge & Edge & {
  __typename?: 'Current990FormPdfToCurrent990FormPdfConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: Current990FormPdf;
};

/** Pagination metadata specific to &quot;Current990FormPdfToCurrent990FormPdfConnection&quot; collections. Provides cursors and flags for navigating through sets of Current990FormPdfToCurrent990FormPdfConnection Nodes. */
export type Current990FormPdfToCurrent990FormPdfConnectionPageInfo = Current990FormPdfConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'Current990FormPdfToCurrent990FormPdfConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the Current990FormPdf type and the current990FormPdf type */
export type Current990FormPdfToParentConnectionEdge = Current990FormPdfConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'Current990FormPdfToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: Current990FormPdf;
};

/** Connection between the Current990FormPdf type and the current990FormPdf type */
export type Current990FormPdfToPreviewConnectionEdge = Current990FormPdfConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'Current990FormPdfToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Current990FormPdf;
};

/** An object that has a unique numeric identifier in the database. Provides consistent access to the database ID across different object types. */
export type DatabaseIdentifier = {
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
};

/** Date values */
export type DateInput = {
  /** Day of the month (from 1 to 31) */
  day?: InputMaybe<Scalars['Int']['input']>;
  /** Month number (from 1 to 12) */
  month?: InputMaybe<Scalars['Int']['input']>;
  /** 4 digit year (e.g. 2017) */
  year?: InputMaybe<Scalars['Int']['input']>;
};

/** Filter the connection based on input */
export type DateQueryInput = {
  /** Nodes should be returned after this date */
  after?: InputMaybe<DateInput>;
  /** Nodes should be returned before this date */
  before?: InputMaybe<DateInput>;
  /** Column to query against */
  column?: InputMaybe<PostObjectsConnectionDateColumnEnum>;
  /** For after/before, whether exact value should be matched or not */
  compare?: InputMaybe<Scalars['String']['input']>;
  /** Day of the month (from 1 to 31) */
  day?: InputMaybe<Scalars['Int']['input']>;
  /** Hour (from 0 to 23) */
  hour?: InputMaybe<Scalars['Int']['input']>;
  /** For after/before, whether exact value should be matched or not */
  inclusive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Minute (from 0 to 59) */
  minute?: InputMaybe<Scalars['Int']['input']>;
  /** Month number (from 1 to 12) */
  month?: InputMaybe<Scalars['Int']['input']>;
  /** OR or AND, how the sub-arrays should be compared */
  relation?: InputMaybe<RelationEnum>;
  /** Second (0 to 59) */
  second?: InputMaybe<Scalars['Int']['input']>;
  /** Week of the year (from 0 to 53) */
  week?: InputMaybe<Scalars['Int']['input']>;
  /** 4 digit year (e.g. 2017) */
  year?: InputMaybe<Scalars['Int']['input']>;
};

/** The template assigned to the node */
export type DefaultTemplate = ContentTemplate & {
  __typename?: 'DefaultTemplate';
  /** The name of the template */
  templateName?: Maybe<Scalars['String']['output']>;
};

/** Input for the deleteAdminCostPdf mutation. */
export type DeleteAdminCostPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the adminCostPdf to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteAdminCostPdf mutation. */
export type DeleteAdminCostPdfPayload = {
  __typename?: 'DeleteAdminCostPdfPayload';
  /** The object before it was deleted */
  adminCostPdf?: Maybe<AdminCostPdf>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
};

/** Input for the deleteAliceHubProgram mutation. */
export type DeleteAliceHubProgramInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the aliceHubProgram to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteAliceHubProgram mutation. */
export type DeleteAliceHubProgramPayload = {
  __typename?: 'DeleteAliceHubProgramPayload';
  /** The object before it was deleted */
  aliceHubProgram?: Maybe<AliceHubProgram>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
};

/** Input for the deleteAliceReportPage mutation. */
export type DeleteAliceReportPageInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the aliceReportPage to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteAliceReportPage mutation. */
export type DeleteAliceReportPagePayload = {
  __typename?: 'DeleteAliceReportPagePayload';
  /** The object before it was deleted */
  aliceReportPage?: Maybe<AliceReportPage>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
};

/** Input for the deleteAliceReportPdf mutation. */
export type DeleteAliceReportPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the aliceReportPdf to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteAliceReportPdf mutation. */
export type DeleteAliceReportPdfPayload = {
  __typename?: 'DeleteAliceReportPdfPayload';
  /** The object before it was deleted */
  aliceReportPdf?: Maybe<AliceReportPdf>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
};

/** Input for the deleteAliceStats mutation. */
export type DeleteAliceStatsInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the aliceStats to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteAliceStats mutation. */
export type DeleteAliceStatsPayload = {
  __typename?: 'DeleteAliceStatsPayload';
  /** The object before it was deleted */
  aliceStats?: Maybe<AliceStats>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
};

/** Input for the deleteCampaignToolkitAsset mutation. */
export type DeleteCampaignToolkitAssetInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the campaignToolkitAsset to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteCampaignToolkitAsset mutation. */
export type DeleteCampaignToolkitAssetPayload = {
  __typename?: 'DeleteCampaignToolkitAssetPayload';
  /** The object before it was deleted */
  campaignToolkitAsset?: Maybe<CampaignToolkitAsset>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
};

/** Input for the deleteCategory mutation. */
export type DeleteCategoryInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the category to delete */
  id: Scalars['ID']['input'];
};

/** The payload for the deleteCategory mutation. */
export type DeleteCategoryPayload = {
  __typename?: 'DeleteCategoryPayload';
  /** The deleted term object */
  category?: Maybe<Category>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
};

/** Input for the deleteComment mutation. */
export type DeleteCommentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the comment should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The deleted comment ID */
  id: Scalars['ID']['input'];
};

/** The payload for the deleteComment mutation. */
export type DeleteCommentPayload = {
  __typename?: 'DeleteCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The deleted comment object */
  comment?: Maybe<Comment>;
  /** The deleted comment ID */
  deletedId?: Maybe<Scalars['ID']['output']>;
};

/** Input for the deleteCurrent990FormPdf mutation. */
export type DeleteCurrent990FormPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the current990FormPdf to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteCurrent990FormPdf mutation. */
export type DeleteCurrent990FormPdfPayload = {
  __typename?: 'DeleteCurrent990FormPdfPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The object before it was deleted */
  current990FormPdf?: Maybe<Current990FormPdf>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
};

/** Input for the deleteDonorPrivacyPolicyPdf mutation. */
export type DeleteDonorPrivacyPolicyPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the donorPrivacyPolicyPdf to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteDonorPrivacyPolicyPdf mutation. */
export type DeleteDonorPrivacyPolicyPdfPayload = {
  __typename?: 'DeleteDonorPrivacyPolicyPdfPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  donorPrivacyPolicyPdf?: Maybe<DonorPrivacyPolicyPdf>;
};

/** Input for the deleteFaq mutation. */
export type DeleteFaqInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the faq to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteFaq mutation. */
export type DeleteFaqPayload = {
  __typename?: 'DeleteFaqPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  faq?: Maybe<Faq>;
};

/** Input for the deleteFourPillarsHeroComponent mutation. */
export type DeleteFourPillarsHeroComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the fourPillarsHeroComponent to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteFourPillarsHeroComponent mutation. */
export type DeleteFourPillarsHeroComponentPayload = {
  __typename?: 'DeleteFourPillarsHeroComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  fourPillarsHeroComponent?: Maybe<FourPillarsHeroComponent>;
};

/** Input for the deleteFourPillarsPreview mutation. */
export type DeleteFourPillarsPreviewInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the fourPillarsPreview to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteFourPillarsPreview mutation. */
export type DeleteFourPillarsPreviewPayload = {
  __typename?: 'DeleteFourPillarsPreviewPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  fourPillarsPreview?: Maybe<FourPillarsPreview>;
};

/** Input for the deleteGetInvolvedHero mutation. */
export type DeleteGetInvolvedHeroInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the getInvolvedHero to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteGetInvolvedHero mutation. */
export type DeleteGetInvolvedHeroPayload = {
  __typename?: 'DeleteGetInvolvedHeroPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  getInvolvedHero?: Maybe<GetInvolvedHero>;
};

/** Input for the deleteGiftAcceptancePolicyPdf mutation. */
export type DeleteGiftAcceptancePolicyPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the giftAcceptancePolicyPdf to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteGiftAcceptancePolicyPdf mutation. */
export type DeleteGiftAcceptancePolicyPdfPayload = {
  __typename?: 'DeleteGiftAcceptancePolicyPdfPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  giftAcceptancePolicyPdf?: Maybe<GiftAcceptancePolicyPdf>;
};

/** Input for the deleteGirlScoutsComponent mutation. */
export type DeleteGirlScoutsComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the girlScoutsComponent to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteGirlScoutsComponent mutation. */
export type DeleteGirlScoutsComponentPayload = {
  __typename?: 'DeleteGirlScoutsComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  girlScoutsComponent?: Maybe<GirlScoutsComponent>;
};

/** Input for the deleteHeroComponentOurImpactPage mutation. */
export type DeleteHeroComponentOurImpactPageInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the heroComponentOurImpactPage to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteHeroComponentOurImpactPage mutation. */
export type DeleteHeroComponentOurImpactPagePayload = {
  __typename?: 'DeleteHeroComponentOurImpactPagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  heroComponentOurImpactPage?: Maybe<HeroComponentOurImpactPage>;
};

/** Input for the deleteHomePageHero mutation. */
export type DeleteHomePageHeroInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the homePageHero to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteHomePageHero mutation. */
export type DeleteHomePageHeroPayload = {
  __typename?: 'DeleteHomePageHeroPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  homePageHero?: Maybe<HomePageHero>;
};

/** Input for the deleteHowToContributeComponent mutation. */
export type DeleteHowToContributeComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the howToContributeComponent to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteHowToContributeComponent mutation. */
export type DeleteHowToContributeComponentPayload = {
  __typename?: 'DeleteHowToContributeComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  howToContributeComponent?: Maybe<HowToContributeComponent>;
};

/** Input for the deleteImpactCarousel mutation. */
export type DeleteImpactCarouselInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the impactCarousel to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteImpactCarousel mutation. */
export type DeleteImpactCarouselPayload = {
  __typename?: 'DeleteImpactCarouselPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  impactCarousel?: Maybe<ImpactCarousel>;
};

/** Input for the deleteImpactStatistic mutation. */
export type DeleteImpactStatisticInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the impactStatistic to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteImpactStatistic mutation. */
export type DeleteImpactStatisticPayload = {
  __typename?: 'DeleteImpactStatisticPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  impactStatistic?: Maybe<ImpactStatistic>;
};

/** Input for the deleteIndividualsPageHero mutation. */
export type DeleteIndividualsPageHeroInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the individualsPageHero to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteIndividualsPageHero mutation. */
export type DeleteIndividualsPageHeroPayload = {
  __typename?: 'DeleteIndividualsPageHeroPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  individualsPageHero?: Maybe<IndividualsPageHero>;
};

/** Input for the deleteMediaItem mutation. */
export type DeleteMediaItemInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the mediaItem should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the mediaItem to delete */
  id: Scalars['ID']['input'];
};

/** The payload for the deleteMediaItem mutation. */
export type DeleteMediaItemPayload = {
  __typename?: 'DeleteMediaItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted mediaItem */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The mediaItem before it was deleted */
  mediaItem?: Maybe<MediaItem>;
};

/** Input for the deleteMobileFoodPantryComponent mutation. */
export type DeleteMobileFoodPantryComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the mobileFoodPantryComponent to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteMobileFoodPantryComponent mutation. */
export type DeleteMobileFoodPantryComponentPayload = {
  __typename?: 'DeleteMobileFoodPantryComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  mobileFoodPantryComponent?: Maybe<MobileFoodPantryComponent>;
};

/** Input for the deleteNorthwoodsAirLifeline mutation. */
export type DeleteNorthwoodsAirLifelineInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the northwoodsAirLifeline to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteNorthwoodsAirLifeline mutation. */
export type DeleteNorthwoodsAirLifelinePayload = {
  __typename?: 'DeleteNorthwoodsAirLifelinePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  northwoodsAirLifeline?: Maybe<NorthwoodsAirLifeline>;
};

/** Input for the deleteOurImpactHomePage mutation. */
export type DeleteOurImpactHomePageInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the ourImpactHomePage to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteOurImpactHomePage mutation. */
export type DeleteOurImpactHomePagePayload = {
  __typename?: 'DeleteOurImpactHomePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  ourImpactHomePage?: Maybe<OurImpactHomePage>;
};

/** Input for the deletePage mutation. */
export type DeletePageInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the page to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deletePage mutation. */
export type DeletePagePayload = {
  __typename?: 'DeletePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  page?: Maybe<Page>;
};

/** Input for the deletePartnerPageHero mutation. */
export type DeletePartnerPageHeroInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the partnerPageHero to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deletePartnerPageHero mutation. */
export type DeletePartnerPageHeroPayload = {
  __typename?: 'DeletePartnerPageHeroPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  partnerPageHero?: Maybe<PartnerPageHero>;
};

/** Input for the deletePartnersTickerItem mutation. */
export type DeletePartnersTickerItemInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the partnersTickerItem to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deletePartnersTickerItem mutation. */
export type DeletePartnersTickerItemPayload = {
  __typename?: 'DeletePartnersTickerItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  partnersTickerItem?: Maybe<PartnersTickerItem>;
};

/** Input for the deletePostFormat mutation. */
export type DeletePostFormatInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the postFormat to delete */
  id: Scalars['ID']['input'];
};

/** The payload for the deletePostFormat mutation. */
export type DeletePostFormatPayload = {
  __typename?: 'DeletePostFormatPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The deleted term object */
  postFormat?: Maybe<PostFormat>;
};

/** Input for the deletePost mutation. */
export type DeletePostInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the post to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deletePost mutation. */
export type DeletePostPayload = {
  __typename?: 'DeletePostPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  post?: Maybe<Post>;
};

/** Input for the deleteTag mutation. */
export type DeleteTagInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the tag to delete */
  id: Scalars['ID']['input'];
};

/** The payload for the deleteTag mutation. */
export type DeleteTagPayload = {
  __typename?: 'DeleteTagPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The deleted term object */
  tag?: Maybe<Tag>;
};

/** Input for the deleteUser mutation. */
export type DeleteUserInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the user you want to delete */
  id: Scalars['ID']['input'];
  /** Reassign posts and links to new User ID. */
  reassignId?: InputMaybe<Scalars['ID']['input']>;
};

/** The payload for the deleteUser mutation. */
export type DeleteUserPayload = {
  __typename?: 'DeleteUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the user that you just deleted */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The deleted user object */
  user?: Maybe<User>;
};

/** Input for the deleteUwContactInfo mutation. */
export type DeleteUwContactInfoInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the uwContactInfo to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteUwContactInfo mutation. */
export type DeleteUwContactInfoPayload = {
  __typename?: 'DeleteUwContactInfoPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  uwContactInfo?: Maybe<UwContactInfo>;
};

/** Input for the deleteValuesHistory mutation. */
export type DeleteValuesHistoryInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the valuesHistory to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteValuesHistory mutation. */
export type DeleteValuesHistoryPayload = {
  __typename?: 'DeleteValuesHistoryPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  valuesHistory?: Maybe<ValuesHistory>;
};

/** Input for the deleteVitaTaxPrep mutation. */
export type DeleteVitaTaxPrepInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the vitaTaxPrep to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteVitaTaxPrep mutation. */
export type DeleteVitaTaxPrepPayload = {
  __typename?: 'DeleteVitaTaxPrepPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  vitaTaxPrep?: Maybe<VitaTaxPrep>;
};

/** Input for the deleteYmcaComponent mutation. */
export type DeleteYmcaComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the ymcaComponent to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteYmcaComponent mutation. */
export type DeleteYmcaComponentPayload = {
  __typename?: 'DeleteYmcaComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  ymcaComponent?: Maybe<YmcaComponent>;
};

/** The discussion setting type */
export type DiscussionSettings = {
  __typename?: 'DiscussionSettings';
  /** Allow people to submit comments on new posts. */
  defaultCommentStatus?: Maybe<Scalars['String']['output']>;
  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
  defaultPingStatus?: Maybe<Scalars['String']['output']>;
};

/** The &quot;DonorPrivacyPolicyPDFFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type DonorPrivacyPolicyPdfFields = AcfFieldGroup & AcfFieldGroupFields & DonorPrivacyPolicyPdfFields_Fields & {
  __typename?: 'DonorPrivacyPolicyPDFFields';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;DonorPrivacyPolicyPDFFields&quot; Field Group */
  pdfFile?: Maybe<AcfMediaItemConnectionEdge>;
};

/** Interface representing fields of the ACF &quot;DonorPrivacyPolicyPDFFields&quot; Field Group */
export type DonorPrivacyPolicyPdfFields_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;DonorPrivacyPolicyPDFFields&quot; Field Group */
  pdfFile?: Maybe<AcfMediaItemConnectionEdge>;
};

/** The donorPrivacyPolicyPdf type */
export type DonorPrivacyPolicyPdf = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfDonorPrivacyPolicyPdfFields & {
  __typename?: 'DonorPrivacyPolicyPdf';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<DonorPrivacyPolicyPdfToDonorPrivacyPolicyPdfConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** Fields of the DonorPrivacyPolicyPDFFields ACF Field Group */
  donorPrivacyPolicyPDFFields?: Maybe<DonorPrivacyPolicyPdfFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  donorPrivacyPolicyPdfId: Scalars['Int']['output'];
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the donor_privacy_pdf object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the donor_privacy_pdf object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<DonorPrivacyPolicyPdfToParentConnectionEdge>;
  /** The password for the donor_privacy_pdf object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the DonorPrivacyPolicyPdf type and the donorPrivacyPolicyPdf type */
  preview?: Maybe<DonorPrivacyPolicyPdfToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The donorPrivacyPolicyPdf type */
export type DonorPrivacyPolicyPdfAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The donorPrivacyPolicyPdf type */
export type DonorPrivacyPolicyPdfEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The donorPrivacyPolicyPdf type */
export type DonorPrivacyPolicyPdfEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The donorPrivacyPolicyPdf type */
export type DonorPrivacyPolicyPdfTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of donorPrivacyPolicyPdf Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of donorPrivacyPolicyPdf Nodes */
export type DonorPrivacyPolicyPdfConnection = {
  /** A list of edges (relational context) between RootQuery and connected donorPrivacyPolicyPdf Nodes */
  edges: Array<DonorPrivacyPolicyPdfConnectionEdge>;
  /** A list of connected donorPrivacyPolicyPdf Nodes */
  nodes: Array<DonorPrivacyPolicyPdf>;
  /** Information about pagination in a connection. */
  pageInfo: DonorPrivacyPolicyPdfConnectionPageInfo;
};

/** Represents a connection to a donorPrivacyPolicyPdf. Contains both the donorPrivacyPolicyPdf Node and metadata about the relationship. */
export type DonorPrivacyPolicyPdfConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected donorPrivacyPolicyPdf Node */
  node: DonorPrivacyPolicyPdf;
};

/** Pagination metadata specific to &quot;DonorPrivacyPolicyPdfConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;DonorPrivacyPolicyPdfConnectionEdge&quot; Nodes. */
export type DonorPrivacyPolicyPdfConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific DonorPrivacyPolicyPdf. Specifies which unique attribute is used to find an exact DonorPrivacyPolicyPdf. */
export enum DonorPrivacyPolicyPdfIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the DonorPrivacyPolicyPdf type and the donorPrivacyPolicyPdf type */
export type DonorPrivacyPolicyPdfToDonorPrivacyPolicyPdfConnection = Connection & DonorPrivacyPolicyPdfConnection & {
  __typename?: 'DonorPrivacyPolicyPdfToDonorPrivacyPolicyPdfConnection';
  /** Edges for the DonorPrivacyPolicyPdfToDonorPrivacyPolicyPdfConnection connection */
  edges: Array<DonorPrivacyPolicyPdfToDonorPrivacyPolicyPdfConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<DonorPrivacyPolicyPdf>;
  /** Information about pagination in a connection. */
  pageInfo: DonorPrivacyPolicyPdfToDonorPrivacyPolicyPdfConnectionPageInfo;
};

/** An edge in a connection */
export type DonorPrivacyPolicyPdfToDonorPrivacyPolicyPdfConnectionEdge = DonorPrivacyPolicyPdfConnectionEdge & Edge & {
  __typename?: 'DonorPrivacyPolicyPdfToDonorPrivacyPolicyPdfConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: DonorPrivacyPolicyPdf;
};

/** Pagination metadata specific to &quot;DonorPrivacyPolicyPdfToDonorPrivacyPolicyPdfConnection&quot; collections. Provides cursors and flags for navigating through sets of DonorPrivacyPolicyPdfToDonorPrivacyPolicyPdfConnection Nodes. */
export type DonorPrivacyPolicyPdfToDonorPrivacyPolicyPdfConnectionPageInfo = DonorPrivacyPolicyPdfConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'DonorPrivacyPolicyPdfToDonorPrivacyPolicyPdfConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the DonorPrivacyPolicyPdf type and the donorPrivacyPolicyPdf type */
export type DonorPrivacyPolicyPdfToParentConnectionEdge = DonorPrivacyPolicyPdfConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'DonorPrivacyPolicyPdfToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: DonorPrivacyPolicyPdf;
};

/** Connection between the DonorPrivacyPolicyPdf type and the donorPrivacyPolicyPdf type */
export type DonorPrivacyPolicyPdfToPreviewConnectionEdge = DonorPrivacyPolicyPdfConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'DonorPrivacyPolicyPdfToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: DonorPrivacyPolicyPdf;
};

/** Represents a connection between two objects. Contains both the related object (node) and metadata about the relationship (cursor). */
export type Edge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected node */
  node: Node;
};

/** A script or stylesheet resource that should be loaded by the client. Contains information about the resource&#039;s location, dependencies, and loading behavior. */
export type EnqueuedAsset = {
  /** The inline code to be run after the asset is loaded. */
  after?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /**
   * Deprecated
   * @deprecated Use `EnqueuedAsset.media` instead.
   */
  args?: Maybe<Scalars['Boolean']['output']>;
  /** The inline code to be run before the asset is loaded. */
  before?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc */
  conditional?: Maybe<Scalars['String']['output']>;
  /** Dependencies needed to use this asset */
  dependencies?: Maybe<Array<Maybe<EnqueuedAsset>>>;
  /**
   * Extra information needed for the script
   * @deprecated Use `EnqueuedScript.extraData` instead.
   */
  extra?: Maybe<Scalars['String']['output']>;
  /** The loading group to which this asset belongs. */
  group?: Maybe<Scalars['Int']['output']>;
  /** The handle of the enqueued asset */
  handle?: Maybe<Scalars['String']['output']>;
  /** The ID of the enqueued asset */
  id: Scalars['ID']['output'];
  /** The source of the asset */
  src?: Maybe<Scalars['String']['output']>;
  /** The version of the enqueued asset */
  version?: Maybe<Scalars['String']['output']>;
};

/** Script enqueued by the CMS */
export type EnqueuedScript = EnqueuedAsset & Node & {
  __typename?: 'EnqueuedScript';
  /** The inline code to be run after the asset is loaded. */
  after?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /**
   * Deprecated
   * @deprecated Use `EnqueuedAsset.media` instead.
   */
  args?: Maybe<Scalars['Boolean']['output']>;
  /** The inline code to be run before the asset is loaded. */
  before?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc */
  conditional?: Maybe<Scalars['String']['output']>;
  /** Dependencies needed to use this asset */
  dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;
  /**
   * Extra information needed for the script
   * @deprecated Use `EnqueuedScript.extraData` instead.
   */
  extra?: Maybe<Scalars['String']['output']>;
  /** Extra data supplied to the enqueued script */
  extraData?: Maybe<Scalars['String']['output']>;
  /** The loading group to which this asset belongs. */
  group?: Maybe<Scalars['Int']['output']>;
  /** The location where this script should be loaded */
  groupLocation?: Maybe<ScriptLoadingGroupLocationEnum>;
  /** The handle of the enqueued asset */
  handle?: Maybe<Scalars['String']['output']>;
  /** The global ID of the enqueued script */
  id: Scalars['ID']['output'];
  /** The source of the asset */
  src?: Maybe<Scalars['String']['output']>;
  /** The loading strategy to use on the script tag */
  strategy?: Maybe<ScriptLoadingStrategyEnum>;
  /** The version of the enqueued script */
  version?: Maybe<Scalars['String']['output']>;
};

/** A paginated collection of EnqueuedScript Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of EnqueuedScript Nodes */
export type EnqueuedScriptConnection = {
  /** A list of edges (relational context) between ContentNode and connected EnqueuedScript Nodes */
  edges: Array<EnqueuedScriptConnectionEdge>;
  /** A list of connected EnqueuedScript Nodes */
  nodes: Array<EnqueuedScript>;
  /** Information about pagination in a connection. */
  pageInfo: EnqueuedScriptConnectionPageInfo;
};

/** Represents a connection to a EnqueuedScript. Contains both the EnqueuedScript Node and metadata about the relationship. */
export type EnqueuedScriptConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected EnqueuedScript Node */
  node: EnqueuedScript;
};

/** Pagination metadata specific to &quot;EnqueuedScriptConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;EnqueuedScriptConnectionEdge&quot; Nodes. */
export type EnqueuedScriptConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Stylesheet enqueued by the CMS */
export type EnqueuedStylesheet = EnqueuedAsset & Node & {
  __typename?: 'EnqueuedStylesheet';
  /** The inline code to be run after the asset is loaded. */
  after?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /**
   * Deprecated
   * @deprecated Use `EnqueuedAsset.media` instead.
   */
  args?: Maybe<Scalars['Boolean']['output']>;
  /** The inline code to be run before the asset is loaded. */
  before?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc */
  conditional?: Maybe<Scalars['String']['output']>;
  /** Dependencies needed to use this asset */
  dependencies?: Maybe<Array<Maybe<EnqueuedStylesheet>>>;
  /**
   * Extra information needed for the script
   * @deprecated Use `EnqueuedScript.extraData` instead.
   */
  extra?: Maybe<Scalars['String']['output']>;
  /** The loading group to which this asset belongs. */
  group?: Maybe<Scalars['Int']['output']>;
  /** The handle of the enqueued asset */
  handle?: Maybe<Scalars['String']['output']>;
  /** The global ID of the enqueued stylesheet */
  id: Scalars['ID']['output'];
  /** Whether the enqueued style is RTL or not */
  isRtl?: Maybe<Scalars['Boolean']['output']>;
  /** The media attribute to use for the link */
  media?: Maybe<Scalars['String']['output']>;
  /** The absolute path to the enqueued style. Set when the stylesheet is meant to load inline. */
  path?: Maybe<Scalars['String']['output']>;
  /** The `rel` attribute to use for the link */
  rel?: Maybe<Scalars['String']['output']>;
  /** The source of the asset */
  src?: Maybe<Scalars['String']['output']>;
  /** Optional suffix, used in combination with RTL */
  suffix?: Maybe<Scalars['String']['output']>;
  /** The title of the enqueued style. Used for preferred/alternate stylesheets. */
  title?: Maybe<Scalars['String']['output']>;
  /** The version of the enqueued style */
  version?: Maybe<Scalars['String']['output']>;
};

/** A paginated collection of EnqueuedStylesheet Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of EnqueuedStylesheet Nodes */
export type EnqueuedStylesheetConnection = {
  /** A list of edges (relational context) between ContentNode and connected EnqueuedStylesheet Nodes */
  edges: Array<EnqueuedStylesheetConnectionEdge>;
  /** A list of connected EnqueuedStylesheet Nodes */
  nodes: Array<EnqueuedStylesheet>;
  /** Information about pagination in a connection. */
  pageInfo: EnqueuedStylesheetConnectionPageInfo;
};

/** Represents a connection to a EnqueuedStylesheet. Contains both the EnqueuedStylesheet Node and metadata about the relationship. */
export type EnqueuedStylesheetConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected EnqueuedStylesheet Node */
  node: EnqueuedStylesheet;
};

/** Pagination metadata specific to &quot;EnqueuedStylesheetConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;EnqueuedStylesheetConnectionEdge&quot; Nodes. */
export type EnqueuedStylesheetConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;FAQFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type FaqFields = AcfFieldGroup & AcfFieldGroupFields & FaqFields_Fields & {
  __typename?: 'FAQFields';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;FAQFields&quot; Field Group */
  questions?: Maybe<FaqFieldsQuestions>;
  /** Enter the title for this FAQ section */
  sectionTitle?: Maybe<Scalars['String']['output']>;
};

/** The &quot;FAQFieldsQuestions&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type FaqFieldsQuestions = AcfFieldGroup & AcfFieldGroupFields & FaqFieldsQuestions_Fields & {
  __typename?: 'FAQFieldsQuestions';
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer4?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer5?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer6?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer7?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer8?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer9?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer10?: Maybe<Scalars['String']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question4?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question5?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question6?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question7?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question8?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question9?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question10?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;FAQFieldsQuestions&quot; Field Group */
export type FaqFieldsQuestions_Fields = {
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer4?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer5?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer6?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer7?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer8?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer9?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  answer10?: Maybe<Scalars['String']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question4?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question5?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question6?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question7?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question8?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question9?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FAQFieldsQuestions&quot; Field Group */
  question10?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;FAQFields&quot; Field Group */
export type FaqFields_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;FAQFields&quot; Field Group */
  questions?: Maybe<FaqFieldsQuestions>;
  /** Enter the title for this FAQ section */
  sectionTitle?: Maybe<Scalars['String']['output']>;
};

/** The faq type */
export type Faq = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfFaqFields & {
  __typename?: 'Faq';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<FaqToFaqConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** Fields of the FAQFields ACF Field Group */
  fAQFields?: Maybe<FaqFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  faqId: Scalars['Int']['output'];
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the faqs object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the faqs object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<FaqToParentConnectionEdge>;
  /** The password for the faqs object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the Faq type and the faq type */
  preview?: Maybe<FaqToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The faq type */
export type FaqAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The faq type */
export type FaqEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The faq type */
export type FaqEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The faq type */
export type FaqTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of faq Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of faq Nodes */
export type FaqConnection = {
  /** A list of edges (relational context) between RootQuery and connected faq Nodes */
  edges: Array<FaqConnectionEdge>;
  /** A list of connected faq Nodes */
  nodes: Array<Faq>;
  /** Information about pagination in a connection. */
  pageInfo: FaqConnectionPageInfo;
};

/** Represents a connection to a faq. Contains both the faq Node and metadata about the relationship. */
export type FaqConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected faq Node */
  node: Faq;
};

/** Pagination metadata specific to &quot;FaqConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;FaqConnectionEdge&quot; Nodes. */
export type FaqConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific Faq. Specifies which unique attribute is used to find an exact Faq. */
export enum FaqIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the Faq type and the faq type */
export type FaqToFaqConnection = Connection & FaqConnection & {
  __typename?: 'FaqToFaqConnection';
  /** Edges for the FaqToFaqConnection connection */
  edges: Array<FaqToFaqConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Faq>;
  /** Information about pagination in a connection. */
  pageInfo: FaqToFaqConnectionPageInfo;
};

/** An edge in a connection */
export type FaqToFaqConnectionEdge = Edge & FaqConnectionEdge & {
  __typename?: 'FaqToFaqConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: Faq;
};

/** Pagination metadata specific to &quot;FaqToFaqConnection&quot; collections. Provides cursors and flags for navigating through sets of FaqToFaqConnection Nodes. */
export type FaqToFaqConnectionPageInfo = FaqConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'FaqToFaqConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the Faq type and the faq type */
export type FaqToParentConnectionEdge = Edge & FaqConnectionEdge & OneToOneConnection & {
  __typename?: 'FaqToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: Faq;
};

/** Connection between the Faq type and the faq type */
export type FaqToPreviewConnectionEdge = Edge & FaqConnectionEdge & OneToOneConnection & {
  __typename?: 'FaqToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Faq;
};

/** The fourPillarsHeroComponent type */
export type FourPillarsHeroComponent = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfFourPillarsHeroComponentFields & {
  __typename?: 'FourPillarsHeroComponent';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<FourPillarsHeroComponentToFourPillarsHeroComponentConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** Fields of the FourPillarsHeroComponentFields ACF Field Group */
  fourPillarsHeroComponentFields?: Maybe<FourPillarsHeroComponentFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  fourPillarsHeroComponentId: Scalars['Int']['output'];
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the four_pillars_hero object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the four_pillars_hero object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<FourPillarsHeroComponentToParentConnectionEdge>;
  /** The password for the four_pillars_hero object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the FourPillarsHeroComponent type and the fourPillarsHeroComponent type */
  preview?: Maybe<FourPillarsHeroComponentToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The fourPillarsHeroComponent type */
export type FourPillarsHeroComponentAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The fourPillarsHeroComponent type */
export type FourPillarsHeroComponentEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The fourPillarsHeroComponent type */
export type FourPillarsHeroComponentEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The fourPillarsHeroComponent type */
export type FourPillarsHeroComponentTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of fourPillarsHeroComponent Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of fourPillarsHeroComponent Nodes */
export type FourPillarsHeroComponentConnection = {
  /** A list of edges (relational context) between RootQuery and connected fourPillarsHeroComponent Nodes */
  edges: Array<FourPillarsHeroComponentConnectionEdge>;
  /** A list of connected fourPillarsHeroComponent Nodes */
  nodes: Array<FourPillarsHeroComponent>;
  /** Information about pagination in a connection. */
  pageInfo: FourPillarsHeroComponentConnectionPageInfo;
};

/** Represents a connection to a fourPillarsHeroComponent. Contains both the fourPillarsHeroComponent Node and metadata about the relationship. */
export type FourPillarsHeroComponentConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected fourPillarsHeroComponent Node */
  node: FourPillarsHeroComponent;
};

/** Pagination metadata specific to &quot;FourPillarsHeroComponentConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;FourPillarsHeroComponentConnectionEdge&quot; Nodes. */
export type FourPillarsHeroComponentConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;FourPillarsHeroComponentFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type FourPillarsHeroComponentFields = AcfFieldGroup & AcfFieldGroupFields & FourPillarsHeroComponentFields_Fields & {
  __typename?: 'FourPillarsHeroComponentFields';
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFields&quot; Field Group */
  communityResiliency?: Maybe<FourPillarsHeroComponentFieldsCommunityResiliency>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFields&quot; Field Group */
  financialSecurity?: Maybe<FourPillarsHeroComponentFieldsFinancialSecurity>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFields&quot; Field Group */
  healthyCommunity?: Maybe<FourPillarsHeroComponentFieldsHealthyCommunity>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFields&quot; Field Group */
  youthOpportunity?: Maybe<FourPillarsHeroComponentFieldsYouthOpportunity>;
};

/** The &quot;FourPillarsHeroComponentFieldsCommunityResiliency&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type FourPillarsHeroComponentFieldsCommunityResiliency = AcfFieldGroup & AcfFieldGroupFields & FourPillarsHeroComponentFieldsCommunityResiliency_Fields & {
  __typename?: 'FourPillarsHeroComponentFieldsCommunityResiliency';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsCommunityResiliency&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsCommunityResiliency&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsCommunityResiliency&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsCommunityResiliency&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;FourPillarsHeroComponentFieldsCommunityResiliency&quot; Field Group */
export type FourPillarsHeroComponentFieldsCommunityResiliency_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsCommunityResiliency&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsCommunityResiliency&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsCommunityResiliency&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsCommunityResiliency&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;FourPillarsHeroComponentFieldsFinancialSecurity&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type FourPillarsHeroComponentFieldsFinancialSecurity = AcfFieldGroup & AcfFieldGroupFields & FourPillarsHeroComponentFieldsFinancialSecurity_Fields & {
  __typename?: 'FourPillarsHeroComponentFieldsFinancialSecurity';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsFinancialSecurity&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsFinancialSecurity&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsFinancialSecurity&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsFinancialSecurity&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;FourPillarsHeroComponentFieldsFinancialSecurity&quot; Field Group */
export type FourPillarsHeroComponentFieldsFinancialSecurity_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsFinancialSecurity&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsFinancialSecurity&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsFinancialSecurity&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsFinancialSecurity&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;FourPillarsHeroComponentFieldsHealthyCommunity&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type FourPillarsHeroComponentFieldsHealthyCommunity = AcfFieldGroup & AcfFieldGroupFields & FourPillarsHeroComponentFieldsHealthyCommunity_Fields & {
  __typename?: 'FourPillarsHeroComponentFieldsHealthyCommunity';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsHealthyCommunity&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsHealthyCommunity&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsHealthyCommunity&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsHealthyCommunity&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;FourPillarsHeroComponentFieldsHealthyCommunity&quot; Field Group */
export type FourPillarsHeroComponentFieldsHealthyCommunity_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsHealthyCommunity&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsHealthyCommunity&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsHealthyCommunity&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsHealthyCommunity&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;FourPillarsHeroComponentFieldsYouthOpportunity&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type FourPillarsHeroComponentFieldsYouthOpportunity = AcfFieldGroup & AcfFieldGroupFields & FourPillarsHeroComponentFieldsYouthOpportunity_Fields & {
  __typename?: 'FourPillarsHeroComponentFieldsYouthOpportunity';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsYouthOpportunity&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsYouthOpportunity&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsYouthOpportunity&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsYouthOpportunity&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;FourPillarsHeroComponentFieldsYouthOpportunity&quot; Field Group */
export type FourPillarsHeroComponentFieldsYouthOpportunity_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsYouthOpportunity&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsYouthOpportunity&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsYouthOpportunity&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFieldsYouthOpportunity&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;FourPillarsHeroComponentFields&quot; Field Group */
export type FourPillarsHeroComponentFields_Fields = {
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFields&quot; Field Group */
  communityResiliency?: Maybe<FourPillarsHeroComponentFieldsCommunityResiliency>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFields&quot; Field Group */
  financialSecurity?: Maybe<FourPillarsHeroComponentFieldsFinancialSecurity>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFields&quot; Field Group */
  healthyCommunity?: Maybe<FourPillarsHeroComponentFieldsHealthyCommunity>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;FourPillarsHeroComponentFields&quot; Field Group */
  youthOpportunity?: Maybe<FourPillarsHeroComponentFieldsYouthOpportunity>;
};

/** Identifier types for retrieving a specific FourPillarsHeroComponent. Specifies which unique attribute is used to find an exact FourPillarsHeroComponent. */
export enum FourPillarsHeroComponentIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the FourPillarsHeroComponent type and the fourPillarsHeroComponent type */
export type FourPillarsHeroComponentToFourPillarsHeroComponentConnection = Connection & FourPillarsHeroComponentConnection & {
  __typename?: 'FourPillarsHeroComponentToFourPillarsHeroComponentConnection';
  /** Edges for the FourPillarsHeroComponentToFourPillarsHeroComponentConnection connection */
  edges: Array<FourPillarsHeroComponentToFourPillarsHeroComponentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<FourPillarsHeroComponent>;
  /** Information about pagination in a connection. */
  pageInfo: FourPillarsHeroComponentToFourPillarsHeroComponentConnectionPageInfo;
};

/** An edge in a connection */
export type FourPillarsHeroComponentToFourPillarsHeroComponentConnectionEdge = Edge & FourPillarsHeroComponentConnectionEdge & {
  __typename?: 'FourPillarsHeroComponentToFourPillarsHeroComponentConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: FourPillarsHeroComponent;
};

/** Pagination metadata specific to &quot;FourPillarsHeroComponentToFourPillarsHeroComponentConnection&quot; collections. Provides cursors and flags for navigating through sets of FourPillarsHeroComponentToFourPillarsHeroComponentConnection Nodes. */
export type FourPillarsHeroComponentToFourPillarsHeroComponentConnectionPageInfo = FourPillarsHeroComponentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'FourPillarsHeroComponentToFourPillarsHeroComponentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the FourPillarsHeroComponent type and the fourPillarsHeroComponent type */
export type FourPillarsHeroComponentToParentConnectionEdge = Edge & FourPillarsHeroComponentConnectionEdge & OneToOneConnection & {
  __typename?: 'FourPillarsHeroComponentToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: FourPillarsHeroComponent;
};

/** Connection between the FourPillarsHeroComponent type and the fourPillarsHeroComponent type */
export type FourPillarsHeroComponentToPreviewConnectionEdge = Edge & FourPillarsHeroComponentConnectionEdge & OneToOneConnection & {
  __typename?: 'FourPillarsHeroComponentToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: FourPillarsHeroComponent;
};

/** The fourPillarsPreview type */
export type FourPillarsPreview = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfFourPillarsPreviewFields & {
  __typename?: 'FourPillarsPreview';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<FourPillarsPreviewToFourPillarsPreviewConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** Fields of the FourPillarsPreviewFields ACF Field Group */
  fourPillarsPreviewFields?: Maybe<FourPillarsPreviewFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  fourPillarsPreviewId: Scalars['Int']['output'];
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the four_pillars_preview object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the four_pillars_preview object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<FourPillarsPreviewToParentConnectionEdge>;
  /** The password for the four_pillars_preview object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the FourPillarsPreview type and the fourPillarsPreview type */
  preview?: Maybe<FourPillarsPreviewToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The fourPillarsPreview type */
export type FourPillarsPreviewAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The fourPillarsPreview type */
export type FourPillarsPreviewEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The fourPillarsPreview type */
export type FourPillarsPreviewEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The fourPillarsPreview type */
export type FourPillarsPreviewTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of fourPillarsPreview Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of fourPillarsPreview Nodes */
export type FourPillarsPreviewConnection = {
  /** A list of edges (relational context) between RootQuery and connected fourPillarsPreview Nodes */
  edges: Array<FourPillarsPreviewConnectionEdge>;
  /** A list of connected fourPillarsPreview Nodes */
  nodes: Array<FourPillarsPreview>;
  /** Information about pagination in a connection. */
  pageInfo: FourPillarsPreviewConnectionPageInfo;
};

/** Represents a connection to a fourPillarsPreview. Contains both the fourPillarsPreview Node and metadata about the relationship. */
export type FourPillarsPreviewConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected fourPillarsPreview Node */
  node: FourPillarsPreview;
};

/** Pagination metadata specific to &quot;FourPillarsPreviewConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;FourPillarsPreviewConnectionEdge&quot; Nodes. */
export type FourPillarsPreviewConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;FourPillarsPreviewFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type FourPillarsPreviewFields = AcfFieldGroup & AcfFieldGroupFields & FourPillarsPreviewFields_Fields & {
  __typename?: 'FourPillarsPreviewFields';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFields&quot; Field Group */
  pillars?: Maybe<FourPillarsPreviewFieldsPillars>;
};

/** The &quot;FourPillarsPreviewFieldsPillars&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type FourPillarsPreviewFieldsPillars = AcfFieldGroup & AcfFieldGroupFields & FourPillarsPreviewFieldsPillars_Fields & {
  __typename?: 'FourPillarsPreviewFieldsPillars';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  communityResiliencyBg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  communityResiliencyImg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  communityResiliencyLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  communityResiliencyText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  communityResiliencyTitle?: Maybe<Scalars['String']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  financialSecurityBg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  financialSecurityImg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  financialSecurityLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  financialSecurityText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  financialSecurityTitle?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  healthyCommunityBg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  healthyCommunityImg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  healthyCommunityLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  healthyCommunityText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  healthyCommunityTitle?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  youthOpportunityBg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  youthOpportunityImg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  youthOpportunityLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  youthOpportunityText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  youthOpportunityTitle?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
export type FourPillarsPreviewFieldsPillars_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  communityResiliencyBg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  communityResiliencyImg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  communityResiliencyLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  communityResiliencyText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  communityResiliencyTitle?: Maybe<Scalars['String']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  financialSecurityBg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  financialSecurityImg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  financialSecurityLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  financialSecurityText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  financialSecurityTitle?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  healthyCommunityBg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  healthyCommunityImg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  healthyCommunityLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  healthyCommunityText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  healthyCommunityTitle?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  youthOpportunityBg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  youthOpportunityImg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  youthOpportunityLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  youthOpportunityText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFieldsPillars&quot; Field Group */
  youthOpportunityTitle?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;FourPillarsPreviewFields&quot; Field Group */
export type FourPillarsPreviewFields_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;FourPillarsPreviewFields&quot; Field Group */
  pillars?: Maybe<FourPillarsPreviewFieldsPillars>;
};

/** Identifier types for retrieving a specific FourPillarsPreview. Specifies which unique attribute is used to find an exact FourPillarsPreview. */
export enum FourPillarsPreviewIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the FourPillarsPreview type and the fourPillarsPreview type */
export type FourPillarsPreviewToFourPillarsPreviewConnection = Connection & FourPillarsPreviewConnection & {
  __typename?: 'FourPillarsPreviewToFourPillarsPreviewConnection';
  /** Edges for the FourPillarsPreviewToFourPillarsPreviewConnection connection */
  edges: Array<FourPillarsPreviewToFourPillarsPreviewConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<FourPillarsPreview>;
  /** Information about pagination in a connection. */
  pageInfo: FourPillarsPreviewToFourPillarsPreviewConnectionPageInfo;
};

/** An edge in a connection */
export type FourPillarsPreviewToFourPillarsPreviewConnectionEdge = Edge & FourPillarsPreviewConnectionEdge & {
  __typename?: 'FourPillarsPreviewToFourPillarsPreviewConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: FourPillarsPreview;
};

/** Pagination metadata specific to &quot;FourPillarsPreviewToFourPillarsPreviewConnection&quot; collections. Provides cursors and flags for navigating through sets of FourPillarsPreviewToFourPillarsPreviewConnection Nodes. */
export type FourPillarsPreviewToFourPillarsPreviewConnectionPageInfo = FourPillarsPreviewConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'FourPillarsPreviewToFourPillarsPreviewConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the FourPillarsPreview type and the fourPillarsPreview type */
export type FourPillarsPreviewToParentConnectionEdge = Edge & FourPillarsPreviewConnectionEdge & OneToOneConnection & {
  __typename?: 'FourPillarsPreviewToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: FourPillarsPreview;
};

/** Connection between the FourPillarsPreview type and the fourPillarsPreview type */
export type FourPillarsPreviewToPreviewConnectionEdge = Edge & FourPillarsPreviewConnectionEdge & OneToOneConnection & {
  __typename?: 'FourPillarsPreviewToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: FourPillarsPreview;
};

/** The general setting type */
export type GeneralSettings = {
  __typename?: 'GeneralSettings';
  /** A date format for all date strings. */
  dateFormat?: Maybe<Scalars['String']['output']>;
  /** Site tagline. */
  description?: Maybe<Scalars['String']['output']>;
  /** This address is used for admin purposes, like new user notification. */
  email?: Maybe<Scalars['String']['output']>;
  /** WordPress locale code. */
  language?: Maybe<Scalars['String']['output']>;
  /** A day number of the week that the week should start on. */
  startOfWeek?: Maybe<Scalars['Int']['output']>;
  /** A time format for all time strings. */
  timeFormat?: Maybe<Scalars['String']['output']>;
  /** A city in the same timezone as you. */
  timezone?: Maybe<Scalars['String']['output']>;
  /** Site title. */
  title?: Maybe<Scalars['String']['output']>;
  /** Site URL. */
  url?: Maybe<Scalars['String']['output']>;
};

/** Input for the generateAuthorizationCode mutation. */
export type GenerateAuthorizationCodeInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Email for WordPress user */
  email?: InputMaybe<Scalars['String']['input']>;
  /** Password for WordPress user */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Username for WordPress user */
  username?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the generateAuthorizationCode mutation. */
export type GenerateAuthorizationCodePayload = {
  __typename?: 'GenerateAuthorizationCodePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Authorization code used for requesting refresh/access tokens */
  code?: Maybe<Scalars['String']['output']>;
  /** Error encountered during user authentication, if any */
  error?: Maybe<Scalars['String']['output']>;
};

/** The getInvolvedHero type */
export type GetInvolvedHero = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfGetInvolvedHeroFields & {
  __typename?: 'GetInvolvedHero';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<GetInvolvedHeroToGetInvolvedHeroConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** Fields of the GetInvolvedHeroFields ACF Field Group */
  getInvolvedHeroFields?: Maybe<GetInvolvedHeroFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  getInvolvedHeroId: Scalars['Int']['output'];
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the get_involved_hero object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the get_involved_hero object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<GetInvolvedHeroToParentConnectionEdge>;
  /** The password for the get_involved_hero object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the GetInvolvedHero type and the getInvolvedHero type */
  preview?: Maybe<GetInvolvedHeroToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The getInvolvedHero type */
export type GetInvolvedHeroAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The getInvolvedHero type */
export type GetInvolvedHeroEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The getInvolvedHero type */
export type GetInvolvedHeroEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The getInvolvedHero type */
export type GetInvolvedHeroTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of getInvolvedHero Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of getInvolvedHero Nodes */
export type GetInvolvedHeroConnection = {
  /** A list of edges (relational context) between RootQuery and connected getInvolvedHero Nodes */
  edges: Array<GetInvolvedHeroConnectionEdge>;
  /** A list of connected getInvolvedHero Nodes */
  nodes: Array<GetInvolvedHero>;
  /** Information about pagination in a connection. */
  pageInfo: GetInvolvedHeroConnectionPageInfo;
};

/** Represents a connection to a getInvolvedHero. Contains both the getInvolvedHero Node and metadata about the relationship. */
export type GetInvolvedHeroConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected getInvolvedHero Node */
  node: GetInvolvedHero;
};

/** Pagination metadata specific to &quot;GetInvolvedHeroConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;GetInvolvedHeroConnectionEdge&quot; Nodes. */
export type GetInvolvedHeroConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;GetInvolvedHeroFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type GetInvolvedHeroFields = AcfFieldGroup & AcfFieldGroupFields & GetInvolvedHeroFields_Fields & {
  __typename?: 'GetInvolvedHeroFields';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;GetInvolvedHeroFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;GetInvolvedHeroFields&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GetInvolvedHeroFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GetInvolvedHeroFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;GetInvolvedHeroFields&quot; Field Group */
export type GetInvolvedHeroFields_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;GetInvolvedHeroFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;GetInvolvedHeroFields&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GetInvolvedHeroFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GetInvolvedHeroFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific GetInvolvedHero. Specifies which unique attribute is used to find an exact GetInvolvedHero. */
export enum GetInvolvedHeroIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the GetInvolvedHero type and the getInvolvedHero type */
export type GetInvolvedHeroToGetInvolvedHeroConnection = Connection & GetInvolvedHeroConnection & {
  __typename?: 'GetInvolvedHeroToGetInvolvedHeroConnection';
  /** Edges for the GetInvolvedHeroToGetInvolvedHeroConnection connection */
  edges: Array<GetInvolvedHeroToGetInvolvedHeroConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<GetInvolvedHero>;
  /** Information about pagination in a connection. */
  pageInfo: GetInvolvedHeroToGetInvolvedHeroConnectionPageInfo;
};

/** An edge in a connection */
export type GetInvolvedHeroToGetInvolvedHeroConnectionEdge = Edge & GetInvolvedHeroConnectionEdge & {
  __typename?: 'GetInvolvedHeroToGetInvolvedHeroConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: GetInvolvedHero;
};

/** Pagination metadata specific to &quot;GetInvolvedHeroToGetInvolvedHeroConnection&quot; collections. Provides cursors and flags for navigating through sets of GetInvolvedHeroToGetInvolvedHeroConnection Nodes. */
export type GetInvolvedHeroToGetInvolvedHeroConnectionPageInfo = GetInvolvedHeroConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'GetInvolvedHeroToGetInvolvedHeroConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the GetInvolvedHero type and the getInvolvedHero type */
export type GetInvolvedHeroToParentConnectionEdge = Edge & GetInvolvedHeroConnectionEdge & OneToOneConnection & {
  __typename?: 'GetInvolvedHeroToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: GetInvolvedHero;
};

/** Connection between the GetInvolvedHero type and the getInvolvedHero type */
export type GetInvolvedHeroToPreviewConnectionEdge = Edge & GetInvolvedHeroConnectionEdge & OneToOneConnection & {
  __typename?: 'GetInvolvedHeroToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: GetInvolvedHero;
};

/** The &quot;GiftAcceptancePolicyPDFFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type GiftAcceptancePolicyPdfFields = AcfFieldGroup & AcfFieldGroupFields & GiftAcceptancePolicyPdfFields_Fields & {
  __typename?: 'GiftAcceptancePolicyPDFFields';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;GiftAcceptancePolicyPDFFields&quot; Field Group */
  pdfFile?: Maybe<AcfMediaItemConnectionEdge>;
};

/** Interface representing fields of the ACF &quot;GiftAcceptancePolicyPDFFields&quot; Field Group */
export type GiftAcceptancePolicyPdfFields_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;GiftAcceptancePolicyPDFFields&quot; Field Group */
  pdfFile?: Maybe<AcfMediaItemConnectionEdge>;
};

/** The giftAcceptancePolicyPdf type */
export type GiftAcceptancePolicyPdf = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfGiftAcceptancePolicyPdfFields & {
  __typename?: 'GiftAcceptancePolicyPdf';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<GiftAcceptancePolicyPdfToGiftAcceptancePolicyPdfConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** Fields of the GiftAcceptancePolicyPDFFields ACF Field Group */
  giftAcceptancePolicyPDFFields?: Maybe<GiftAcceptancePolicyPdfFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  giftAcceptancePolicyPdfId: Scalars['Int']['output'];
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the gift_policy_pdf object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the gift_policy_pdf object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<GiftAcceptancePolicyPdfToParentConnectionEdge>;
  /** The password for the gift_policy_pdf object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the GiftAcceptancePolicyPdf type and the giftAcceptancePolicyPdf type */
  preview?: Maybe<GiftAcceptancePolicyPdfToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The giftAcceptancePolicyPdf type */
export type GiftAcceptancePolicyPdfAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The giftAcceptancePolicyPdf type */
export type GiftAcceptancePolicyPdfEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The giftAcceptancePolicyPdf type */
export type GiftAcceptancePolicyPdfEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The giftAcceptancePolicyPdf type */
export type GiftAcceptancePolicyPdfTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of giftAcceptancePolicyPdf Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of giftAcceptancePolicyPdf Nodes */
export type GiftAcceptancePolicyPdfConnection = {
  /** A list of edges (relational context) between RootQuery and connected giftAcceptancePolicyPdf Nodes */
  edges: Array<GiftAcceptancePolicyPdfConnectionEdge>;
  /** A list of connected giftAcceptancePolicyPdf Nodes */
  nodes: Array<GiftAcceptancePolicyPdf>;
  /** Information about pagination in a connection. */
  pageInfo: GiftAcceptancePolicyPdfConnectionPageInfo;
};

/** Represents a connection to a giftAcceptancePolicyPdf. Contains both the giftAcceptancePolicyPdf Node and metadata about the relationship. */
export type GiftAcceptancePolicyPdfConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected giftAcceptancePolicyPdf Node */
  node: GiftAcceptancePolicyPdf;
};

/** Pagination metadata specific to &quot;GiftAcceptancePolicyPdfConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;GiftAcceptancePolicyPdfConnectionEdge&quot; Nodes. */
export type GiftAcceptancePolicyPdfConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific GiftAcceptancePolicyPdf. Specifies which unique attribute is used to find an exact GiftAcceptancePolicyPdf. */
export enum GiftAcceptancePolicyPdfIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the GiftAcceptancePolicyPdf type and the giftAcceptancePolicyPdf type */
export type GiftAcceptancePolicyPdfToGiftAcceptancePolicyPdfConnection = Connection & GiftAcceptancePolicyPdfConnection & {
  __typename?: 'GiftAcceptancePolicyPdfToGiftAcceptancePolicyPdfConnection';
  /** Edges for the GiftAcceptancePolicyPdfToGiftAcceptancePolicyPdfConnection connection */
  edges: Array<GiftAcceptancePolicyPdfToGiftAcceptancePolicyPdfConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<GiftAcceptancePolicyPdf>;
  /** Information about pagination in a connection. */
  pageInfo: GiftAcceptancePolicyPdfToGiftAcceptancePolicyPdfConnectionPageInfo;
};

/** An edge in a connection */
export type GiftAcceptancePolicyPdfToGiftAcceptancePolicyPdfConnectionEdge = Edge & GiftAcceptancePolicyPdfConnectionEdge & {
  __typename?: 'GiftAcceptancePolicyPdfToGiftAcceptancePolicyPdfConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: GiftAcceptancePolicyPdf;
};

/** Pagination metadata specific to &quot;GiftAcceptancePolicyPdfToGiftAcceptancePolicyPdfConnection&quot; collections. Provides cursors and flags for navigating through sets of GiftAcceptancePolicyPdfToGiftAcceptancePolicyPdfConnection Nodes. */
export type GiftAcceptancePolicyPdfToGiftAcceptancePolicyPdfConnectionPageInfo = GiftAcceptancePolicyPdfConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'GiftAcceptancePolicyPdfToGiftAcceptancePolicyPdfConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the GiftAcceptancePolicyPdf type and the giftAcceptancePolicyPdf type */
export type GiftAcceptancePolicyPdfToParentConnectionEdge = Edge & GiftAcceptancePolicyPdfConnectionEdge & OneToOneConnection & {
  __typename?: 'GiftAcceptancePolicyPdfToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: GiftAcceptancePolicyPdf;
};

/** Connection between the GiftAcceptancePolicyPdf type and the giftAcceptancePolicyPdf type */
export type GiftAcceptancePolicyPdfToPreviewConnectionEdge = Edge & GiftAcceptancePolicyPdfConnectionEdge & OneToOneConnection & {
  __typename?: 'GiftAcceptancePolicyPdfToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: GiftAcceptancePolicyPdf;
};

/** The girlScoutsComponent type */
export type GirlScoutsComponent = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfGirlScoutsComponentFields & {
  __typename?: 'GirlScoutsComponent';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<GirlScoutsComponentToGirlScoutsComponentConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** Fields of the GirlScoutsComponentFields ACF Field Group */
  girlScoutsComponentFields?: Maybe<GirlScoutsComponentFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  girlScoutsComponentId: Scalars['Int']['output'];
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the girl_scouts_comp object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the girl_scouts_comp object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<GirlScoutsComponentToParentConnectionEdge>;
  /** The password for the girl_scouts_comp object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the GirlScoutsComponent type and the girlScoutsComponent type */
  preview?: Maybe<GirlScoutsComponentToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The girlScoutsComponent type */
export type GirlScoutsComponentAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The girlScoutsComponent type */
export type GirlScoutsComponentEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The girlScoutsComponent type */
export type GirlScoutsComponentEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The girlScoutsComponent type */
export type GirlScoutsComponentTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of girlScoutsComponent Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of girlScoutsComponent Nodes */
export type GirlScoutsComponentConnection = {
  /** A list of edges (relational context) between RootQuery and connected girlScoutsComponent Nodes */
  edges: Array<GirlScoutsComponentConnectionEdge>;
  /** A list of connected girlScoutsComponent Nodes */
  nodes: Array<GirlScoutsComponent>;
  /** Information about pagination in a connection. */
  pageInfo: GirlScoutsComponentConnectionPageInfo;
};

/** Represents a connection to a girlScoutsComponent. Contains both the girlScoutsComponent Node and metadata about the relationship. */
export type GirlScoutsComponentConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected girlScoutsComponent Node */
  node: GirlScoutsComponent;
};

/** Pagination metadata specific to &quot;GirlScoutsComponentConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;GirlScoutsComponentConnectionEdge&quot; Nodes. */
export type GirlScoutsComponentConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;GirlScoutsComponentFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type GirlScoutsComponentFields = AcfFieldGroup & AcfFieldGroupFields & GirlScoutsComponentFields_Fields & {
  __typename?: 'GirlScoutsComponentFields';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  image1?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  image2?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  link1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  link2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  linkText1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  linkText2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;GirlScoutsComponentFields&quot; Field Group */
export type GirlScoutsComponentFields_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  image1?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  image2?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  link1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  link2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  linkText1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  linkText2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GirlScoutsComponentFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific GirlScoutsComponent. Specifies which unique attribute is used to find an exact GirlScoutsComponent. */
export enum GirlScoutsComponentIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the GirlScoutsComponent type and the girlScoutsComponent type */
export type GirlScoutsComponentToGirlScoutsComponentConnection = Connection & GirlScoutsComponentConnection & {
  __typename?: 'GirlScoutsComponentToGirlScoutsComponentConnection';
  /** Edges for the GirlScoutsComponentToGirlScoutsComponentConnection connection */
  edges: Array<GirlScoutsComponentToGirlScoutsComponentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<GirlScoutsComponent>;
  /** Information about pagination in a connection. */
  pageInfo: GirlScoutsComponentToGirlScoutsComponentConnectionPageInfo;
};

/** An edge in a connection */
export type GirlScoutsComponentToGirlScoutsComponentConnectionEdge = Edge & GirlScoutsComponentConnectionEdge & {
  __typename?: 'GirlScoutsComponentToGirlScoutsComponentConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: GirlScoutsComponent;
};

/** Pagination metadata specific to &quot;GirlScoutsComponentToGirlScoutsComponentConnection&quot; collections. Provides cursors and flags for navigating through sets of GirlScoutsComponentToGirlScoutsComponentConnection Nodes. */
export type GirlScoutsComponentToGirlScoutsComponentConnectionPageInfo = GirlScoutsComponentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'GirlScoutsComponentToGirlScoutsComponentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the GirlScoutsComponent type and the girlScoutsComponent type */
export type GirlScoutsComponentToParentConnectionEdge = Edge & GirlScoutsComponentConnectionEdge & OneToOneConnection & {
  __typename?: 'GirlScoutsComponentToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: GirlScoutsComponent;
};

/** Connection between the GirlScoutsComponent type and the girlScoutsComponent type */
export type GirlScoutsComponentToPreviewConnectionEdge = Edge & GirlScoutsComponentConnectionEdge & OneToOneConnection & {
  __typename?: 'GirlScoutsComponentToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: GirlScoutsComponent;
};

/** Types of styles to load */
export enum GlobalStylesheetTypesEnum {
  BaseLayoutStyles = 'BASE_LAYOUT_STYLES',
  Presets = 'PRESETS',
  Styles = 'STYLES',
  Variables = 'VARIABLES'
}

/** The &quot;HeroComponentFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type HeroComponentFields = AcfFieldGroup & AcfFieldGroupFields & HeroComponentFields_Fields & {
  __typename?: 'HeroComponentFields';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HeroComponentFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HeroComponentFields&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;HeroComponentFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HeroComponentFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;HeroComponentFields&quot; Field Group */
export type HeroComponentFields_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HeroComponentFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HeroComponentFields&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;HeroComponentFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HeroComponentFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The heroComponentOurImpactPage type */
export type HeroComponentOurImpactPage = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfHeroComponentFields & {
  __typename?: 'HeroComponentOurImpactPage';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<HeroComponentOurImpactPageToHeroComponentOurImpactPageConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the hero_our_impact_page object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** Fields of the HeroComponentFields ACF Field Group */
  heroComponentFields?: Maybe<HeroComponentFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  heroComponentOurImpactPageId: Scalars['Int']['output'];
  /** The globally unique identifier of the hero_our_impact_page object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<HeroComponentOurImpactPageToParentConnectionEdge>;
  /** The password for the hero_our_impact_page object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the HeroComponentOurImpactPage type and the heroComponentOurImpactPage type */
  preview?: Maybe<HeroComponentOurImpactPageToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The heroComponentOurImpactPage type */
export type HeroComponentOurImpactPageAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The heroComponentOurImpactPage type */
export type HeroComponentOurImpactPageEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The heroComponentOurImpactPage type */
export type HeroComponentOurImpactPageEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The heroComponentOurImpactPage type */
export type HeroComponentOurImpactPageTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of heroComponentOurImpactPage Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of heroComponentOurImpactPage Nodes */
export type HeroComponentOurImpactPageConnection = {
  /** A list of edges (relational context) between RootQuery and connected heroComponentOurImpactPage Nodes */
  edges: Array<HeroComponentOurImpactPageConnectionEdge>;
  /** A list of connected heroComponentOurImpactPage Nodes */
  nodes: Array<HeroComponentOurImpactPage>;
  /** Information about pagination in a connection. */
  pageInfo: HeroComponentOurImpactPageConnectionPageInfo;
};

/** Represents a connection to a heroComponentOurImpactPage. Contains both the heroComponentOurImpactPage Node and metadata about the relationship. */
export type HeroComponentOurImpactPageConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected heroComponentOurImpactPage Node */
  node: HeroComponentOurImpactPage;
};

/** Pagination metadata specific to &quot;HeroComponentOurImpactPageConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;HeroComponentOurImpactPageConnectionEdge&quot; Nodes. */
export type HeroComponentOurImpactPageConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific HeroComponentOurImpactPage. Specifies which unique attribute is used to find an exact HeroComponentOurImpactPage. */
export enum HeroComponentOurImpactPageIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the HeroComponentOurImpactPage type and the heroComponentOurImpactPage type */
export type HeroComponentOurImpactPageToHeroComponentOurImpactPageConnection = Connection & HeroComponentOurImpactPageConnection & {
  __typename?: 'HeroComponentOurImpactPageToHeroComponentOurImpactPageConnection';
  /** Edges for the HeroComponentOurImpactPageToHeroComponentOurImpactPageConnection connection */
  edges: Array<HeroComponentOurImpactPageToHeroComponentOurImpactPageConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<HeroComponentOurImpactPage>;
  /** Information about pagination in a connection. */
  pageInfo: HeroComponentOurImpactPageToHeroComponentOurImpactPageConnectionPageInfo;
};

/** An edge in a connection */
export type HeroComponentOurImpactPageToHeroComponentOurImpactPageConnectionEdge = Edge & HeroComponentOurImpactPageConnectionEdge & {
  __typename?: 'HeroComponentOurImpactPageToHeroComponentOurImpactPageConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: HeroComponentOurImpactPage;
};

/** Pagination metadata specific to &quot;HeroComponentOurImpactPageToHeroComponentOurImpactPageConnection&quot; collections. Provides cursors and flags for navigating through sets of HeroComponentOurImpactPageToHeroComponentOurImpactPageConnection Nodes. */
export type HeroComponentOurImpactPageToHeroComponentOurImpactPageConnectionPageInfo = HeroComponentOurImpactPageConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'HeroComponentOurImpactPageToHeroComponentOurImpactPageConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the HeroComponentOurImpactPage type and the heroComponentOurImpactPage type */
export type HeroComponentOurImpactPageToParentConnectionEdge = Edge & HeroComponentOurImpactPageConnectionEdge & OneToOneConnection & {
  __typename?: 'HeroComponentOurImpactPageToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: HeroComponentOurImpactPage;
};

/** Connection between the HeroComponentOurImpactPage type and the heroComponentOurImpactPage type */
export type HeroComponentOurImpactPageToPreviewConnectionEdge = Edge & HeroComponentOurImpactPageConnectionEdge & OneToOneConnection & {
  __typename?: 'HeroComponentOurImpactPageToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: HeroComponentOurImpactPage;
};

/** Content that can be organized in a parent-child structure. Provides fields for navigating up and down the hierarchy and maintaining structured relationships. */
export type HierarchicalContentNode = {
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to a node of content */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** Content that can be organized in a parent-child structure. Provides fields for navigating up and down the hierarchy and maintaining structured relationships. */
export type HierarchicalContentNodeAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** Content that can be organized in a parent-child structure. Provides fields for navigating up and down the hierarchy and maintaining structured relationships. */
export type HierarchicalContentNodeChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};


/** Content that can be organized in a parent-child structure. Provides fields for navigating up and down the hierarchy and maintaining structured relationships. */
export type HierarchicalContentNodeEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Content that can be organized in a parent-child structure. Provides fields for navigating up and down the hierarchy and maintaining structured relationships. */
export type HierarchicalContentNodeEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
export type HierarchicalContentNodeToContentNodeAncestorsConnection = Connection & ContentNodeConnection & {
  __typename?: 'HierarchicalContentNodeToContentNodeAncestorsConnection';
  /** Edges for the HierarchicalContentNodeToContentNodeAncestorsConnection connection */
  edges: Array<HierarchicalContentNodeToContentNodeAncestorsConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo;
};

/** An edge in a connection */
export type HierarchicalContentNodeToContentNodeAncestorsConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'HierarchicalContentNodeToContentNodeAncestorsConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Pagination metadata specific to &quot;HierarchicalContentNodeToContentNodeAncestorsConnection&quot; collections. Provides cursors and flags for navigating through sets of HierarchicalContentNodeToContentNodeAncestorsConnection Nodes. */
export type HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection */
export type HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
export type HierarchicalContentNodeToContentNodeChildrenConnection = Connection & ContentNodeConnection & {
  __typename?: 'HierarchicalContentNodeToContentNodeChildrenConnection';
  /** Edges for the HierarchicalContentNodeToContentNodeChildrenConnection connection */
  edges: Array<HierarchicalContentNodeToContentNodeChildrenConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo;
};

/** An edge in a connection */
export type HierarchicalContentNodeToContentNodeChildrenConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'HierarchicalContentNodeToContentNodeChildrenConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Pagination metadata specific to &quot;HierarchicalContentNodeToContentNodeChildrenConnection&quot; collections. Provides cursors and flags for navigating through sets of HierarchicalContentNodeToContentNodeChildrenConnection Nodes. */
export type HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection */
export type HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
export type HierarchicalContentNodeToParentContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'HierarchicalContentNodeToParentContentNodeConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: ContentNode;
};

/** Content that can exist in a parent-child structure. Provides fields for navigating up (parent) and down (children) through the hierarchy. */
export type HierarchicalNode = {
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
};

/** Term node with hierarchical (parent/child) relationships */
export type HierarchicalTermNode = {
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The description of the object */
  description?: Maybe<Scalars['String']['output']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The link to the term */
  link?: Maybe<Scalars['String']['output']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']['output']>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']['output']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** Term node with hierarchical (parent/child) relationships */
export type HierarchicalTermNodeEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Term node with hierarchical (parent/child) relationships */
export type HierarchicalTermNodeEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The homePageHero type */
export type HomePageHero = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfHomePageHeroFields & {
  __typename?: 'HomePageHero';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<HomePageHeroToHomePageHeroConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the home_page_hero object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** Fields of the HomePageHeroFields ACF Field Group */
  homePageHeroFields?: Maybe<HomePageHeroFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  homePageHeroId: Scalars['Int']['output'];
  /** The globally unique identifier of the home_page_hero object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<HomePageHeroToParentConnectionEdge>;
  /** The password for the home_page_hero object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the HomePageHero type and the homePageHero type */
  preview?: Maybe<HomePageHeroToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The homePageHero type */
export type HomePageHeroAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The homePageHero type */
export type HomePageHeroEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The homePageHero type */
export type HomePageHeroEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The homePageHero type */
export type HomePageHeroTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of homePageHero Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of homePageHero Nodes */
export type HomePageHeroConnection = {
  /** A list of edges (relational context) between RootQuery and connected homePageHero Nodes */
  edges: Array<HomePageHeroConnectionEdge>;
  /** A list of connected homePageHero Nodes */
  nodes: Array<HomePageHero>;
  /** Information about pagination in a connection. */
  pageInfo: HomePageHeroConnectionPageInfo;
};

/** Represents a connection to a homePageHero. Contains both the homePageHero Node and metadata about the relationship. */
export type HomePageHeroConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected homePageHero Node */
  node: HomePageHero;
};

/** Pagination metadata specific to &quot;HomePageHeroConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;HomePageHeroConnectionEdge&quot; Nodes. */
export type HomePageHeroConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;HomePageHeroFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type HomePageHeroFields = AcfFieldGroup & AcfFieldGroupFields & HomePageHeroFields_Fields & {
  __typename?: 'HomePageHeroFields';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HomePageHeroFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HomePageHeroFields&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;HomePageHeroFields&quot; Field Group */
  feature1?: Maybe<HomePageHeroFieldsFeature1>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;HomePageHeroFields&quot; Field Group */
  feature2?: Maybe<HomePageHeroFieldsFeature2>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;HomePageHeroFields&quot; Field Group */
  feature3?: Maybe<HomePageHeroFieldsFeature3>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFields&quot; Field Group */
  heading?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFields&quot; Field Group */
  subheading?: Maybe<Scalars['String']['output']>;
};

/** The &quot;HomePageHeroFieldsFeature1&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type HomePageHeroFieldsFeature1 = AcfFieldGroup & AcfFieldGroupFields & HomePageHeroFieldsFeature1_Fields & {
  __typename?: 'HomePageHeroFieldsFeature1';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  optionalMedia?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  optionalMediaLabel?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  secondLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  secondLinkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;HomePageHeroFieldsFeature1&quot; Field Group */
export type HomePageHeroFieldsFeature1_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  optionalMedia?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  optionalMediaLabel?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  secondLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  secondLinkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature1&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;HomePageHeroFieldsFeature2&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type HomePageHeroFieldsFeature2 = AcfFieldGroup & AcfFieldGroupFields & HomePageHeroFieldsFeature2_Fields & {
  __typename?: 'HomePageHeroFieldsFeature2';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  optionalMedia?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  optionalMediaLabel?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  secondLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  secondLinkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;HomePageHeroFieldsFeature2&quot; Field Group */
export type HomePageHeroFieldsFeature2_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  optionalMedia?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  optionalMediaLabel?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  secondLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  secondLinkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature2&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;HomePageHeroFieldsFeature3&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type HomePageHeroFieldsFeature3 = AcfFieldGroup & AcfFieldGroupFields & HomePageHeroFieldsFeature3_Fields & {
  __typename?: 'HomePageHeroFieldsFeature3';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  optionalMedia?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  optionalMediaLabel?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  secondLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  secondLinkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;HomePageHeroFieldsFeature3&quot; Field Group */
export type HomePageHeroFieldsFeature3_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  optionalMedia?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  optionalMediaLabel?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  secondLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  secondLinkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFieldsFeature3&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;HomePageHeroFields&quot; Field Group */
export type HomePageHeroFields_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HomePageHeroFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HomePageHeroFields&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;HomePageHeroFields&quot; Field Group */
  feature1?: Maybe<HomePageHeroFieldsFeature1>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;HomePageHeroFields&quot; Field Group */
  feature2?: Maybe<HomePageHeroFieldsFeature2>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;HomePageHeroFields&quot; Field Group */
  feature3?: Maybe<HomePageHeroFieldsFeature3>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFields&quot; Field Group */
  heading?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomePageHeroFields&quot; Field Group */
  subheading?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific HomePageHero. Specifies which unique attribute is used to find an exact HomePageHero. */
export enum HomePageHeroIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the HomePageHero type and the homePageHero type */
export type HomePageHeroToHomePageHeroConnection = Connection & HomePageHeroConnection & {
  __typename?: 'HomePageHeroToHomePageHeroConnection';
  /** Edges for the HomePageHeroToHomePageHeroConnection connection */
  edges: Array<HomePageHeroToHomePageHeroConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<HomePageHero>;
  /** Information about pagination in a connection. */
  pageInfo: HomePageHeroToHomePageHeroConnectionPageInfo;
};

/** An edge in a connection */
export type HomePageHeroToHomePageHeroConnectionEdge = Edge & HomePageHeroConnectionEdge & {
  __typename?: 'HomePageHeroToHomePageHeroConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: HomePageHero;
};

/** Pagination metadata specific to &quot;HomePageHeroToHomePageHeroConnection&quot; collections. Provides cursors and flags for navigating through sets of HomePageHeroToHomePageHeroConnection Nodes. */
export type HomePageHeroToHomePageHeroConnectionPageInfo = HomePageHeroConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'HomePageHeroToHomePageHeroConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the HomePageHero type and the homePageHero type */
export type HomePageHeroToParentConnectionEdge = Edge & HomePageHeroConnectionEdge & OneToOneConnection & {
  __typename?: 'HomePageHeroToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: HomePageHero;
};

/** Connection between the HomePageHero type and the homePageHero type */
export type HomePageHeroToPreviewConnectionEdge = Edge & HomePageHeroConnectionEdge & OneToOneConnection & {
  __typename?: 'HomePageHeroToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: HomePageHero;
};

/** The howToContributeComponent type */
export type HowToContributeComponent = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfHowToContributeComponentFields & {
  __typename?: 'HowToContributeComponent';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<HowToContributeComponentToHowToContributeComponentConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the how_to_contribute object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** Fields of the HowToContributeComponentFields ACF Field Group */
  howToContributeComponentFields?: Maybe<HowToContributeComponentFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  howToContributeComponentId: Scalars['Int']['output'];
  /** The globally unique identifier of the how_to_contribute object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<HowToContributeComponentToParentConnectionEdge>;
  /** The password for the how_to_contribute object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the HowToContributeComponent type and the howToContributeComponent type */
  preview?: Maybe<HowToContributeComponentToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The howToContributeComponent type */
export type HowToContributeComponentAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The howToContributeComponent type */
export type HowToContributeComponentEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The howToContributeComponent type */
export type HowToContributeComponentEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The howToContributeComponent type */
export type HowToContributeComponentTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of howToContributeComponent Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of howToContributeComponent Nodes */
export type HowToContributeComponentConnection = {
  /** A list of edges (relational context) between RootQuery and connected howToContributeComponent Nodes */
  edges: Array<HowToContributeComponentConnectionEdge>;
  /** A list of connected howToContributeComponent Nodes */
  nodes: Array<HowToContributeComponent>;
  /** Information about pagination in a connection. */
  pageInfo: HowToContributeComponentConnectionPageInfo;
};

/** Represents a connection to a howToContributeComponent. Contains both the howToContributeComponent Node and metadata about the relationship. */
export type HowToContributeComponentConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected howToContributeComponent Node */
  node: HowToContributeComponent;
};

/** Pagination metadata specific to &quot;HowToContributeComponentConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;HowToContributeComponentConnectionEdge&quot; Nodes. */
export type HowToContributeComponentConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;HowToContributeComponentFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type HowToContributeComponentFields = AcfFieldGroup & AcfFieldGroupFields & HowToContributeComponentFields_Fields & {
  __typename?: 'HowToContributeComponentFields';
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFields&quot; Field Group */
  donate?: Maybe<HowToContributeComponentFieldsDonate>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFields&quot; Field Group */
  individuals?: Maybe<HowToContributeComponentFieldsIndividuals>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFields&quot; Field Group */
  partners?: Maybe<HowToContributeComponentFieldsPartners>;
};

/** The &quot;HowToContributeComponentFieldsDonate&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type HowToContributeComponentFieldsDonate = AcfFieldGroup & AcfFieldGroupFields & HowToContributeComponentFieldsDonate_Fields & {
  __typename?: 'HowToContributeComponentFieldsDonate';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsDonate&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsDonate&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsDonate&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;HowToContributeComponentFieldsDonate&quot; Field Group */
export type HowToContributeComponentFieldsDonate_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsDonate&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsDonate&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsDonate&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;HowToContributeComponentFieldsIndividuals&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type HowToContributeComponentFieldsIndividuals = AcfFieldGroup & AcfFieldGroupFields & HowToContributeComponentFieldsIndividuals_Fields & {
  __typename?: 'HowToContributeComponentFieldsIndividuals';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsIndividuals&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsIndividuals&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsIndividuals&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;HowToContributeComponentFieldsIndividuals&quot; Field Group */
export type HowToContributeComponentFieldsIndividuals_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsIndividuals&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsIndividuals&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsIndividuals&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;HowToContributeComponentFieldsPartners&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type HowToContributeComponentFieldsPartners = AcfFieldGroup & AcfFieldGroupFields & HowToContributeComponentFieldsPartners_Fields & {
  __typename?: 'HowToContributeComponentFieldsPartners';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsPartners&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsPartners&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsPartners&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;HowToContributeComponentFieldsPartners&quot; Field Group */
export type HowToContributeComponentFieldsPartners_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsPartners&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsPartners&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFieldsPartners&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;HowToContributeComponentFields&quot; Field Group */
export type HowToContributeComponentFields_Fields = {
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFields&quot; Field Group */
  donate?: Maybe<HowToContributeComponentFieldsDonate>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFields&quot; Field Group */
  individuals?: Maybe<HowToContributeComponentFieldsIndividuals>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;HowToContributeComponentFields&quot; Field Group */
  partners?: Maybe<HowToContributeComponentFieldsPartners>;
};

/** Identifier types for retrieving a specific HowToContributeComponent. Specifies which unique attribute is used to find an exact HowToContributeComponent. */
export enum HowToContributeComponentIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the HowToContributeComponent type and the howToContributeComponent type */
export type HowToContributeComponentToHowToContributeComponentConnection = Connection & HowToContributeComponentConnection & {
  __typename?: 'HowToContributeComponentToHowToContributeComponentConnection';
  /** Edges for the HowToContributeComponentToHowToContributeComponentConnection connection */
  edges: Array<HowToContributeComponentToHowToContributeComponentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<HowToContributeComponent>;
  /** Information about pagination in a connection. */
  pageInfo: HowToContributeComponentToHowToContributeComponentConnectionPageInfo;
};

/** An edge in a connection */
export type HowToContributeComponentToHowToContributeComponentConnectionEdge = Edge & HowToContributeComponentConnectionEdge & {
  __typename?: 'HowToContributeComponentToHowToContributeComponentConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: HowToContributeComponent;
};

/** Pagination metadata specific to &quot;HowToContributeComponentToHowToContributeComponentConnection&quot; collections. Provides cursors and flags for navigating through sets of HowToContributeComponentToHowToContributeComponentConnection Nodes. */
export type HowToContributeComponentToHowToContributeComponentConnectionPageInfo = HowToContributeComponentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'HowToContributeComponentToHowToContributeComponentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the HowToContributeComponent type and the howToContributeComponent type */
export type HowToContributeComponentToParentConnectionEdge = Edge & HowToContributeComponentConnectionEdge & OneToOneConnection & {
  __typename?: 'HowToContributeComponentToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: HowToContributeComponent;
};

/** Connection between the HowToContributeComponent type and the howToContributeComponent type */
export type HowToContributeComponentToPreviewConnectionEdge = Edge & HowToContributeComponentConnectionEdge & OneToOneConnection & {
  __typename?: 'HowToContributeComponentToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: HowToContributeComponent;
};

/** The impactCarousel type */
export type ImpactCarousel = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfImpactCarouselFields & {
  __typename?: 'ImpactCarousel';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<ImpactCarouselToImpactCarouselConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the impact_carousel object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the impact_carousel object. */
  id: Scalars['ID']['output'];
  /** Fields of the ImpactCarouselFields ACF Field Group */
  impactCarouselFields?: Maybe<ImpactCarouselFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  impactCarouselId: Scalars['Int']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<ImpactCarouselToParentConnectionEdge>;
  /** The password for the impact_carousel object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the ImpactCarousel type and the impactCarousel type */
  preview?: Maybe<ImpactCarouselToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The impactCarousel type */
export type ImpactCarouselAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The impactCarousel type */
export type ImpactCarouselEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The impactCarousel type */
export type ImpactCarouselEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The impactCarousel type */
export type ImpactCarouselTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of impactCarousel Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of impactCarousel Nodes */
export type ImpactCarouselConnection = {
  /** A list of edges (relational context) between RootQuery and connected impactCarousel Nodes */
  edges: Array<ImpactCarouselConnectionEdge>;
  /** A list of connected impactCarousel Nodes */
  nodes: Array<ImpactCarousel>;
  /** Information about pagination in a connection. */
  pageInfo: ImpactCarouselConnectionPageInfo;
};

/** Represents a connection to a impactCarousel. Contains both the impactCarousel Node and metadata about the relationship. */
export type ImpactCarouselConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected impactCarousel Node */
  node: ImpactCarousel;
};

/** Pagination metadata specific to &quot;ImpactCarouselConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;ImpactCarouselConnectionEdge&quot; Nodes. */
export type ImpactCarouselConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;ImpactCarouselFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type ImpactCarouselFields = AcfFieldGroup & AcfFieldGroupFields & ImpactCarouselFields_Fields & {
  __typename?: 'ImpactCarouselFields';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFields&quot; Field Group */
  bgImg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFields&quot; Field Group */
  carouselItems?: Maybe<ImpactCarouselFieldsCarouselItems>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFields&quot; Field Group */
  mobileBg?: Maybe<AcfMediaItemConnectionEdge>;
};

/** The &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type ImpactCarouselFieldsCarouselItems = AcfFieldGroup & AcfFieldGroupFields & ImpactCarouselFieldsCarouselItems_Fields & {
  __typename?: 'ImpactCarouselFieldsCarouselItems';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item1?: Maybe<ImpactCarouselFieldsCarouselItemsItem1>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item2?: Maybe<ImpactCarouselFieldsCarouselItemsItem2>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item3?: Maybe<ImpactCarouselFieldsCarouselItemsItem3>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item4?: Maybe<ImpactCarouselFieldsCarouselItemsItem4>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item5?: Maybe<ImpactCarouselFieldsCarouselItemsItem5>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item6?: Maybe<ImpactCarouselFieldsCarouselItemsItem6>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item7?: Maybe<ImpactCarouselFieldsCarouselItemsItem7>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item8?: Maybe<ImpactCarouselFieldsCarouselItemsItem8>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item9?: Maybe<ImpactCarouselFieldsCarouselItemsItem9>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item10?: Maybe<ImpactCarouselFieldsCarouselItemsItem10>;
};

/** The &quot;ImpactCarouselFieldsCarouselItemsItem1&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type ImpactCarouselFieldsCarouselItemsItem1 = AcfFieldGroup & AcfFieldGroupFields & ImpactCarouselFieldsCarouselItemsItem1_Fields & {
  __typename?: 'ImpactCarouselFieldsCarouselItemsItem1';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem1&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem1&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem1&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem1&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem1&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;ImpactCarouselFieldsCarouselItemsItem1&quot; Field Group */
export type ImpactCarouselFieldsCarouselItemsItem1_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem1&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem1&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem1&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem1&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem1&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;ImpactCarouselFieldsCarouselItemsItem2&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type ImpactCarouselFieldsCarouselItemsItem2 = AcfFieldGroup & AcfFieldGroupFields & ImpactCarouselFieldsCarouselItemsItem2_Fields & {
  __typename?: 'ImpactCarouselFieldsCarouselItemsItem2';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem2&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem2&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem2&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem2&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem2&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;ImpactCarouselFieldsCarouselItemsItem2&quot; Field Group */
export type ImpactCarouselFieldsCarouselItemsItem2_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem2&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem2&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem2&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem2&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem2&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;ImpactCarouselFieldsCarouselItemsItem3&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type ImpactCarouselFieldsCarouselItemsItem3 = AcfFieldGroup & AcfFieldGroupFields & ImpactCarouselFieldsCarouselItemsItem3_Fields & {
  __typename?: 'ImpactCarouselFieldsCarouselItemsItem3';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem3&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem3&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem3&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem3&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem3&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;ImpactCarouselFieldsCarouselItemsItem3&quot; Field Group */
export type ImpactCarouselFieldsCarouselItemsItem3_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem3&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem3&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem3&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem3&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem3&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;ImpactCarouselFieldsCarouselItemsItem4&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type ImpactCarouselFieldsCarouselItemsItem4 = AcfFieldGroup & AcfFieldGroupFields & ImpactCarouselFieldsCarouselItemsItem4_Fields & {
  __typename?: 'ImpactCarouselFieldsCarouselItemsItem4';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem4&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem4&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem4&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem4&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem4&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;ImpactCarouselFieldsCarouselItemsItem4&quot; Field Group */
export type ImpactCarouselFieldsCarouselItemsItem4_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem4&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem4&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem4&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem4&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem4&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;ImpactCarouselFieldsCarouselItemsItem5&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type ImpactCarouselFieldsCarouselItemsItem5 = AcfFieldGroup & AcfFieldGroupFields & ImpactCarouselFieldsCarouselItemsItem5_Fields & {
  __typename?: 'ImpactCarouselFieldsCarouselItemsItem5';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem5&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem5&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem5&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem5&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem5&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;ImpactCarouselFieldsCarouselItemsItem5&quot; Field Group */
export type ImpactCarouselFieldsCarouselItemsItem5_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem5&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem5&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem5&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem5&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem5&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;ImpactCarouselFieldsCarouselItemsItem6&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type ImpactCarouselFieldsCarouselItemsItem6 = AcfFieldGroup & AcfFieldGroupFields & ImpactCarouselFieldsCarouselItemsItem6_Fields & {
  __typename?: 'ImpactCarouselFieldsCarouselItemsItem6';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem6&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem6&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem6&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem6&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem6&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;ImpactCarouselFieldsCarouselItemsItem6&quot; Field Group */
export type ImpactCarouselFieldsCarouselItemsItem6_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem6&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem6&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem6&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem6&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem6&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;ImpactCarouselFieldsCarouselItemsItem7&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type ImpactCarouselFieldsCarouselItemsItem7 = AcfFieldGroup & AcfFieldGroupFields & ImpactCarouselFieldsCarouselItemsItem7_Fields & {
  __typename?: 'ImpactCarouselFieldsCarouselItemsItem7';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem7&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem7&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem7&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem7&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem7&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;ImpactCarouselFieldsCarouselItemsItem7&quot; Field Group */
export type ImpactCarouselFieldsCarouselItemsItem7_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem7&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem7&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem7&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem7&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem7&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;ImpactCarouselFieldsCarouselItemsItem8&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type ImpactCarouselFieldsCarouselItemsItem8 = AcfFieldGroup & AcfFieldGroupFields & ImpactCarouselFieldsCarouselItemsItem8_Fields & {
  __typename?: 'ImpactCarouselFieldsCarouselItemsItem8';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem8&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem8&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem8&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem8&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem8&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;ImpactCarouselFieldsCarouselItemsItem8&quot; Field Group */
export type ImpactCarouselFieldsCarouselItemsItem8_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem8&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem8&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem8&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem8&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem8&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;ImpactCarouselFieldsCarouselItemsItem9&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type ImpactCarouselFieldsCarouselItemsItem9 = AcfFieldGroup & AcfFieldGroupFields & ImpactCarouselFieldsCarouselItemsItem9_Fields & {
  __typename?: 'ImpactCarouselFieldsCarouselItemsItem9';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem9&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem9&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem9&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem9&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem9&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;ImpactCarouselFieldsCarouselItemsItem9&quot; Field Group */
export type ImpactCarouselFieldsCarouselItemsItem9_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem9&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem9&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem9&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem9&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem9&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;ImpactCarouselFieldsCarouselItemsItem10&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type ImpactCarouselFieldsCarouselItemsItem10 = AcfFieldGroup & AcfFieldGroupFields & ImpactCarouselFieldsCarouselItemsItem10_Fields & {
  __typename?: 'ImpactCarouselFieldsCarouselItemsItem10';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem10&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem10&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem10&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem10&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem10&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;ImpactCarouselFieldsCarouselItemsItem10&quot; Field Group */
export type ImpactCarouselFieldsCarouselItemsItem10_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem10&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem10&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem10&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem10&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItemsItem10&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
export type ImpactCarouselFieldsCarouselItems_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item1?: Maybe<ImpactCarouselFieldsCarouselItemsItem1>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item2?: Maybe<ImpactCarouselFieldsCarouselItemsItem2>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item3?: Maybe<ImpactCarouselFieldsCarouselItemsItem3>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item4?: Maybe<ImpactCarouselFieldsCarouselItemsItem4>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item5?: Maybe<ImpactCarouselFieldsCarouselItemsItem5>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item6?: Maybe<ImpactCarouselFieldsCarouselItemsItem6>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item7?: Maybe<ImpactCarouselFieldsCarouselItemsItem7>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item8?: Maybe<ImpactCarouselFieldsCarouselItemsItem8>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item9?: Maybe<ImpactCarouselFieldsCarouselItemsItem9>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFieldsCarouselItems&quot; Field Group */
  item10?: Maybe<ImpactCarouselFieldsCarouselItemsItem10>;
};

/** Interface representing fields of the ACF &quot;ImpactCarouselFields&quot; Field Group */
export type ImpactCarouselFields_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFields&quot; Field Group */
  bgImg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFields&quot; Field Group */
  carouselItems?: Maybe<ImpactCarouselFieldsCarouselItems>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ImpactCarouselFields&quot; Field Group */
  mobileBg?: Maybe<AcfMediaItemConnectionEdge>;
};

/** Identifier types for retrieving a specific ImpactCarousel. Specifies which unique attribute is used to find an exact ImpactCarousel. */
export enum ImpactCarouselIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the ImpactCarousel type and the impactCarousel type */
export type ImpactCarouselToImpactCarouselConnection = Connection & ImpactCarouselConnection & {
  __typename?: 'ImpactCarouselToImpactCarouselConnection';
  /** Edges for the ImpactCarouselToImpactCarouselConnection connection */
  edges: Array<ImpactCarouselToImpactCarouselConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ImpactCarousel>;
  /** Information about pagination in a connection. */
  pageInfo: ImpactCarouselToImpactCarouselConnectionPageInfo;
};

/** An edge in a connection */
export type ImpactCarouselToImpactCarouselConnectionEdge = Edge & ImpactCarouselConnectionEdge & {
  __typename?: 'ImpactCarouselToImpactCarouselConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: ImpactCarousel;
};

/** Pagination metadata specific to &quot;ImpactCarouselToImpactCarouselConnection&quot; collections. Provides cursors and flags for navigating through sets of ImpactCarouselToImpactCarouselConnection Nodes. */
export type ImpactCarouselToImpactCarouselConnectionPageInfo = ImpactCarouselConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'ImpactCarouselToImpactCarouselConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the ImpactCarousel type and the impactCarousel type */
export type ImpactCarouselToParentConnectionEdge = Edge & ImpactCarouselConnectionEdge & OneToOneConnection & {
  __typename?: 'ImpactCarouselToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: ImpactCarousel;
};

/** Connection between the ImpactCarousel type and the impactCarousel type */
export type ImpactCarouselToPreviewConnectionEdge = Edge & ImpactCarouselConnectionEdge & OneToOneConnection & {
  __typename?: 'ImpactCarouselToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: ImpactCarousel;
};

/** The impactStatistic type */
export type ImpactStatistic = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfOurImpactStatisticFields & {
  __typename?: 'ImpactStatistic';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<ImpactStatisticToImpactStatisticConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the impact_statistics object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the impact_statistics object. */
  id: Scalars['ID']['output'];
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  impactStatisticId: Scalars['Int']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** Fields of the OurImpactStatisticFields ACF Field Group */
  ourImpactStatisticFields?: Maybe<OurImpactStatisticFields>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<ImpactStatisticToParentConnectionEdge>;
  /** The password for the impact_statistics object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the ImpactStatistic type and the impactStatistic type */
  preview?: Maybe<ImpactStatisticToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The impactStatistic type */
export type ImpactStatisticAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The impactStatistic type */
export type ImpactStatisticEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The impactStatistic type */
export type ImpactStatisticEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The impactStatistic type */
export type ImpactStatisticTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of impactStatistic Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of impactStatistic Nodes */
export type ImpactStatisticConnection = {
  /** A list of edges (relational context) between RootQuery and connected impactStatistic Nodes */
  edges: Array<ImpactStatisticConnectionEdge>;
  /** A list of connected impactStatistic Nodes */
  nodes: Array<ImpactStatistic>;
  /** Information about pagination in a connection. */
  pageInfo: ImpactStatisticConnectionPageInfo;
};

/** Represents a connection to a impactStatistic. Contains both the impactStatistic Node and metadata about the relationship. */
export type ImpactStatisticConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected impactStatistic Node */
  node: ImpactStatistic;
};

/** Pagination metadata specific to &quot;ImpactStatisticConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;ImpactStatisticConnectionEdge&quot; Nodes. */
export type ImpactStatisticConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific ImpactStatistic. Specifies which unique attribute is used to find an exact ImpactStatistic. */
export enum ImpactStatisticIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the ImpactStatistic type and the impactStatistic type */
export type ImpactStatisticToImpactStatisticConnection = Connection & ImpactStatisticConnection & {
  __typename?: 'ImpactStatisticToImpactStatisticConnection';
  /** Edges for the ImpactStatisticToImpactStatisticConnection connection */
  edges: Array<ImpactStatisticToImpactStatisticConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ImpactStatistic>;
  /** Information about pagination in a connection. */
  pageInfo: ImpactStatisticToImpactStatisticConnectionPageInfo;
};

/** An edge in a connection */
export type ImpactStatisticToImpactStatisticConnectionEdge = Edge & ImpactStatisticConnectionEdge & {
  __typename?: 'ImpactStatisticToImpactStatisticConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: ImpactStatistic;
};

/** Pagination metadata specific to &quot;ImpactStatisticToImpactStatisticConnection&quot; collections. Provides cursors and flags for navigating through sets of ImpactStatisticToImpactStatisticConnection Nodes. */
export type ImpactStatisticToImpactStatisticConnectionPageInfo = ImpactStatisticConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'ImpactStatisticToImpactStatisticConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the ImpactStatistic type and the impactStatistic type */
export type ImpactStatisticToParentConnectionEdge = Edge & ImpactStatisticConnectionEdge & OneToOneConnection & {
  __typename?: 'ImpactStatisticToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: ImpactStatistic;
};

/** Connection between the ImpactStatistic type and the impactStatistic type */
export type ImpactStatisticToPreviewConnectionEdge = Edge & ImpactStatisticConnectionEdge & OneToOneConnection & {
  __typename?: 'ImpactStatisticToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: ImpactStatistic;
};

/** The individualsPageHero type */
export type IndividualsPageHero = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfIndividualsPageHeroFields & {
  __typename?: 'IndividualsPageHero';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<IndividualsPageHeroToIndividualsPageHeroConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the indivdls_page_hero object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the indivdls_page_hero object. */
  id: Scalars['ID']['output'];
  /** Fields of the IndividualsPageHeroFields ACF Field Group */
  individualsPageHeroFields?: Maybe<IndividualsPageHeroFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  individualsPageHeroId: Scalars['Int']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<IndividualsPageHeroToParentConnectionEdge>;
  /** The password for the indivdls_page_hero object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the IndividualsPageHero type and the individualsPageHero type */
  preview?: Maybe<IndividualsPageHeroToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The individualsPageHero type */
export type IndividualsPageHeroAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The individualsPageHero type */
export type IndividualsPageHeroEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The individualsPageHero type */
export type IndividualsPageHeroEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The individualsPageHero type */
export type IndividualsPageHeroTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of individualsPageHero Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of individualsPageHero Nodes */
export type IndividualsPageHeroConnection = {
  /** A list of edges (relational context) between RootQuery and connected individualsPageHero Nodes */
  edges: Array<IndividualsPageHeroConnectionEdge>;
  /** A list of connected individualsPageHero Nodes */
  nodes: Array<IndividualsPageHero>;
  /** Information about pagination in a connection. */
  pageInfo: IndividualsPageHeroConnectionPageInfo;
};

/** Represents a connection to a individualsPageHero. Contains both the individualsPageHero Node and metadata about the relationship. */
export type IndividualsPageHeroConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected individualsPageHero Node */
  node: IndividualsPageHero;
};

/** Pagination metadata specific to &quot;IndividualsPageHeroConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;IndividualsPageHeroConnectionEdge&quot; Nodes. */
export type IndividualsPageHeroConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;IndividualsPageHeroFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type IndividualsPageHeroFields = AcfFieldGroup & AcfFieldGroupFields & IndividualsPageHeroFields_Fields & {
  __typename?: 'IndividualsPageHeroFields';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualsPageHeroFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualsPageHeroFields&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;IndividualsPageHeroFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualsPageHeroFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;IndividualsPageHeroFields&quot; Field Group */
export type IndividualsPageHeroFields_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualsPageHeroFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;IndividualsPageHeroFields&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;IndividualsPageHeroFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;IndividualsPageHeroFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific IndividualsPageHero. Specifies which unique attribute is used to find an exact IndividualsPageHero. */
export enum IndividualsPageHeroIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the IndividualsPageHero type and the individualsPageHero type */
export type IndividualsPageHeroToIndividualsPageHeroConnection = Connection & IndividualsPageHeroConnection & {
  __typename?: 'IndividualsPageHeroToIndividualsPageHeroConnection';
  /** Edges for the IndividualsPageHeroToIndividualsPageHeroConnection connection */
  edges: Array<IndividualsPageHeroToIndividualsPageHeroConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<IndividualsPageHero>;
  /** Information about pagination in a connection. */
  pageInfo: IndividualsPageHeroToIndividualsPageHeroConnectionPageInfo;
};

/** An edge in a connection */
export type IndividualsPageHeroToIndividualsPageHeroConnectionEdge = Edge & IndividualsPageHeroConnectionEdge & {
  __typename?: 'IndividualsPageHeroToIndividualsPageHeroConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: IndividualsPageHero;
};

/** Pagination metadata specific to &quot;IndividualsPageHeroToIndividualsPageHeroConnection&quot; collections. Provides cursors and flags for navigating through sets of IndividualsPageHeroToIndividualsPageHeroConnection Nodes. */
export type IndividualsPageHeroToIndividualsPageHeroConnectionPageInfo = IndividualsPageHeroConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'IndividualsPageHeroToIndividualsPageHeroConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the IndividualsPageHero type and the individualsPageHero type */
export type IndividualsPageHeroToParentConnectionEdge = Edge & IndividualsPageHeroConnectionEdge & OneToOneConnection & {
  __typename?: 'IndividualsPageHeroToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: IndividualsPageHero;
};

/** Connection between the IndividualsPageHero type and the individualsPageHero type */
export type IndividualsPageHeroToPreviewConnectionEdge = Edge & IndividualsPageHeroConnectionEdge & OneToOneConnection & {
  __typename?: 'IndividualsPageHeroToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: IndividualsPageHero;
};

/** Input for the login mutation. */
export type LoginInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The plain-text password for the user logging in. */
  password: Scalars['String']['input'];
  /** The username used for login. Typically a unique or email address depending on specific configuration */
  username: Scalars['String']['input'];
};

/** The payload for the login mutation. */
export type LoginPayload = {
  __typename?: 'LoginPayload';
  /** JWT Token that can be used in future requests for Authentication */
  authToken?: Maybe<Scalars['String']['output']>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** A JWT token that can be used in future requests to get a refreshed jwtAuthToken. If the refresh token used in a request is revoked or otherwise invalid, a valid Auth token will NOT be issued in the response headers. */
  refreshToken?: Maybe<Scalars['String']['output']>;
  /** The user that was logged in */
  user?: Maybe<User>;
};

/** File details for a Media Item */
export type MediaDetails = {
  __typename?: 'MediaDetails';
  /** The filename of the mediaItem */
  file?: Maybe<Scalars['String']['output']>;
  /** The path to the mediaItem relative to the uploads directory */
  filePath?: Maybe<Scalars['String']['output']>;
  /** The height of the mediaItem */
  height?: Maybe<Scalars['Int']['output']>;
  /** Meta information associated with the mediaItem */
  meta?: Maybe<MediaItemMeta>;
  /** The available sizes of the mediaItem */
  sizes?: Maybe<Array<Maybe<MediaSize>>>;
  /** The width of the mediaItem */
  width?: Maybe<Scalars['Int']['output']>;
};


/** File details for a Media Item */
export type MediaDetailsSizesArgs = {
  exclude?: InputMaybe<Array<InputMaybe<MediaItemSizeEnum>>>;
  include?: InputMaybe<Array<InputMaybe<MediaItemSizeEnum>>>;
};

/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItem = ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & Node & NodeWithAuthor & NodeWithComments & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable & {
  __typename?: 'MediaItem';
  /** Alternative text to display when resource is not displayed */
  altText?: Maybe<Scalars['String']['output']>;
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  /** The caption for the resource */
  caption?: Maybe<Scalars['String']['output']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']['output']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']['output']>;
  /** Connection between the MediaItem type and the Comment type */
  comments?: Maybe<MediaItemToCommentConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** Description of the image (stored as post_content) */
  description?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The filename of the mediaItem for the specified size (default size is full) */
  file?: Maybe<Scalars['String']['output']>;
  /** The path to the original file relative to the uploads directory */
  filePath?: Maybe<Scalars['String']['output']>;
  /** The filesize in bytes of the resource */
  fileSize?: Maybe<Scalars['Int']['output']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the attachment object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the attachment object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** Details about the mediaItem */
  mediaDetails?: Maybe<MediaDetails>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  mediaItemId: Scalars['Int']['output'];
  /** Url of the mediaItem */
  mediaItemUrl?: Maybe<Scalars['String']['output']>;
  /** Type of resource */
  mediaType?: Maybe<Scalars['String']['output']>;
  /** The mime type of the mediaItem */
  mimeType?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** The password for the attachment object. */
  password?: Maybe<Scalars['String']['output']>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The sizes attribute value for an image. */
  sizes?: Maybe<Scalars['String']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** Url of the mediaItem */
  sourceUrl?: Maybe<Scalars['String']['output']>;
  /** The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths. */
  srcSet?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to a node of content */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItemAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItemCaptionArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItemChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};


/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItemCommentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<MediaItemToCommentConnectionWhereArgs>;
};


/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItemDescriptionArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItemEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItemEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItemFileArgs = {
  size?: InputMaybe<MediaItemSizeEnum>;
};


/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItemFilePathArgs = {
  size?: InputMaybe<MediaItemSizeEnum>;
};


/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItemFileSizeArgs = {
  size?: InputMaybe<MediaItemSizeEnum>;
};


/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItemSizesArgs = {
  size?: InputMaybe<MediaItemSizeEnum>;
};


/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItemSourceUrlArgs = {
  size?: InputMaybe<MediaItemSizeEnum>;
};


/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItemSrcSetArgs = {
  size?: InputMaybe<MediaItemSizeEnum>;
};


/** Represents uploaded media, including images, videos, documents, and audio files. */
export type MediaItemTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of mediaItem Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of mediaItem Nodes */
export type MediaItemConnection = {
  /** A list of edges (relational context) between RootQuery and connected mediaItem Nodes */
  edges: Array<MediaItemConnectionEdge>;
  /** A list of connected mediaItem Nodes */
  nodes: Array<MediaItem>;
  /** Information about pagination in a connection. */
  pageInfo: MediaItemConnectionPageInfo;
};

/** Represents a connection to a mediaItem. Contains both the mediaItem Node and metadata about the relationship. */
export type MediaItemConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected mediaItem Node */
  node: MediaItem;
};

/** Pagination metadata specific to &quot;MediaItemConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;MediaItemConnectionEdge&quot; Nodes. */
export type MediaItemConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific MediaItem. Specifies which unique attribute is used to find an exact MediaItem. */
export enum MediaItemIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a media item by its source url */
  SourceUrl = 'SOURCE_URL',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Meta connected to a MediaItem */
export type MediaItemMeta = {
  __typename?: 'MediaItemMeta';
  /** Aperture measurement of the media item. */
  aperture?: Maybe<Scalars['Float']['output']>;
  /** Information about the camera used to create the media item. */
  camera?: Maybe<Scalars['String']['output']>;
  /** The text string description associated with the media item. */
  caption?: Maybe<Scalars['String']['output']>;
  /** Copyright information associated with the media item. */
  copyright?: Maybe<Scalars['String']['output']>;
  /** The date/time when the media was created. */
  createdTimestamp?: Maybe<Scalars['Int']['output']>;
  /** The original creator of the media item. */
  credit?: Maybe<Scalars['String']['output']>;
  /** The focal length value of the media item. */
  focalLength?: Maybe<Scalars['Float']['output']>;
  /** The ISO (International Organization for Standardization) value of the media item. */
  iso?: Maybe<Scalars['Int']['output']>;
  /** List of keywords used to describe or identfy the media item. */
  keywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The vertical or horizontal aspect of the media item. */
  orientation?: Maybe<Scalars['String']['output']>;
  /** The shutter speed information of the media item. */
  shutterSpeed?: Maybe<Scalars['Float']['output']>;
  /** A useful title for the media item. */
  title?: Maybe<Scalars['String']['output']>;
};

/** Predefined image size variations. Represents the standard image dimensions available for media assets. */
export enum MediaItemSizeEnum {
  /** Large image preview suitable for detail views. (1024x1024) */
  Large = 'LARGE',
  /** Medium image preview typically suitable for listings and detail views. (300x300) */
  Medium = 'MEDIUM',
  /** Medium-to-large image preview suitable for listings and detail views. (768x0) */
  MediumLarge = 'MEDIUM_LARGE',
  /** Small image preview suitable for thumbnails and listings. (150x150) */
  Thumbnail = 'THUMBNAIL',
  /** Custom Image Size. (1536x1536) */
  '1536X1536' = '_1536X1536',
  /** Custom Image Size. (2048x2048) */
  '2048X2048' = '_2048X2048'
}

/** Publication status for media items. Controls whether media is publicly accessible, private, or in another state. */
export enum MediaItemStatusEnum {
  /** Automatically created media that has not been finalized */
  AutoDraft = 'AUTO_DRAFT',
  /** Media that inherits its publication status from the parent content */
  Inherit = 'INHERIT',
  /** Media visible only to users with appropriate permissions */
  Private = 'PRIVATE',
  /** Media marked for deletion but still recoverable */
  Trash = 'TRASH'
}

/** Connection between the MediaItem type and the Comment type */
export type MediaItemToCommentConnection = CommentConnection & Connection & {
  __typename?: 'MediaItemToCommentConnection';
  /** Edges for the MediaItemToCommentConnection connection */
  edges: Array<MediaItemToCommentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: MediaItemToCommentConnectionPageInfo;
};

/** An edge in a connection */
export type MediaItemToCommentConnectionEdge = CommentConnectionEdge & Edge & {
  __typename?: 'MediaItemToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Comment;
};

/** Pagination metadata specific to &quot;MediaItemToCommentConnection&quot; collections. Provides cursors and flags for navigating through sets of MediaItemToCommentConnection Nodes. */
export type MediaItemToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'MediaItemToCommentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the MediaItemToCommentConnection connection */
export type MediaItemToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** One or more Comment Statuses to limit results by */
  statusIn?: InputMaybe<Array<InputMaybe<CommentStatusEnum>>>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** Details of an available size for a media item */
export type MediaSize = {
  __typename?: 'MediaSize';
  /** The filename of the referenced size */
  file?: Maybe<Scalars['String']['output']>;
  /** The path of the file for the referenced size (default size is full) */
  filePath?: Maybe<Scalars['String']['output']>;
  /** The filesize of the resource */
  fileSize?: Maybe<Scalars['Int']['output']>;
  /** The height of the referenced size */
  height?: Maybe<Scalars['String']['output']>;
  /** The mime type of the referenced size */
  mimeType?: Maybe<Scalars['String']['output']>;
  /** The referenced size name */
  name?: Maybe<Scalars['String']['output']>;
  /** The url of the referenced size */
  sourceUrl?: Maybe<Scalars['String']['output']>;
  /** The width of the referenced size */
  width?: Maybe<Scalars['String']['output']>;
};

/** Collections of navigation links. Menus can be assigned to designated locations and used to build site navigation structures. */
export type Menu = DatabaseIdentifier & Node & {
  __typename?: 'Menu';
  /** The number of items in the menu */
  count?: Maybe<Scalars['Int']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The globally unique identifier of the nav menu object. */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** The locations a menu is assigned to */
  locations?: Maybe<Array<Maybe<MenuLocationEnum>>>;
  /**
   * WP ID of the nav menu.
   * @deprecated Deprecated in favor of the databaseId field
   */
  menuId?: Maybe<Scalars['Int']['output']>;
  /** Connection between the Menu type and the MenuItem type */
  menuItems?: Maybe<MenuToMenuItemConnection>;
  /** Display name of the menu. Equivalent to WP_Term-&gt;name. */
  name?: Maybe<Scalars['String']['output']>;
  /** The url friendly name of the menu. Equivalent to WP_Term-&gt;slug */
  slug?: Maybe<Scalars['String']['output']>;
};


/** Collections of navigation links. Menus can be assigned to designated locations and used to build site navigation structures. */
export type MenuMenuItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<MenuToMenuItemConnectionWhereArgs>;
};

/** A paginated collection of Menu Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of Menu Nodes */
export type MenuConnection = {
  /** A list of edges (relational context) between RootQuery and connected Menu Nodes */
  edges: Array<MenuConnectionEdge>;
  /** A list of connected Menu Nodes */
  nodes: Array<Menu>;
  /** Information about pagination in a connection. */
  pageInfo: MenuConnectionPageInfo;
};

/** Represents a connection to a Menu. Contains both the Menu Node and metadata about the relationship. */
export type MenuConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected Menu Node */
  node: Menu;
};

/** Pagination metadata specific to &quot;MenuConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;MenuConnectionEdge&quot; Nodes. */
export type MenuConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu. */
export type MenuItem = DatabaseIdentifier & Node & {
  __typename?: 'MenuItem';
  /** Connection between the MenuItem type and the MenuItem type */
  childItems?: Maybe<MenuItemToMenuItemConnection>;
  /** Connection from MenuItem to it&#039;s connected node */
  connectedNode?: Maybe<MenuItemToMenuItemLinkableConnectionEdge>;
  /**
   * The object connected to this menu item.
   * @deprecated Deprecated in favor of the connectedNode field
   */
  connectedObject?: Maybe<MenuItemObjectUnion>;
  /** Class attribute for the menu item link */
  cssClasses?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Description of the menu item. */
  description?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the nav menu item object. */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Label or title of the menu item. */
  label?: Maybe<Scalars['String']['output']>;
  /** Link relationship (XFN) of the menu item. */
  linkRelationship?: Maybe<Scalars['String']['output']>;
  /** The locations the menu item&#039;s Menu is assigned to */
  locations?: Maybe<Array<Maybe<MenuLocationEnum>>>;
  /** The Menu a MenuItem is part of */
  menu?: Maybe<MenuItemToMenuConnectionEdge>;
  /**
   * WP ID of the menu item.
   * @deprecated Deprecated in favor of the databaseId field
   */
  menuItemId?: Maybe<Scalars['Int']['output']>;
  /** Menu item order */
  order?: Maybe<Scalars['Int']['output']>;
  /** The database id of the parent menu item or null if it is the root */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent nav menu item object. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** Path for the resource. Relative path for internal resources. Absolute path for external resources. */
  path?: Maybe<Scalars['String']['output']>;
  /** Target attribute for the menu item link. */
  target?: Maybe<Scalars['String']['output']>;
  /** Title attribute for the menu item link */
  title?: Maybe<Scalars['String']['output']>;
  /** The uri of the resource the menu item links to */
  uri?: Maybe<Scalars['String']['output']>;
  /** URL or destination of the menu item. */
  url?: Maybe<Scalars['String']['output']>;
};


/** Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu. */
export type MenuItemChildItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<MenuItemToMenuItemConnectionWhereArgs>;
};

/** A paginated collection of MenuItem Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of MenuItem Nodes */
export type MenuItemConnection = {
  /** A list of edges (relational context) between RootQuery and connected MenuItem Nodes */
  edges: Array<MenuItemConnectionEdge>;
  /** A list of connected MenuItem Nodes */
  nodes: Array<MenuItem>;
  /** Information about pagination in a connection. */
  pageInfo: MenuItemConnectionPageInfo;
};

/** Represents a connection to a MenuItem. Contains both the MenuItem Node and metadata about the relationship. */
export type MenuItemConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected MenuItem Node */
  node: MenuItem;
};

/** Pagination metadata specific to &quot;MenuItemConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;MenuItemConnectionEdge&quot; Nodes. */
export type MenuItemConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Content that can be referenced by navigation menu items. Provides the essential fields needed to create links within navigation structures. */
export type MenuItemLinkable = {
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};

/** Represents a connection to a MenuItemLinkable. Contains both the MenuItemLinkable Node and metadata about the relationship. */
export type MenuItemLinkableConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected MenuItemLinkable Node */
  node: MenuItemLinkable;
};

/** Identifier types for retrieving a specific menu item. Determines whether to look up menu items by global ID or database ID. */
export enum MenuItemNodeIdTypeEnum {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID'
}

/** Deprecated in favor of MenuItemLinkeable Interface */
export type MenuItemObjectUnion = AdminCostPdf | AliceHubProgram | AliceReportPage | AliceReportPdf | AliceStats | CampaignToolkitAsset | Category | Current990FormPdf | DonorPrivacyPolicyPdf | Faq | FourPillarsHeroComponent | FourPillarsPreview | GetInvolvedHero | GiftAcceptancePolicyPdf | GirlScoutsComponent | HeroComponentOurImpactPage | HomePageHero | HowToContributeComponent | ImpactCarousel | ImpactStatistic | IndividualsPageHero | MobileFoodPantryComponent | NorthwoodsAirLifeline | OurImpactHomePage | Page | PartnerPageHero | PartnersTickerItem | Post | PostFormat | Tag | UwContactInfo | ValuesHistory | VitaTaxPrep | YmcaComponent;

/** Connection between the MenuItem type and the Menu type */
export type MenuItemToMenuConnectionEdge = Edge & MenuConnectionEdge & OneToOneConnection & {
  __typename?: 'MenuItemToMenuConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Menu;
};

/** Connection between the MenuItem type and the MenuItem type */
export type MenuItemToMenuItemConnection = Connection & MenuItemConnection & {
  __typename?: 'MenuItemToMenuItemConnection';
  /** Edges for the MenuItemToMenuItemConnection connection */
  edges: Array<MenuItemToMenuItemConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<MenuItem>;
  /** Information about pagination in a connection. */
  pageInfo: MenuItemToMenuItemConnectionPageInfo;
};

/** An edge in a connection */
export type MenuItemToMenuItemConnectionEdge = Edge & MenuItemConnectionEdge & {
  __typename?: 'MenuItemToMenuItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: MenuItem;
};

/** Pagination metadata specific to &quot;MenuItemToMenuItemConnection&quot; collections. Provides cursors and flags for navigating through sets of MenuItemToMenuItemConnection Nodes. */
export type MenuItemToMenuItemConnectionPageInfo = MenuItemConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'MenuItemToMenuItemConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the MenuItemToMenuItemConnection connection */
export type MenuItemToMenuItemConnectionWhereArgs = {
  /** The database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<MenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the MenuItem type and the MenuItemLinkable type */
export type MenuItemToMenuItemLinkableConnectionEdge = Edge & MenuItemLinkableConnectionEdge & OneToOneConnection & {
  __typename?: 'MenuItemToMenuItemLinkableConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: MenuItemLinkable;
};

/** Designated areas where navigation menus can be displayed. Represents the named regions in the interface where menus can be assigned. */
export enum MenuLocationEnum {
  /** Put the menu in the footer location */
  Footer = 'FOOTER',
  /** Put the menu in the primary location */
  Primary = 'PRIMARY'
}

/** Identifier types for retrieving a specific navigation menu. Specifies which property (ID, name, location) is used to locate a particular menu. */
export enum MenuNodeIdTypeEnum {
  /** Identify a menu node by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a menu node by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a menu node by the slug of menu location to which it is assigned */
  Location = 'LOCATION',
  /** Identify a menu node by its name */
  Name = 'NAME',
  /** Identify a menu node by its slug */
  Slug = 'SLUG'
}

/** Connection between the Menu type and the MenuItem type */
export type MenuToMenuItemConnection = Connection & MenuItemConnection & {
  __typename?: 'MenuToMenuItemConnection';
  /** Edges for the MenuToMenuItemConnection connection */
  edges: Array<MenuToMenuItemConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<MenuItem>;
  /** Information about pagination in a connection. */
  pageInfo: MenuToMenuItemConnectionPageInfo;
};

/** An edge in a connection */
export type MenuToMenuItemConnectionEdge = Edge & MenuItemConnectionEdge & {
  __typename?: 'MenuToMenuItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: MenuItem;
};

/** Pagination metadata specific to &quot;MenuToMenuItemConnection&quot; collections. Provides cursors and flags for navigating through sets of MenuToMenuItemConnection Nodes. */
export type MenuToMenuItemConnectionPageInfo = MenuItemConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'MenuToMenuItemConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the MenuToMenuItemConnection connection */
export type MenuToMenuItemConnectionWhereArgs = {
  /** The database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<MenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
};

/** Media file type classification based on MIME standards. Used to identify and filter media items by their format and content type. */
export enum MimeTypeEnum {
  /** application/java mime type. */
  ApplicationJava = 'APPLICATION_JAVA',
  /** application/msword mime type. */
  ApplicationMsword = 'APPLICATION_MSWORD',
  /** application/octet-stream mime type. */
  ApplicationOctetStream = 'APPLICATION_OCTET_STREAM',
  /** application/onenote mime type. */
  ApplicationOnenote = 'APPLICATION_ONENOTE',
  /** application/oxps mime type. */
  ApplicationOxps = 'APPLICATION_OXPS',
  /** application/pdf mime type. */
  ApplicationPdf = 'APPLICATION_PDF',
  /** application/rar mime type. */
  ApplicationRar = 'APPLICATION_RAR',
  /** application/rtf mime type. */
  ApplicationRtf = 'APPLICATION_RTF',
  /** application/ttaf+xml mime type. */
  ApplicationTtafXml = 'APPLICATION_TTAF_XML',
  /** application/vnd.apple.keynote mime type. */
  ApplicationVndAppleKeynote = 'APPLICATION_VND_APPLE_KEYNOTE',
  /** application/vnd.apple.numbers mime type. */
  ApplicationVndAppleNumbers = 'APPLICATION_VND_APPLE_NUMBERS',
  /** application/vnd.apple.pages mime type. */
  ApplicationVndApplePages = 'APPLICATION_VND_APPLE_PAGES',
  /** application/vnd.ms-access mime type. */
  ApplicationVndMsAccess = 'APPLICATION_VND_MS_ACCESS',
  /** application/vnd.ms-excel mime type. */
  ApplicationVndMsExcel = 'APPLICATION_VND_MS_EXCEL',
  /** application/vnd.ms-excel.addin.macroEnabled.12 mime type. */
  ApplicationVndMsExcelAddinMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12',
  /** application/vnd.ms-excel.sheet.binary.macroEnabled.12 mime type. */
  ApplicationVndMsExcelSheetBinaryMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12',
  /** application/vnd.ms-excel.sheet.macroEnabled.12 mime type. */
  ApplicationVndMsExcelSheetMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12',
  /** application/vnd.ms-excel.template.macroEnabled.12 mime type. */
  ApplicationVndMsExcelTemplateMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12',
  /** application/vnd.ms-powerpoint mime type. */
  ApplicationVndMsPowerpoint = 'APPLICATION_VND_MS_POWERPOINT',
  /** application/vnd.ms-powerpoint.addin.macroEnabled.12 mime type. */
  ApplicationVndMsPowerpointAddinMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12',
  /** application/vnd.ms-powerpoint.presentation.macroEnabled.12 mime type. */
  ApplicationVndMsPowerpointPresentationMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12',
  /** application/vnd.ms-powerpoint.slideshow.macroEnabled.12 mime type. */
  ApplicationVndMsPowerpointSlideshowMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12',
  /** application/vnd.ms-powerpoint.slide.macroEnabled.12 mime type. */
  ApplicationVndMsPowerpointSlideMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12',
  /** application/vnd.ms-powerpoint.template.macroEnabled.12 mime type. */
  ApplicationVndMsPowerpointTemplateMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12',
  /** application/vnd.ms-project mime type. */
  ApplicationVndMsProject = 'APPLICATION_VND_MS_PROJECT',
  /** application/vnd.ms-word.document.macroEnabled.12 mime type. */
  ApplicationVndMsWordDocumentMacroenabled_12 = 'APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12',
  /** application/vnd.ms-word.template.macroEnabled.12 mime type. */
  ApplicationVndMsWordTemplateMacroenabled_12 = 'APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12',
  /** application/vnd.ms-write mime type. */
  ApplicationVndMsWrite = 'APPLICATION_VND_MS_WRITE',
  /** application/vnd.ms-xpsdocument mime type. */
  ApplicationVndMsXpsdocument = 'APPLICATION_VND_MS_XPSDOCUMENT',
  /** application/vnd.oasis.opendocument.chart mime type. */
  ApplicationVndOasisOpendocumentChart = 'APPLICATION_VND_OASIS_OPENDOCUMENT_CHART',
  /** application/vnd.oasis.opendocument.database mime type. */
  ApplicationVndOasisOpendocumentDatabase = 'APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE',
  /** application/vnd.oasis.opendocument.formula mime type. */
  ApplicationVndOasisOpendocumentFormula = 'APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA',
  /** application/vnd.oasis.opendocument.graphics mime type. */
  ApplicationVndOasisOpendocumentGraphics = 'APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS',
  /** application/vnd.oasis.opendocument.presentation mime type. */
  ApplicationVndOasisOpendocumentPresentation = 'APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION',
  /** application/vnd.oasis.opendocument.spreadsheet mime type. */
  ApplicationVndOasisOpendocumentSpreadsheet = 'APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET',
  /** application/vnd.oasis.opendocument.text mime type. */
  ApplicationVndOasisOpendocumentText = 'APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT',
  /** application/vnd.openxmlformats-officedocument.presentationml.presentation mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION',
  /** application/vnd.openxmlformats-officedocument.presentationml.slide mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlide = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE',
  /** application/vnd.openxmlformats-officedocument.presentationml.slideshow mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlideshow = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW',
  /** application/vnd.openxmlformats-officedocument.presentationml.template mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE',
  /** application/vnd.openxmlformats-officedocument.spreadsheetml.sheet mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET',
  /** application/vnd.openxmlformats-officedocument.spreadsheetml.template mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE',
  /** application/vnd.openxmlformats-officedocument.wordprocessingml.document mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT',
  /** application/vnd.openxmlformats-officedocument.wordprocessingml.template mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE',
  /** application/wordperfect mime type. */
  ApplicationWordperfect = 'APPLICATION_WORDPERFECT',
  /** application/x-7z-compressed mime type. */
  ApplicationX_7ZCompressed = 'APPLICATION_X_7Z_COMPRESSED',
  /** application/x-gzip mime type. */
  ApplicationXGzip = 'APPLICATION_X_GZIP',
  /** application/x-tar mime type. */
  ApplicationXTar = 'APPLICATION_X_TAR',
  /** application/zip mime type. */
  ApplicationZip = 'APPLICATION_ZIP',
  /** audio/aac mime type. */
  AudioAac = 'AUDIO_AAC',
  /** audio/flac mime type. */
  AudioFlac = 'AUDIO_FLAC',
  /** audio/midi mime type. */
  AudioMidi = 'AUDIO_MIDI',
  /** audio/mpeg mime type. */
  AudioMpeg = 'AUDIO_MPEG',
  /** audio/ogg mime type. */
  AudioOgg = 'AUDIO_OGG',
  /** audio/wav mime type. */
  AudioWav = 'AUDIO_WAV',
  /** audio/x-matroska mime type. */
  AudioXMatroska = 'AUDIO_X_MATROSKA',
  /** audio/x-ms-wax mime type. */
  AudioXMsWax = 'AUDIO_X_MS_WAX',
  /** audio/x-ms-wma mime type. */
  AudioXMsWma = 'AUDIO_X_MS_WMA',
  /** audio/x-realaudio mime type. */
  AudioXRealaudio = 'AUDIO_X_REALAUDIO',
  /** image/avif mime type. */
  ImageAvif = 'IMAGE_AVIF',
  /** image/bmp mime type. */
  ImageBmp = 'IMAGE_BMP',
  /** image/gif mime type. */
  ImageGif = 'IMAGE_GIF',
  /** image/heic mime type. */
  ImageHeic = 'IMAGE_HEIC',
  /** image/heic-sequence mime type. */
  ImageHeicSequence = 'IMAGE_HEIC_SEQUENCE',
  /** image/heif mime type. */
  ImageHeif = 'IMAGE_HEIF',
  /** image/heif-sequence mime type. */
  ImageHeifSequence = 'IMAGE_HEIF_SEQUENCE',
  /** image/jpeg mime type. */
  ImageJpeg = 'IMAGE_JPEG',
  /** image/png mime type. */
  ImagePng = 'IMAGE_PNG',
  /** image/tiff mime type. */
  ImageTiff = 'IMAGE_TIFF',
  /** image/webp mime type. */
  ImageWebp = 'IMAGE_WEBP',
  /** image/x-icon mime type. */
  ImageXIcon = 'IMAGE_X_ICON',
  /** text/calendar mime type. */
  TextCalendar = 'TEXT_CALENDAR',
  /** text/css mime type. */
  TextCss = 'TEXT_CSS',
  /** text/csv mime type. */
  TextCsv = 'TEXT_CSV',
  /** text/plain mime type. */
  TextPlain = 'TEXT_PLAIN',
  /** text/richtext mime type. */
  TextRichtext = 'TEXT_RICHTEXT',
  /** text/tab-separated-values mime type. */
  TextTabSeparatedValues = 'TEXT_TAB_SEPARATED_VALUES',
  /** text/vtt mime type. */
  TextVtt = 'TEXT_VTT',
  /** video/3gpp mime type. */
  Video_3Gpp = 'VIDEO_3GPP',
  /** video/3gpp2 mime type. */
  Video_3Gpp2 = 'VIDEO_3GPP2',
  /** video/avi mime type. */
  VideoAvi = 'VIDEO_AVI',
  /** video/divx mime type. */
  VideoDivx = 'VIDEO_DIVX',
  /** video/mp4 mime type. */
  VideoMp4 = 'VIDEO_MP4',
  /** video/mpeg mime type. */
  VideoMpeg = 'VIDEO_MPEG',
  /** video/ogg mime type. */
  VideoOgg = 'VIDEO_OGG',
  /** video/quicktime mime type. */
  VideoQuicktime = 'VIDEO_QUICKTIME',
  /** video/webm mime type. */
  VideoWebm = 'VIDEO_WEBM',
  /** video/x-flv mime type. */
  VideoXFlv = 'VIDEO_X_FLV',
  /** video/x-matroska mime type. */
  VideoXMatroska = 'VIDEO_X_MATROSKA',
  /** video/x-ms-asf mime type. */
  VideoXMsAsf = 'VIDEO_X_MS_ASF',
  /** video/x-ms-wm mime type. */
  VideoXMsWm = 'VIDEO_X_MS_WM',
  /** video/x-ms-wmv mime type. */
  VideoXMsWmv = 'VIDEO_X_MS_WMV',
  /** video/x-ms-wmx mime type. */
  VideoXMsWmx = 'VIDEO_X_MS_WMX'
}

/** The mobileFoodPantryComponent type */
export type MobileFoodPantryComponent = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfMobileFoodPantryComponentFields & {
  __typename?: 'MobileFoodPantryComponent';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<MobileFoodPantryComponentToMobileFoodPantryComponentConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the mobile_food_pantry object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the mobile_food_pantry object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** Fields of the MobileFoodPantryComponentFields ACF Field Group */
  mobileFoodPantryComponentFields?: Maybe<MobileFoodPantryComponentFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  mobileFoodPantryComponentId: Scalars['Int']['output'];
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<MobileFoodPantryComponentToParentConnectionEdge>;
  /** The password for the mobile_food_pantry object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the MobileFoodPantryComponent type and the mobileFoodPantryComponent type */
  preview?: Maybe<MobileFoodPantryComponentToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The mobileFoodPantryComponent type */
export type MobileFoodPantryComponentAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The mobileFoodPantryComponent type */
export type MobileFoodPantryComponentEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The mobileFoodPantryComponent type */
export type MobileFoodPantryComponentEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The mobileFoodPantryComponent type */
export type MobileFoodPantryComponentTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of mobileFoodPantryComponent Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of mobileFoodPantryComponent Nodes */
export type MobileFoodPantryComponentConnection = {
  /** A list of edges (relational context) between RootQuery and connected mobileFoodPantryComponent Nodes */
  edges: Array<MobileFoodPantryComponentConnectionEdge>;
  /** A list of connected mobileFoodPantryComponent Nodes */
  nodes: Array<MobileFoodPantryComponent>;
  /** Information about pagination in a connection. */
  pageInfo: MobileFoodPantryComponentConnectionPageInfo;
};

/** Represents a connection to a mobileFoodPantryComponent. Contains both the mobileFoodPantryComponent Node and metadata about the relationship. */
export type MobileFoodPantryComponentConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected mobileFoodPantryComponent Node */
  node: MobileFoodPantryComponent;
};

/** Pagination metadata specific to &quot;MobileFoodPantryComponentConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;MobileFoodPantryComponentConnectionEdge&quot; Nodes. */
export type MobileFoodPantryComponentConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;MobileFoodPantryComponentFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type MobileFoodPantryComponentFields = AcfFieldGroup & AcfFieldGroupFields & MobileFoodPantryComponentFields_Fields & {
  __typename?: 'MobileFoodPantryComponentFields';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;MobileFoodPantryComponentFields&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;MobileFoodPantryComponentFields&quot; Field Group */
  buttonText?: Maybe<Scalars['String']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;MobileFoodPantryComponentFields&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;MobileFoodPantryComponentFields&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;MobileFoodPantryComponentFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;MobileFoodPantryComponentFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;MobileFoodPantryComponentFields&quot; Field Group */
export type MobileFoodPantryComponentFields_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;MobileFoodPantryComponentFields&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;MobileFoodPantryComponentFields&quot; Field Group */
  buttonText?: Maybe<Scalars['String']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;MobileFoodPantryComponentFields&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;MobileFoodPantryComponentFields&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;MobileFoodPantryComponentFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;MobileFoodPantryComponentFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific MobileFoodPantryComponent. Specifies which unique attribute is used to find an exact MobileFoodPantryComponent. */
export enum MobileFoodPantryComponentIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the MobileFoodPantryComponent type and the mobileFoodPantryComponent type */
export type MobileFoodPantryComponentToMobileFoodPantryComponentConnection = Connection & MobileFoodPantryComponentConnection & {
  __typename?: 'MobileFoodPantryComponentToMobileFoodPantryComponentConnection';
  /** Edges for the MobileFoodPantryComponentToMobileFoodPantryComponentConnection connection */
  edges: Array<MobileFoodPantryComponentToMobileFoodPantryComponentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<MobileFoodPantryComponent>;
  /** Information about pagination in a connection. */
  pageInfo: MobileFoodPantryComponentToMobileFoodPantryComponentConnectionPageInfo;
};

/** An edge in a connection */
export type MobileFoodPantryComponentToMobileFoodPantryComponentConnectionEdge = Edge & MobileFoodPantryComponentConnectionEdge & {
  __typename?: 'MobileFoodPantryComponentToMobileFoodPantryComponentConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: MobileFoodPantryComponent;
};

/** Pagination metadata specific to &quot;MobileFoodPantryComponentToMobileFoodPantryComponentConnection&quot; collections. Provides cursors and flags for navigating through sets of MobileFoodPantryComponentToMobileFoodPantryComponentConnection Nodes. */
export type MobileFoodPantryComponentToMobileFoodPantryComponentConnectionPageInfo = MobileFoodPantryComponentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'MobileFoodPantryComponentToMobileFoodPantryComponentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the MobileFoodPantryComponent type and the mobileFoodPantryComponent type */
export type MobileFoodPantryComponentToParentConnectionEdge = Edge & MobileFoodPantryComponentConnectionEdge & OneToOneConnection & {
  __typename?: 'MobileFoodPantryComponentToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: MobileFoodPantryComponent;
};

/** Connection between the MobileFoodPantryComponent type and the mobileFoodPantryComponent type */
export type MobileFoodPantryComponentToPreviewConnectionEdge = Edge & MobileFoodPantryComponentConnectionEdge & OneToOneConnection & {
  __typename?: 'MobileFoodPantryComponentToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: MobileFoodPantryComponent;
};

/** An object with a globally unique identifier. All objects that can be identified by a unique ID implement this interface. */
export type Node = {
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
};

/** Content that can be attributed to a specific user. Provides fields for accessing the author&#039;s information and establishing content ownership. */
export type NodeWithAuthor = {
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
};

/** Connection between the NodeWithAuthor type and the User type */
export type NodeWithAuthorToUserConnectionEdge = Edge & OneToOneConnection & UserConnectionEdge & {
  __typename?: 'NodeWithAuthorToUserConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: User;
};

/** Content that can receive and display user-submitted comments. Provides fields for accessing comment counts and managing comment status. */
export type NodeWithComments = {
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']['output']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']['output']>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
};

/** Content that has a main body field which can contain formatted text and media. Provides access to both raw (with appropriate permissions) and rendered versions of the content. */
export type NodeWithContentEditor = {
  /** The content of the post. */
  content?: Maybe<Scalars['String']['output']>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
};


/** Content that has a main body field which can contain formatted text and media. Provides access to both raw (with appropriate permissions) and rendered versions of the content. */
export type NodeWithContentEditorContentArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A node which provides an excerpt field, which is a condensed summary of the main content. Excerpts can be manually created or automatically generated and are often used in content listings and search results. */
export type NodeWithExcerpt = {
  /** The excerpt of the post. */
  excerpt?: Maybe<Scalars['String']['output']>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
};


/** A node which provides an excerpt field, which is a condensed summary of the main content. Excerpts can be manually created or automatically generated and are often used in content listings and search results. */
export type NodeWithExcerptExcerptArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Content that can have a primary image attached. This image is typically used for thumbnails, social sharing, and prominent display in the presentation layer. */
export type NodeWithFeaturedImage = {
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  featuredImageDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Globally unique ID of the featured image assigned to the node */
  featuredImageId?: Maybe<Scalars['ID']['output']>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
};

/** Connection between the NodeWithFeaturedImage type and the MediaItem type */
export type NodeWithFeaturedImageToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {
  __typename?: 'NodeWithFeaturedImageToMediaItemConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: MediaItem;
};

/** Content that supports ordering metadata. Includes a menu order field which can be used for custom sorting in navigation menus and other ordered collections. */
export type NodeWithPageAttributes = {
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: Maybe<Scalars['Int']['output']>;
};

/** Content that maintains a history of changes. Provides access to previous versions of the content and the ability to restore earlier revisions. */
export type NodeWithRevisions = {
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** True if the node is a revision of another node */
  isRevision?: Maybe<Scalars['Boolean']['output']>;
  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */
  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
};

/** Connection between the NodeWithRevisions type and the ContentNode type */
export type NodeWithRevisionsToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'NodeWithRevisionsToContentNodeConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: ContentNode;
};

/** Content that provides template metadata. The template can help inform how the content is might be structured, styled, and presented to the user. */
export type NodeWithTemplate = {
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
};

/** Content with a dedicated title field. The title typically serves as the main heading and identifier for the content. */
export type NodeWithTitle = {
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
};


/** Content with a dedicated title field. The title typically serves as the main heading and identifier for the content. */
export type NodeWithTitleTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Content that supports cross-site notifications when linked to by other sites. Includes fields for pingback status and linked URLs. */
export type NodeWithTrackbacks = {
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Whether the pings are open or closed for this particular post. */
  pingStatus?: Maybe<Scalars['String']['output']>;
  /** URLs that have been pinged. */
  pinged?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** URLs queued to be pinged. */
  toPing?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

/** The northwoodsAirLifeline type */
export type NorthwoodsAirLifeline = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfNorthwoodsAirLifelineFields & {
  __typename?: 'NorthwoodsAirLifeline';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<NorthwoodsAirLifelineToNorthwoodsAirLifelineConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the nrtwds_air_lflne object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the nrtwds_air_lflne object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** Fields of the NorthwoodsAirLifelineFields ACF Field Group */
  northwoodsAirLifelineFields?: Maybe<NorthwoodsAirLifelineFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  northwoodsAirLifelineId: Scalars['Int']['output'];
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<NorthwoodsAirLifelineToParentConnectionEdge>;
  /** The password for the nrtwds_air_lflne object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the NorthwoodsAirLifeline type and the northwoodsAirLifeline type */
  preview?: Maybe<NorthwoodsAirLifelineToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The northwoodsAirLifeline type */
export type NorthwoodsAirLifelineAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The northwoodsAirLifeline type */
export type NorthwoodsAirLifelineEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The northwoodsAirLifeline type */
export type NorthwoodsAirLifelineEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The northwoodsAirLifeline type */
export type NorthwoodsAirLifelineTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of northwoodsAirLifeline Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of northwoodsAirLifeline Nodes */
export type NorthwoodsAirLifelineConnection = {
  /** A list of edges (relational context) between RootQuery and connected northwoodsAirLifeline Nodes */
  edges: Array<NorthwoodsAirLifelineConnectionEdge>;
  /** A list of connected northwoodsAirLifeline Nodes */
  nodes: Array<NorthwoodsAirLifeline>;
  /** Information about pagination in a connection. */
  pageInfo: NorthwoodsAirLifelineConnectionPageInfo;
};

/** Represents a connection to a northwoodsAirLifeline. Contains both the northwoodsAirLifeline Node and metadata about the relationship. */
export type NorthwoodsAirLifelineConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected northwoodsAirLifeline Node */
  node: NorthwoodsAirLifeline;
};

/** Pagination metadata specific to &quot;NorthwoodsAirLifelineConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;NorthwoodsAirLifelineConnectionEdge&quot; Nodes. */
export type NorthwoodsAirLifelineConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;NorthwoodsAirLifelineFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type NorthwoodsAirLifelineFields = AcfFieldGroup & AcfFieldGroupFields & NorthwoodsAirLifelineFields_Fields & {
  __typename?: 'NorthwoodsAirLifelineFields';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;NorthwoodsAirLifelineFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;NorthwoodsAirLifelineFields&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;NorthwoodsAirLifelineFields&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;NorthwoodsAirLifelineFields&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;NorthwoodsAirLifelineFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;NorthwoodsAirLifelineFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;NorthwoodsAirLifelineFields&quot; Field Group */
export type NorthwoodsAirLifelineFields_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;NorthwoodsAirLifelineFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;NorthwoodsAirLifelineFields&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;NorthwoodsAirLifelineFields&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;NorthwoodsAirLifelineFields&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;NorthwoodsAirLifelineFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;NorthwoodsAirLifelineFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific NorthwoodsAirLifeline. Specifies which unique attribute is used to find an exact NorthwoodsAirLifeline. */
export enum NorthwoodsAirLifelineIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the NorthwoodsAirLifeline type and the northwoodsAirLifeline type */
export type NorthwoodsAirLifelineToNorthwoodsAirLifelineConnection = Connection & NorthwoodsAirLifelineConnection & {
  __typename?: 'NorthwoodsAirLifelineToNorthwoodsAirLifelineConnection';
  /** Edges for the NorthwoodsAirLifelineToNorthwoodsAirLifelineConnection connection */
  edges: Array<NorthwoodsAirLifelineToNorthwoodsAirLifelineConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<NorthwoodsAirLifeline>;
  /** Information about pagination in a connection. */
  pageInfo: NorthwoodsAirLifelineToNorthwoodsAirLifelineConnectionPageInfo;
};

/** An edge in a connection */
export type NorthwoodsAirLifelineToNorthwoodsAirLifelineConnectionEdge = Edge & NorthwoodsAirLifelineConnectionEdge & {
  __typename?: 'NorthwoodsAirLifelineToNorthwoodsAirLifelineConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: NorthwoodsAirLifeline;
};

/** Pagination metadata specific to &quot;NorthwoodsAirLifelineToNorthwoodsAirLifelineConnection&quot; collections. Provides cursors and flags for navigating through sets of NorthwoodsAirLifelineToNorthwoodsAirLifelineConnection Nodes. */
export type NorthwoodsAirLifelineToNorthwoodsAirLifelineConnectionPageInfo = NorthwoodsAirLifelineConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'NorthwoodsAirLifelineToNorthwoodsAirLifelineConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the NorthwoodsAirLifeline type and the northwoodsAirLifeline type */
export type NorthwoodsAirLifelineToParentConnectionEdge = Edge & NorthwoodsAirLifelineConnectionEdge & OneToOneConnection & {
  __typename?: 'NorthwoodsAirLifelineToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: NorthwoodsAirLifeline;
};

/** Connection between the NorthwoodsAirLifeline type and the northwoodsAirLifeline type */
export type NorthwoodsAirLifelineToPreviewConnectionEdge = Edge & NorthwoodsAirLifelineConnectionEdge & OneToOneConnection & {
  __typename?: 'NorthwoodsAirLifelineToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: NorthwoodsAirLifeline;
};

/** A direct one-to-one relationship between objects. Unlike plural connections, this represents a single related object rather than a collection. */
export type OneToOneConnection = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected node */
  node: Node;
};

/** Sort direction for ordered results. Determines whether items are returned in ascending or descending order. */
export enum OrderEnum {
  /** Results ordered from lowest to highest values (i.e. A-Z, oldest-newest) */
  Asc = 'ASC',
  /** Results ordered from highest to lowest values (i.e. Z-A, newest-oldest) */
  Desc = 'DESC'
}

/** The &quot;OurImpactFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurImpactFields = AcfFieldGroup & AcfFieldGroupFields & OurImpactFields_Fields & {
  __typename?: 'OurImpactFields';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurImpactFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurImpactFields&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactFields&quot; Field Group */
  buttonText?: Maybe<Scalars['String']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;OurImpactFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurImpactFields&quot; Field Group */
export type OurImpactFields_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurImpactFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurImpactFields&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactFields&quot; Field Group */
  buttonText?: Maybe<Scalars['String']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;OurImpactFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;OurImpactHero&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurImpactHero = AcfFieldGroup & AcfFieldGroupFields & OurImpactHero_Fields & {
  __typename?: 'OurImpactHero';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurImpactHero&quot; Field Group */
  backgroundImage?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactHero&quot; Field Group */
  body?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactHero&quot; Field Group */
  buttonText?: Maybe<Scalars['String']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactHero&quot; Field Group */
  ourImpactHeroHeading?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurImpactHero&quot; Field Group */
export type OurImpactHero_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurImpactHero&quot; Field Group */
  backgroundImage?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactHero&quot; Field Group */
  body?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactHero&quot; Field Group */
  buttonText?: Maybe<Scalars['String']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactHero&quot; Field Group */
  ourImpactHeroHeading?: Maybe<Scalars['String']['output']>;
};

/** The ourImpactHomePage type */
export type OurImpactHomePage = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfOurImpactFields & {
  __typename?: 'OurImpactHomePage';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<OurImpactHomePageToOurImpactHomePageConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the our_impact_home_page object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the our_impact_home_page object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** Fields of the OurImpactFields ACF Field Group */
  ourImpactFields?: Maybe<OurImpactFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  ourImpactHomePageId: Scalars['Int']['output'];
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<OurImpactHomePageToParentConnectionEdge>;
  /** The password for the our_impact_home_page object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the OurImpactHomePage type and the ourImpactHomePage type */
  preview?: Maybe<OurImpactHomePageToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The ourImpactHomePage type */
export type OurImpactHomePageAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The ourImpactHomePage type */
export type OurImpactHomePageEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The ourImpactHomePage type */
export type OurImpactHomePageEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The ourImpactHomePage type */
export type OurImpactHomePageTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of ourImpactHomePage Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of ourImpactHomePage Nodes */
export type OurImpactHomePageConnection = {
  /** A list of edges (relational context) between RootQuery and connected ourImpactHomePage Nodes */
  edges: Array<OurImpactHomePageConnectionEdge>;
  /** A list of connected ourImpactHomePage Nodes */
  nodes: Array<OurImpactHomePage>;
  /** Information about pagination in a connection. */
  pageInfo: OurImpactHomePageConnectionPageInfo;
};

/** Represents a connection to a ourImpactHomePage. Contains both the ourImpactHomePage Node and metadata about the relationship. */
export type OurImpactHomePageConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected ourImpactHomePage Node */
  node: OurImpactHomePage;
};

/** Pagination metadata specific to &quot;OurImpactHomePageConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;OurImpactHomePageConnectionEdge&quot; Nodes. */
export type OurImpactHomePageConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific OurImpactHomePage. Specifies which unique attribute is used to find an exact OurImpactHomePage. */
export enum OurImpactHomePageIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the OurImpactHomePage type and the ourImpactHomePage type */
export type OurImpactHomePageToOurImpactHomePageConnection = Connection & OurImpactHomePageConnection & {
  __typename?: 'OurImpactHomePageToOurImpactHomePageConnection';
  /** Edges for the OurImpactHomePageToOurImpactHomePageConnection connection */
  edges: Array<OurImpactHomePageToOurImpactHomePageConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<OurImpactHomePage>;
  /** Information about pagination in a connection. */
  pageInfo: OurImpactHomePageToOurImpactHomePageConnectionPageInfo;
};

/** An edge in a connection */
export type OurImpactHomePageToOurImpactHomePageConnectionEdge = Edge & OurImpactHomePageConnectionEdge & {
  __typename?: 'OurImpactHomePageToOurImpactHomePageConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: OurImpactHomePage;
};

/** Pagination metadata specific to &quot;OurImpactHomePageToOurImpactHomePageConnection&quot; collections. Provides cursors and flags for navigating through sets of OurImpactHomePageToOurImpactHomePageConnection Nodes. */
export type OurImpactHomePageToOurImpactHomePageConnectionPageInfo = OurImpactHomePageConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'OurImpactHomePageToOurImpactHomePageConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the OurImpactHomePage type and the ourImpactHomePage type */
export type OurImpactHomePageToParentConnectionEdge = Edge & OneToOneConnection & OurImpactHomePageConnectionEdge & {
  __typename?: 'OurImpactHomePageToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: OurImpactHomePage;
};

/** Connection between the OurImpactHomePage type and the ourImpactHomePage type */
export type OurImpactHomePageToPreviewConnectionEdge = Edge & OneToOneConnection & OurImpactHomePageConnectionEdge & {
  __typename?: 'OurImpactHomePageToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: OurImpactHomePage;
};

/** The &quot;OurImpactStatisticFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurImpactStatisticFields = AcfFieldGroup & AcfFieldGroupFields & OurImpactStatisticFields_Fields & {
  __typename?: 'OurImpactStatisticFields';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFields&quot; Field Group */
  gallery?: Maybe<OurImpactStatisticFieldsGallery>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFields&quot; Field Group */
  stats?: Maybe<OurImpactStatisticFieldsStats>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;OurImpactStatisticFieldsGallery&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurImpactStatisticFieldsGallery = AcfFieldGroup & AcfFieldGroupFields & OurImpactStatisticFieldsGallery_Fields & {
  __typename?: 'OurImpactStatisticFieldsGallery';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  image1?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  image2?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  image3?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  link1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  link2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  link3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  text1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  text2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  text3?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
export type OurImpactStatisticFieldsGallery_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  image1?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  image2?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  image3?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  link1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  link2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  link3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  text1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  text2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsGallery&quot; Field Group */
  text3?: Maybe<Scalars['String']['output']>;
};

/** The &quot;OurImpactStatisticFieldsStats&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurImpactStatisticFieldsStats = AcfFieldGroup & AcfFieldGroupFields & OurImpactStatisticFieldsStats_Fields & {
  __typename?: 'OurImpactStatisticFieldsStats';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  text1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  text2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  text3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  text4?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  text5?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  text6?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  unit1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  unit2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  unit3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  unit4?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  unit5?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  unit6?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  value1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  value2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  value3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  value4?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  value5?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  value6?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurImpactStatisticFieldsStats&quot; Field Group */
export type OurImpactStatisticFieldsStats_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  text1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  text2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  text3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  text4?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  text5?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  text6?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  unit1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  unit2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  unit3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  unit4?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  unit5?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  unit6?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  value1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  value2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  value3?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  value4?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  value5?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFieldsStats&quot; Field Group */
  value6?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurImpactStatisticFields&quot; Field Group */
export type OurImpactStatisticFields_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFields&quot; Field Group */
  gallery?: Maybe<OurImpactStatisticFieldsGallery>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFields&quot; Field Group */
  stats?: Maybe<OurImpactStatisticFieldsStats>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurImpactStatisticFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;Ourimpactstatistics&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type Ourimpactstatistics = AcfFieldGroup & AcfFieldGroupFields & Ourimpactstatistics_Fields & {
  __typename?: 'Ourimpactstatistics';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Ourimpactstatistics&quot; Field Group */
  ourImpactEvents?: Maybe<OurimpactstatisticsOurImpactEvents>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Ourimpactstatistics&quot; Field Group */
  ourImpactStatistics?: Maybe<OurimpactstatisticsOurImpactStatistics>;
};

/** The &quot;OurimpactstatisticsOurImpactEvents&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurimpactstatisticsOurImpactEvents = AcfFieldGroup & AcfFieldGroupFields & OurimpactstatisticsOurImpactEvents_Fields & {
  __typename?: 'OurimpactstatisticsOurImpactEvents';
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEvents&quot; Field Group */
  event1?: Maybe<OurimpactstatisticsOurImpactEventsEvent1>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEvents&quot; Field Group */
  event2?: Maybe<OurimpactstatisticsOurImpactEventsEvent2>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEvents&quot; Field Group */
  event3?: Maybe<OurimpactstatisticsOurImpactEventsEvent3>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
};

/** The &quot;OurimpactstatisticsOurImpactEventsEvent1&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurimpactstatisticsOurImpactEventsEvent1 = AcfFieldGroup & AcfFieldGroupFields & OurimpactstatisticsOurImpactEventsEvent1_Fields & {
  __typename?: 'OurimpactstatisticsOurImpactEventsEvent1';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEventsEvent1&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEventsEvent1&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurimpactstatisticsOurImpactEventsEvent1&quot; Field Group */
export type OurimpactstatisticsOurImpactEventsEvent1_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEventsEvent1&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEventsEvent1&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
};

/** The &quot;OurimpactstatisticsOurImpactEventsEvent2&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurimpactstatisticsOurImpactEventsEvent2 = AcfFieldGroup & AcfFieldGroupFields & OurimpactstatisticsOurImpactEventsEvent2_Fields & {
  __typename?: 'OurimpactstatisticsOurImpactEventsEvent2';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEventsEvent2&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEventsEvent2&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurimpactstatisticsOurImpactEventsEvent2&quot; Field Group */
export type OurimpactstatisticsOurImpactEventsEvent2_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEventsEvent2&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEventsEvent2&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
};

/** The &quot;OurimpactstatisticsOurImpactEventsEvent3&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurimpactstatisticsOurImpactEventsEvent3 = AcfFieldGroup & AcfFieldGroupFields & OurimpactstatisticsOurImpactEventsEvent3_Fields & {
  __typename?: 'OurimpactstatisticsOurImpactEventsEvent3';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEventsEvent3&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEventsEvent3&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurimpactstatisticsOurImpactEventsEvent3&quot; Field Group */
export type OurimpactstatisticsOurImpactEventsEvent3_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEventsEvent3&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEventsEvent3&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurimpactstatisticsOurImpactEvents&quot; Field Group */
export type OurimpactstatisticsOurImpactEvents_Fields = {
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEvents&quot; Field Group */
  event1?: Maybe<OurimpactstatisticsOurImpactEventsEvent1>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEvents&quot; Field Group */
  event2?: Maybe<OurimpactstatisticsOurImpactEventsEvent2>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactEvents&quot; Field Group */
  event3?: Maybe<OurimpactstatisticsOurImpactEventsEvent3>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
};

/** The &quot;OurimpactstatisticsOurImpactStatistics&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurimpactstatisticsOurImpactStatistics = AcfFieldGroup & AcfFieldGroupFields & OurimpactstatisticsOurImpactStatistics_Fields & {
  __typename?: 'OurimpactstatisticsOurImpactStatistics';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatistics&quot; Field Group */
  stat1?: Maybe<OurimpactstatisticsOurImpactStatisticsStat1>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatistics&quot; Field Group */
  stat2?: Maybe<OurimpactstatisticsOurImpactStatisticsStat2>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatistics&quot; Field Group */
  stat3?: Maybe<OurimpactstatisticsOurImpactStatisticsStat3>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatistics&quot; Field Group */
  stat4?: Maybe<OurimpactstatisticsOurImpactStatisticsStat4>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatistics&quot; Field Group */
  stat5?: Maybe<OurimpactstatisticsOurImpactStatisticsStat5>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatistics&quot; Field Group */
  stat6?: Maybe<OurimpactstatisticsOurImpactStatisticsStat6>;
};

/** The &quot;OurimpactstatisticsOurImpactStatisticsStat1&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurimpactstatisticsOurImpactStatisticsStat1 = AcfFieldGroup & AcfFieldGroupFields & OurimpactstatisticsOurImpactStatisticsStat1_Fields & {
  __typename?: 'OurimpactstatisticsOurImpactStatisticsStat1';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat1&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat1&quot; Field Group */
  unit?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat1&quot; Field Group */
  valueWUnit?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurimpactstatisticsOurImpactStatisticsStat1&quot; Field Group */
export type OurimpactstatisticsOurImpactStatisticsStat1_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat1&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat1&quot; Field Group */
  unit?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat1&quot; Field Group */
  valueWUnit?: Maybe<Scalars['String']['output']>;
};

/** The &quot;OurimpactstatisticsOurImpactStatisticsStat2&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurimpactstatisticsOurImpactStatisticsStat2 = AcfFieldGroup & AcfFieldGroupFields & OurimpactstatisticsOurImpactStatisticsStat2_Fields & {
  __typename?: 'OurimpactstatisticsOurImpactStatisticsStat2';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat2&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat2&quot; Field Group */
  unit?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat2&quot; Field Group */
  valueWUnit?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurimpactstatisticsOurImpactStatisticsStat2&quot; Field Group */
export type OurimpactstatisticsOurImpactStatisticsStat2_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat2&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat2&quot; Field Group */
  unit?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat2&quot; Field Group */
  valueWUnit?: Maybe<Scalars['String']['output']>;
};

/** The &quot;OurimpactstatisticsOurImpactStatisticsStat3&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurimpactstatisticsOurImpactStatisticsStat3 = AcfFieldGroup & AcfFieldGroupFields & OurimpactstatisticsOurImpactStatisticsStat3_Fields & {
  __typename?: 'OurimpactstatisticsOurImpactStatisticsStat3';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat3&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat3&quot; Field Group */
  unit?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat3&quot; Field Group */
  valueWUnit?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurimpactstatisticsOurImpactStatisticsStat3&quot; Field Group */
export type OurimpactstatisticsOurImpactStatisticsStat3_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat3&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat3&quot; Field Group */
  unit?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat3&quot; Field Group */
  valueWUnit?: Maybe<Scalars['String']['output']>;
};

/** The &quot;OurimpactstatisticsOurImpactStatisticsStat4&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurimpactstatisticsOurImpactStatisticsStat4 = AcfFieldGroup & AcfFieldGroupFields & OurimpactstatisticsOurImpactStatisticsStat4_Fields & {
  __typename?: 'OurimpactstatisticsOurImpactStatisticsStat4';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat4&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat4&quot; Field Group */
  unit?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat4&quot; Field Group */
  valueWUnit?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurimpactstatisticsOurImpactStatisticsStat4&quot; Field Group */
export type OurimpactstatisticsOurImpactStatisticsStat4_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat4&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat4&quot; Field Group */
  unit?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat4&quot; Field Group */
  valueWUnit?: Maybe<Scalars['String']['output']>;
};

/** The &quot;OurimpactstatisticsOurImpactStatisticsStat5&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurimpactstatisticsOurImpactStatisticsStat5 = AcfFieldGroup & AcfFieldGroupFields & OurimpactstatisticsOurImpactStatisticsStat5_Fields & {
  __typename?: 'OurimpactstatisticsOurImpactStatisticsStat5';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat5&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat5&quot; Field Group */
  unit?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat5&quot; Field Group */
  valueWUnit?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurimpactstatisticsOurImpactStatisticsStat5&quot; Field Group */
export type OurimpactstatisticsOurImpactStatisticsStat5_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat5&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat5&quot; Field Group */
  unit?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat5&quot; Field Group */
  valueWUnit?: Maybe<Scalars['String']['output']>;
};

/** The &quot;OurimpactstatisticsOurImpactStatisticsStat6&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type OurimpactstatisticsOurImpactStatisticsStat6 = AcfFieldGroup & AcfFieldGroupFields & OurimpactstatisticsOurImpactStatisticsStat6_Fields & {
  __typename?: 'OurimpactstatisticsOurImpactStatisticsStat6';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat6&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat6&quot; Field Group */
  unit?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat6&quot; Field Group */
  valueWUnit?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurimpactstatisticsOurImpactStatisticsStat6&quot; Field Group */
export type OurimpactstatisticsOurImpactStatisticsStat6_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat6&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat6&quot; Field Group */
  unit?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatisticsStat6&quot; Field Group */
  valueWUnit?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;OurimpactstatisticsOurImpactStatistics&quot; Field Group */
export type OurimpactstatisticsOurImpactStatistics_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatistics&quot; Field Group */
  stat1?: Maybe<OurimpactstatisticsOurImpactStatisticsStat1>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatistics&quot; Field Group */
  stat2?: Maybe<OurimpactstatisticsOurImpactStatisticsStat2>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatistics&quot; Field Group */
  stat3?: Maybe<OurimpactstatisticsOurImpactStatisticsStat3>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatistics&quot; Field Group */
  stat4?: Maybe<OurimpactstatisticsOurImpactStatisticsStat4>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatistics&quot; Field Group */
  stat5?: Maybe<OurimpactstatisticsOurImpactStatisticsStat5>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;OurimpactstatisticsOurImpactStatistics&quot; Field Group */
  stat6?: Maybe<OurimpactstatisticsOurImpactStatisticsStat6>;
};

/** Interface representing fields of the ACF &quot;Ourimpactstatistics&quot; Field Group */
export type Ourimpactstatistics_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Ourimpactstatistics&quot; Field Group */
  ourImpactEvents?: Maybe<OurimpactstatisticsOurImpactEvents>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;Ourimpactstatistics&quot; Field Group */
  ourImpactStatistics?: Maybe<OurimpactstatisticsOurImpactStatistics>;
};

/** A standalone content entry generally used for static, non-chronological content such as &quot;About Us&quot; or &quot;Contact&quot; pages. */
export type Page = ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithPageAttributes & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & {
  __typename?: 'Page';
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']['output']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']['output']>;
  /** Connection between the Page type and the Comment type */
  comments?: Maybe<PageToCommentConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The content of the post. */
  content?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  featuredImageDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Globally unique ID of the featured image assigned to the node */
  featuredImageId?: Maybe<Scalars['ID']['output']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the page object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the page object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether this page is set to the static front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether this page is set to the blog posts page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether this page is set to the privacy page. */
  isPrivacyPage: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** True if the node is a revision of another node */
  isRevision?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: Maybe<Scalars['Int']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  pageId: Scalars['Int']['output'];
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** The password for the page object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the Page type and the page type */
  preview?: Maybe<PageToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */
  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
  /** Connection between the Page type and the page type */
  revisions?: Maybe<PageToRevisionConnection>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to a node of content */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** A standalone content entry generally used for static, non-chronological content such as &quot;About Us&quot; or &quot;Contact&quot; pages. */
export type PageAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** A standalone content entry generally used for static, non-chronological content such as &quot;About Us&quot; or &quot;Contact&quot; pages. */
export type PageChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};


/** A standalone content entry generally used for static, non-chronological content such as &quot;About Us&quot; or &quot;Contact&quot; pages. */
export type PageCommentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageToCommentConnectionWhereArgs>;
};


/** A standalone content entry generally used for static, non-chronological content such as &quot;About Us&quot; or &quot;Contact&quot; pages. */
export type PageContentArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** A standalone content entry generally used for static, non-chronological content such as &quot;About Us&quot; or &quot;Contact&quot; pages. */
export type PageEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A standalone content entry generally used for static, non-chronological content such as &quot;About Us&quot; or &quot;Contact&quot; pages. */
export type PageEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A standalone content entry generally used for static, non-chronological content such as &quot;About Us&quot; or &quot;Contact&quot; pages. */
export type PageRevisionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageToRevisionConnectionWhereArgs>;
};


/** A standalone content entry generally used for static, non-chronological content such as &quot;About Us&quot; or &quot;Contact&quot; pages. */
export type PageTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of page Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of page Nodes */
export type PageConnection = {
  /** A list of edges (relational context) between RootQuery and connected page Nodes */
  edges: Array<PageConnectionEdge>;
  /** A list of connected page Nodes */
  nodes: Array<Page>;
  /** Information about pagination in a connection. */
  pageInfo: PageConnectionPageInfo;
};

/** Represents a connection to a page. Contains both the page Node and metadata about the relationship. */
export type PageConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected page Node */
  node: Page;
};

/** Pagination metadata specific to &quot;PageConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;PageConnectionEdge&quot; Nodes. */
export type PageConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific Page. Specifies which unique attribute is used to find an exact Page. */
export enum PageIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Metadata for cursor-based pagination. Provides cursors for continuing pagination and boolean flags indicating if more items exist in either direction. */
export type PageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the Page type and the Comment type */
export type PageToCommentConnection = CommentConnection & Connection & {
  __typename?: 'PageToCommentConnection';
  /** Edges for the PageToCommentConnection connection */
  edges: Array<PageToCommentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: PageToCommentConnectionPageInfo;
};

/** An edge in a connection */
export type PageToCommentConnectionEdge = CommentConnectionEdge & Edge & {
  __typename?: 'PageToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Comment;
};

/** Pagination metadata specific to &quot;PageToCommentConnection&quot; collections. Provides cursors and flags for navigating through sets of PageToCommentConnection Nodes. */
export type PageToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'PageToCommentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PageToCommentConnection connection */
export type PageToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** One or more Comment Statuses to limit results by */
  statusIn?: InputMaybe<Array<InputMaybe<CommentStatusEnum>>>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the Page type and the page type */
export type PageToPreviewConnectionEdge = Edge & OneToOneConnection & PageConnectionEdge & {
  __typename?: 'PageToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Page;
};

/** Connection between the Page type and the page type */
export type PageToRevisionConnection = Connection & PageConnection & {
  __typename?: 'PageToRevisionConnection';
  /** Edges for the PageToRevisionConnection connection */
  edges: Array<PageToRevisionConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Page>;
  /** Information about pagination in a connection. */
  pageInfo: PageToRevisionConnectionPageInfo;
};

/** An edge in a connection */
export type PageToRevisionConnectionEdge = Edge & PageConnectionEdge & {
  __typename?: 'PageToRevisionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Page;
};

/** Pagination metadata specific to &quot;PageToRevisionConnection&quot; collections. Provides cursors and flags for navigating through sets of PageToRevisionConnection Nodes. */
export type PageToRevisionConnectionPageInfo = PageConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'PageToRevisionConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PageToRevisionConnection connection */
export type PageToRevisionConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The &quot;PartnerAgencies&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type PartnerAgencies = AcfFieldGroup & AcfFieldGroupFields & PartnerAgencies_Fields & {
  __typename?: 'PartnerAgencies';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;PartnerAgencies&quot; Field Group */
  partnerAgencies?: Maybe<PartnerAgenciesPartnerAgencies>;
};

/** The &quot;PartnerAgenciesPartnerAgencies&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type PartnerAgenciesPartnerAgencies = AcfFieldGroup & AcfFieldGroupFields & PartnerAgenciesPartnerAgencies_Fields & {
  __typename?: 'PartnerAgenciesPartnerAgencies';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;PartnerAgenciesPartnerAgencies&quot; Field Group */
  alzheimersAssociation?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;PartnerAgenciesPartnerAgencies&quot; Field Group */
  bayCliff?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;PartnerAgenciesPartnerAgencies&quot; Field Group */
  feedingAmericaWestMichigan?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;PartnerAgenciesPartnerAgencies&quot; Field Group */
  habitatForHumanity?: Maybe<AcfMediaItemConnectionEdge>;
};

/** Interface representing fields of the ACF &quot;PartnerAgenciesPartnerAgencies&quot; Field Group */
export type PartnerAgenciesPartnerAgencies_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;PartnerAgenciesPartnerAgencies&quot; Field Group */
  alzheimersAssociation?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;PartnerAgenciesPartnerAgencies&quot; Field Group */
  bayCliff?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;PartnerAgenciesPartnerAgencies&quot; Field Group */
  feedingAmericaWestMichigan?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;PartnerAgenciesPartnerAgencies&quot; Field Group */
  habitatForHumanity?: Maybe<AcfMediaItemConnectionEdge>;
};

/** Interface representing fields of the ACF &quot;PartnerAgencies&quot; Field Group */
export type PartnerAgencies_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;group&quot; Field Type added to the schema as part of the &quot;PartnerAgencies&quot; Field Group */
  partnerAgencies?: Maybe<PartnerAgenciesPartnerAgencies>;
};

/** The partnerPageHero type */
export type PartnerPageHero = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfPartnerPageHeroFields & {
  __typename?: 'PartnerPageHero';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<PartnerPageHeroToPartnerPageHeroConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the partner_page_hero object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the partner_page_hero object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<PartnerPageHeroToParentConnectionEdge>;
  /** Fields of the PartnerPageHeroFields ACF Field Group */
  partnerPageHeroFields?: Maybe<PartnerPageHeroFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  partnerPageHeroId: Scalars['Int']['output'];
  /** The password for the partner_page_hero object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the PartnerPageHero type and the partnerPageHero type */
  preview?: Maybe<PartnerPageHeroToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The partnerPageHero type */
export type PartnerPageHeroAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The partnerPageHero type */
export type PartnerPageHeroEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The partnerPageHero type */
export type PartnerPageHeroEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The partnerPageHero type */
export type PartnerPageHeroTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of partnerPageHero Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of partnerPageHero Nodes */
export type PartnerPageHeroConnection = {
  /** A list of edges (relational context) between RootQuery and connected partnerPageHero Nodes */
  edges: Array<PartnerPageHeroConnectionEdge>;
  /** A list of connected partnerPageHero Nodes */
  nodes: Array<PartnerPageHero>;
  /** Information about pagination in a connection. */
  pageInfo: PartnerPageHeroConnectionPageInfo;
};

/** Represents a connection to a partnerPageHero. Contains both the partnerPageHero Node and metadata about the relationship. */
export type PartnerPageHeroConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected partnerPageHero Node */
  node: PartnerPageHero;
};

/** Pagination metadata specific to &quot;PartnerPageHeroConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;PartnerPageHeroConnectionEdge&quot; Nodes. */
export type PartnerPageHeroConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;PartnerPageHeroFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type PartnerPageHeroFields = AcfFieldGroup & AcfFieldGroupFields & PartnerPageHeroFields_Fields & {
  __typename?: 'PartnerPageHeroFields';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;PartnerPageHeroFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;PartnerPageHeroFields&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;PartnerPageHeroFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;PartnerPageHeroFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;PartnerPageHeroFields&quot; Field Group */
export type PartnerPageHeroFields_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;PartnerPageHeroFields&quot; Field Group */
  bg?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;PartnerPageHeroFields&quot; Field Group */
  bgMobile?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;PartnerPageHeroFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;PartnerPageHeroFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific PartnerPageHero. Specifies which unique attribute is used to find an exact PartnerPageHero. */
export enum PartnerPageHeroIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the PartnerPageHero type and the partnerPageHero type */
export type PartnerPageHeroToParentConnectionEdge = Edge & OneToOneConnection & PartnerPageHeroConnectionEdge & {
  __typename?: 'PartnerPageHeroToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: PartnerPageHero;
};

/** Connection between the PartnerPageHero type and the partnerPageHero type */
export type PartnerPageHeroToPartnerPageHeroConnection = Connection & PartnerPageHeroConnection & {
  __typename?: 'PartnerPageHeroToPartnerPageHeroConnection';
  /** Edges for the PartnerPageHeroToPartnerPageHeroConnection connection */
  edges: Array<PartnerPageHeroToPartnerPageHeroConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<PartnerPageHero>;
  /** Information about pagination in a connection. */
  pageInfo: PartnerPageHeroToPartnerPageHeroConnectionPageInfo;
};

/** An edge in a connection */
export type PartnerPageHeroToPartnerPageHeroConnectionEdge = Edge & PartnerPageHeroConnectionEdge & {
  __typename?: 'PartnerPageHeroToPartnerPageHeroConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: PartnerPageHero;
};

/** Pagination metadata specific to &quot;PartnerPageHeroToPartnerPageHeroConnection&quot; collections. Provides cursors and flags for navigating through sets of PartnerPageHeroToPartnerPageHeroConnection Nodes. */
export type PartnerPageHeroToPartnerPageHeroConnectionPageInfo = PageInfo & PartnerPageHeroConnectionPageInfo & WpPageInfo & {
  __typename?: 'PartnerPageHeroToPartnerPageHeroConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the PartnerPageHero type and the partnerPageHero type */
export type PartnerPageHeroToPreviewConnectionEdge = Edge & OneToOneConnection & PartnerPageHeroConnectionEdge & {
  __typename?: 'PartnerPageHeroToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: PartnerPageHero;
};

/** The partnersTickerItem type */
export type PartnersTickerItem = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfPartnersTickerItemFields & {
  __typename?: 'PartnersTickerItem';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<PartnersTickerItemToPartnersTickerItemConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the partners_ticker object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the partners_ticker object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<PartnersTickerItemToParentConnectionEdge>;
  /** Fields of the PartnersTickerItemFields ACF Field Group */
  partnersTickerItemFields?: Maybe<PartnersTickerItemFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  partnersTickerItemId: Scalars['Int']['output'];
  /** The password for the partners_ticker object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the PartnersTickerItem type and the partnersTickerItem type */
  preview?: Maybe<PartnersTickerItemToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The partnersTickerItem type */
export type PartnersTickerItemAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The partnersTickerItem type */
export type PartnersTickerItemEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The partnersTickerItem type */
export type PartnersTickerItemEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The partnersTickerItem type */
export type PartnersTickerItemTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of partnersTickerItem Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of partnersTickerItem Nodes */
export type PartnersTickerItemConnection = {
  /** A list of edges (relational context) between RootQuery and connected partnersTickerItem Nodes */
  edges: Array<PartnersTickerItemConnectionEdge>;
  /** A list of connected partnersTickerItem Nodes */
  nodes: Array<PartnersTickerItem>;
  /** Information about pagination in a connection. */
  pageInfo: PartnersTickerItemConnectionPageInfo;
};

/** Represents a connection to a partnersTickerItem. Contains both the partnersTickerItem Node and metadata about the relationship. */
export type PartnersTickerItemConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected partnersTickerItem Node */
  node: PartnersTickerItem;
};

/** Pagination metadata specific to &quot;PartnersTickerItemConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;PartnersTickerItemConnectionEdge&quot; Nodes. */
export type PartnersTickerItemConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;PartnersTickerItemFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type PartnersTickerItemFields = AcfFieldGroup & AcfFieldGroupFields & PartnersTickerItemFields_Fields & {
  __typename?: 'PartnersTickerItemFields';
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;PartnersTickerItemFields&quot; Field Group */
  alt?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;PartnersTickerItemFields&quot; Field Group */
  brandImg?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;PartnersTickerItemFields&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;PartnersTickerItemFields&quot; Field Group */
  name?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;PartnersTickerItemFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;PartnersTickerItemFields&quot; Field Group */
export type PartnersTickerItemFields_Fields = {
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;PartnersTickerItemFields&quot; Field Group */
  alt?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;PartnersTickerItemFields&quot; Field Group */
  brandImg?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;PartnersTickerItemFields&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;PartnersTickerItemFields&quot; Field Group */
  name?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;PartnersTickerItemFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific PartnersTickerItem. Specifies which unique attribute is used to find an exact PartnersTickerItem. */
export enum PartnersTickerItemIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the PartnersTickerItem type and the partnersTickerItem type */
export type PartnersTickerItemToParentConnectionEdge = Edge & OneToOneConnection & PartnersTickerItemConnectionEdge & {
  __typename?: 'PartnersTickerItemToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: PartnersTickerItem;
};

/** Connection between the PartnersTickerItem type and the partnersTickerItem type */
export type PartnersTickerItemToPartnersTickerItemConnection = Connection & PartnersTickerItemConnection & {
  __typename?: 'PartnersTickerItemToPartnersTickerItemConnection';
  /** Edges for the PartnersTickerItemToPartnersTickerItemConnection connection */
  edges: Array<PartnersTickerItemToPartnersTickerItemConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<PartnersTickerItem>;
  /** Information about pagination in a connection. */
  pageInfo: PartnersTickerItemToPartnersTickerItemConnectionPageInfo;
};

/** An edge in a connection */
export type PartnersTickerItemToPartnersTickerItemConnectionEdge = Edge & PartnersTickerItemConnectionEdge & {
  __typename?: 'PartnersTickerItemToPartnersTickerItemConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: PartnersTickerItem;
};

/** Pagination metadata specific to &quot;PartnersTickerItemToPartnersTickerItemConnection&quot; collections. Provides cursors and flags for navigating through sets of PartnersTickerItemToPartnersTickerItemConnection Nodes. */
export type PartnersTickerItemToPartnersTickerItemConnectionPageInfo = PageInfo & PartnersTickerItemConnectionPageInfo & WpPageInfo & {
  __typename?: 'PartnersTickerItemToPartnersTickerItemConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the PartnersTickerItem type and the partnersTickerItem type */
export type PartnersTickerItemToPreviewConnectionEdge = Edge & OneToOneConnection & PartnersTickerItemConnectionEdge & {
  __typename?: 'PartnersTickerItemToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: PartnersTickerItem;
};

/** An plugin object */
export type Plugin = Node & {
  __typename?: 'Plugin';
  /** Name of the plugin author(s), may also be a company name. */
  author?: Maybe<Scalars['String']['output']>;
  /** URI for the related author(s)/company website. */
  authorUri?: Maybe<Scalars['String']['output']>;
  /** Description of the plugin. */
  description?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the plugin object. */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Display name of the plugin. */
  name?: Maybe<Scalars['String']['output']>;
  /** Plugin path. */
  path?: Maybe<Scalars['String']['output']>;
  /** URI for the plugin website. This is useful for directing users for support requests etc. */
  pluginUri?: Maybe<Scalars['String']['output']>;
  /** Current version of the plugin. */
  version?: Maybe<Scalars['String']['output']>;
};

/** A paginated collection of Plugin Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of Plugin Nodes */
export type PluginConnection = {
  /** A list of edges (relational context) between RootQuery and connected Plugin Nodes */
  edges: Array<PluginConnectionEdge>;
  /** A list of connected Plugin Nodes */
  nodes: Array<Plugin>;
  /** Information about pagination in a connection. */
  pageInfo: PluginConnectionPageInfo;
};

/** Represents a connection to a Plugin. Contains both the Plugin Node and metadata about the relationship. */
export type PluginConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected Plugin Node */
  node: Plugin;
};

/** Pagination metadata specific to &quot;PluginConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;PluginConnectionEdge&quot; Nodes. */
export type PluginConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Operational status of a plugin. Indicates whether a plugin is active, inactive, or in another state that affects its functionality. */
export enum PluginStatusEnum {
  /** The plugin is currently active. */
  Active = 'ACTIVE',
  /** The plugin is a drop-in plugin. */
  DropIn = 'DROP_IN',
  /** The plugin is currently inactive. */
  Inactive = 'INACTIVE',
  /** The plugin is a must-use plugin. */
  MustUse = 'MUST_USE',
  /** The plugin is technically active but was paused while loading. */
  Paused = 'PAUSED',
  /** The plugin was active recently. */
  RecentlyActive = 'RECENTLY_ACTIVE',
  /** The plugin has an upgrade available. */
  Upgrade = 'UPGRADE'
}

/** A chronological content entry typically used for blog posts, news articles, or similar date-based content. */
export type Post = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & NodeWithTrackbacks & Previewable & UniformResourceIdentifiable & WithAcfOurImpactHero & WithAcfOurimpactstatistics & WithAcfPartnerAgencies & {
  __typename?: 'Post';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<PostToPostConnection>;
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  /** Connection between the Post type and the category type */
  categories?: Maybe<PostToCategoryConnection>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']['output']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']['output']>;
  /** Connection between the Post type and the Comment type */
  comments?: Maybe<PostToCommentConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The content of the post. */
  content?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The excerpt of the post. */
  excerpt?: Maybe<Scalars['String']['output']>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  featuredImageDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Globally unique ID of the featured image assigned to the node */
  featuredImageId?: Maybe<Scalars['ID']['output']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the post object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the post object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** True if the node is a revision of another node */
  isRevision?: Maybe<Scalars['Boolean']['output']>;
  /** Whether this page is sticky */
  isSticky: Scalars['Boolean']['output'];
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** Fields of the OurImpactHero ACF Field Group */
  ourImpactHero?: Maybe<OurImpactHero>;
  /** Fields of the Ourimpactstatistics ACF Field Group */
  ourimpactstatistics?: Maybe<Ourimpactstatistics>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<PostToParentConnectionEdge>;
  /** Fields of the PartnerAgencies ACF Field Group */
  partnerAgencies?: Maybe<PartnerAgencies>;
  /** The password for the post object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Whether the pings are open or closed for this particular post. */
  pingStatus?: Maybe<Scalars['String']['output']>;
  /** URLs that have been pinged. */
  pinged?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Connection between the Post type and the postFormat type */
  postFormats?: Maybe<PostToPostFormatConnection>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  postId: Scalars['Int']['output'];
  /** Connection between the Post type and the post type */
  preview?: Maybe<PostToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */
  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
  /** Connection between the Post type and the post type */
  revisions?: Maybe<PostToRevisionConnection>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** Connection between the Post type and the tag type */
  tags?: Maybe<PostToTagConnection>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Connection between the Post type and the TermNode type */
  terms?: Maybe<PostToTermNodeConnection>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** URLs queued to be pinged. */
  toPing?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** A chronological content entry typically used for blog posts, news articles, or similar date-based content. */
export type PostAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A chronological content entry typically used for blog posts, news articles, or similar date-based content. */
export type PostCategoriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostToCategoryConnectionWhereArgs>;
};


/** A chronological content entry typically used for blog posts, news articles, or similar date-based content. */
export type PostCommentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostToCommentConnectionWhereArgs>;
};


/** A chronological content entry typically used for blog posts, news articles, or similar date-based content. */
export type PostContentArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** A chronological content entry typically used for blog posts, news articles, or similar date-based content. */
export type PostEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A chronological content entry typically used for blog posts, news articles, or similar date-based content. */
export type PostEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A chronological content entry typically used for blog posts, news articles, or similar date-based content. */
export type PostExcerptArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** A chronological content entry typically used for blog posts, news articles, or similar date-based content. */
export type PostPostFormatsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostToPostFormatConnectionWhereArgs>;
};


/** A chronological content entry typically used for blog posts, news articles, or similar date-based content. */
export type PostRevisionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostToRevisionConnectionWhereArgs>;
};


/** A chronological content entry typically used for blog posts, news articles, or similar date-based content. */
export type PostTagsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostToTagConnectionWhereArgs>;
};


/** A chronological content entry typically used for blog posts, news articles, or similar date-based content. */
export type PostTermsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostToTermNodeConnectionWhereArgs>;
};


/** A chronological content entry typically used for blog posts, news articles, or similar date-based content. */
export type PostTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Set relationships between the post to categories */
export type PostCategoriesInput = {
  /** If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars['Boolean']['input']>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<PostCategoriesNodeInput>>>;
};

/** List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type PostCategoriesNodeInput = {
  /** The description of the category. This field is used to set a description of the category if a new one is created during the mutation. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** A paginated collection of post Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of post Nodes */
export type PostConnection = {
  /** A list of edges (relational context) between RootQuery and connected post Nodes */
  edges: Array<PostConnectionEdge>;
  /** A list of connected post Nodes */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: PostConnectionPageInfo;
};

/** Represents a connection to a post. Contains both the post Node and metadata about the relationship. */
export type PostConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected post Node */
  node: Post;
};

/** Pagination metadata specific to &quot;PostConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;PostConnectionEdge&quot; Nodes. */
export type PostConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** A standardized classification system for content presentation styles. These formats can be used to display content differently based on type, such as &quot;standard&quot;, &quot;gallery&quot;, &quot;video&quot;, etc. */
export type PostFormat = DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable & {
  __typename?: 'PostFormat';
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the PostFormat type and the ContentNode type */
  contentNodes?: Maybe<PostFormatToContentNodeConnection>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The description of the object */
  description?: Maybe<Scalars['String']['output']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The link to the term */
  link?: Maybe<Scalars['String']['output']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  postFormatId?: Maybe<Scalars['Int']['output']>;
  /** Connection between the PostFormat type and the post type */
  posts?: Maybe<PostFormatToPostConnection>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']['output']>;
  /** Connection between the PostFormat type and the Taxonomy type */
  taxonomy?: Maybe<PostFormatToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']['output']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** A standardized classification system for content presentation styles. These formats can be used to display content differently based on type, such as &quot;standard&quot;, &quot;gallery&quot;, &quot;video&quot;, etc. */
export type PostFormatContentNodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostFormatToContentNodeConnectionWhereArgs>;
};


/** A standardized classification system for content presentation styles. These formats can be used to display content differently based on type, such as &quot;standard&quot;, &quot;gallery&quot;, &quot;video&quot;, etc. */
export type PostFormatEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A standardized classification system for content presentation styles. These formats can be used to display content differently based on type, such as &quot;standard&quot;, &quot;gallery&quot;, &quot;video&quot;, etc. */
export type PostFormatEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A standardized classification system for content presentation styles. These formats can be used to display content differently based on type, such as &quot;standard&quot;, &quot;gallery&quot;, &quot;video&quot;, etc. */
export type PostFormatPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostFormatToPostConnectionWhereArgs>;
};

/** A paginated collection of postFormat Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of postFormat Nodes */
export type PostFormatConnection = {
  /** A list of edges (relational context) between RootQuery and connected postFormat Nodes */
  edges: Array<PostFormatConnectionEdge>;
  /** A list of connected postFormat Nodes */
  nodes: Array<PostFormat>;
  /** Information about pagination in a connection. */
  pageInfo: PostFormatConnectionPageInfo;
};

/** Represents a connection to a postFormat. Contains both the postFormat Node and metadata about the relationship. */
export type PostFormatConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected postFormat Node */
  node: PostFormat;
};

/** Pagination metadata specific to &quot;PostFormatConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;PostFormatConnectionEdge&quot; Nodes. */
export type PostFormatConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific PostFormat. Determines which unique property (global ID, database ID, slug, etc.) is used to locate the PostFormat. */
export enum PostFormatIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the PostFormat type and the ContentNode type */
export type PostFormatToContentNodeConnection = Connection & ContentNodeConnection & {
  __typename?: 'PostFormatToContentNodeConnection';
  /** Edges for the PostFormatToContentNodeConnection connection */
  edges: Array<PostFormatToContentNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: PostFormatToContentNodeConnectionPageInfo;
};

/** An edge in a connection */
export type PostFormatToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'PostFormatToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Pagination metadata specific to &quot;PostFormatToContentNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of PostFormatToContentNodeConnection Nodes. */
export type PostFormatToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'PostFormatToContentNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostFormatToContentNodeConnection connection */
export type PostFormatToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfPostFormatEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the PostFormat type and the post type */
export type PostFormatToPostConnection = Connection & PostConnection & {
  __typename?: 'PostFormatToPostConnection';
  /** Edges for the PostFormatToPostConnection connection */
  edges: Array<PostFormatToPostConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: PostFormatToPostConnectionPageInfo;
};

/** An edge in a connection */
export type PostFormatToPostConnectionEdge = Edge & PostConnectionEdge & {
  __typename?: 'PostFormatToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Post;
};

/** Pagination metadata specific to &quot;PostFormatToPostConnection&quot; collections. Provides cursors and flags for navigating through sets of PostFormatToPostConnection Nodes. */
export type PostFormatToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {
  __typename?: 'PostFormatToPostConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostFormatToPostConnection connection */
export type PostFormatToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']['input']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']['input']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag slugs, used to display objects from one tag AND another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of tag slugs, used to include objects in ANY specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the PostFormat type and the Taxonomy type */
export type PostFormatToTaxonomyConnectionEdge = Edge & OneToOneConnection & TaxonomyConnectionEdge & {
  __typename?: 'PostFormatToTaxonomyConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Taxonomy;
};

/** Identifier types for retrieving a specific Post. Specifies which unique attribute is used to find an exact Post. */
export enum PostIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Content field rendering options. Determines whether content fields are returned as raw data or with applied formatting and transformations. Default is RENDERED. */
export enum PostObjectFieldFormatEnum {
  /** Unprocessed content exactly as stored in the database, requires appropriate permissions. */
  Raw = 'RAW',
  /** Content with all formatting and transformations applied, ready for display. */
  Rendered = 'RENDERED'
}

/** Date field selectors for content filtering. Specifies which date attribute (creation date, modification date) should be used for date-based queries. */
export enum PostObjectsConnectionDateColumnEnum {
  /** The date the comment was created in local time. */
  Date = 'DATE',
  /** The most recent modification date of the comment. */
  Modified = 'MODIFIED'
}

/** Content sorting attributes for post-type objects. Identifies which content property should be used to determine result order. */
export enum PostObjectsConnectionOrderbyEnum {
  /** Ordering by content author (typically by author name). */
  Author = 'AUTHOR',
  /** Ordering by popularity based on number of comments. */
  CommentCount = 'COMMENT_COUNT',
  /** Chronological ordering by publication date. */
  Date = 'DATE',
  /** Maintain custom order of IDs exactly as specified in the query with the IN field. */
  In = 'IN',
  /** Ordering by manually defined sort position. */
  MenuOrder = 'MENU_ORDER',
  /** Chronological ordering by modified date. */
  Modified = 'MODIFIED',
  /** Maintain custom order of IDs exactly as specified in the query with the NAME_IN field. */
  NameIn = 'NAME_IN',
  /** Ordering by parent-child relationship in hierarchical content. */
  Parent = 'PARENT',
  /** Alphabetical ordering by URL-friendly name. */
  Slug = 'SLUG',
  /** Alphabetical ordering by content title */
  Title = 'TITLE'
}

/** Options for ordering the connection */
export type PostObjectsConnectionOrderbyInput = {
  /** The field to order the connection by */
  field: PostObjectsConnectionOrderbyEnum;
  /** Possible directions in which to order a list of items */
  order: OrderEnum;
};

/** Set relationships between the post to postFormats */
export type PostPostFormatsInput = {
  /** If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars['Boolean']['input']>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<PostPostFormatsNodeInput>>>;
};

/** List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type PostPostFormatsNodeInput = {
  /** The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** Publishing status that controls the visibility and editorial state of content. Determines whether content is published, pending review, in draft state, or private. */
export enum PostStatusEnum {
  /** Objects with the acf-disabled status */
  AcfDisabled = 'ACF_DISABLED',
  /** Automatically saved content that has not been manually saved */
  AutoDraft = 'AUTO_DRAFT',
  /** Content that is saved but not yet published or visible to the public */
  Draft = 'DRAFT',
  /** Objects with the future status */
  Future = 'FUTURE',
  /** Content that inherits its status from a parent object */
  Inherit = 'INHERIT',
  /** Content awaiting review before publication */
  Pending = 'PENDING',
  /** Content only visible to authorized users with appropriate permissions */
  Private = 'PRIVATE',
  /** Content that is publicly visible to all visitors */
  Publish = 'PUBLISH',
  /** Objects with the request-completed status */
  RequestCompleted = 'REQUEST_COMPLETED',
  /** Objects with the request-confirmed status */
  RequestConfirmed = 'REQUEST_CONFIRMED',
  /** Objects with the request-failed status */
  RequestFailed = 'REQUEST_FAILED',
  /** Objects with the request-pending status */
  RequestPending = 'REQUEST_PENDING',
  /** Content marked for deletion but still recoverable */
  Trash = 'TRASH'
}

/** Set relationships between the post to tags */
export type PostTagsInput = {
  /** If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars['Boolean']['input']>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<PostTagsNodeInput>>>;
};

/** List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type PostTagsNodeInput = {
  /** The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the Post type and the category type */
export type PostToCategoryConnection = CategoryConnection & Connection & {
  __typename?: 'PostToCategoryConnection';
  /** Edges for the PostToCategoryConnection connection */
  edges: Array<PostToCategoryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Category>;
  /** Information about pagination in a connection. */
  pageInfo: PostToCategoryConnectionPageInfo;
};

/** An edge in a connection */
export type PostToCategoryConnectionEdge = CategoryConnectionEdge & Edge & {
  __typename?: 'PostToCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Category;
};

/** Pagination metadata specific to &quot;PostToCategoryConnection&quot; collections. Provides cursors and flags for navigating through sets of PostToCategoryConnection Nodes. */
export type PostToCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'PostToCategoryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostToCategoryConnection connection */
export type PostToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the Post type and the Comment type */
export type PostToCommentConnection = CommentConnection & Connection & {
  __typename?: 'PostToCommentConnection';
  /** Edges for the PostToCommentConnection connection */
  edges: Array<PostToCommentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: PostToCommentConnectionPageInfo;
};

/** An edge in a connection */
export type PostToCommentConnectionEdge = CommentConnectionEdge & Edge & {
  __typename?: 'PostToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Comment;
};

/** Pagination metadata specific to &quot;PostToCommentConnection&quot; collections. Provides cursors and flags for navigating through sets of PostToCommentConnection Nodes. */
export type PostToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'PostToCommentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostToCommentConnection connection */
export type PostToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** One or more Comment Statuses to limit results by */
  statusIn?: InputMaybe<Array<InputMaybe<CommentStatusEnum>>>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the Post type and the post type */
export type PostToParentConnectionEdge = Edge & OneToOneConnection & PostConnectionEdge & {
  __typename?: 'PostToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: Post;
};

/** Connection between the Post type and the post type */
export type PostToPostConnection = Connection & PostConnection & {
  __typename?: 'PostToPostConnection';
  /** Edges for the PostToPostConnection connection */
  edges: Array<PostToPostConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: PostToPostConnectionPageInfo;
};

/** An edge in a connection */
export type PostToPostConnectionEdge = Edge & PostConnectionEdge & {
  __typename?: 'PostToPostConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: Post;
};

/** Pagination metadata specific to &quot;PostToPostConnection&quot; collections. Provides cursors and flags for navigating through sets of PostToPostConnection Nodes. */
export type PostToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {
  __typename?: 'PostToPostConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the Post type and the postFormat type */
export type PostToPostFormatConnection = Connection & PostFormatConnection & {
  __typename?: 'PostToPostFormatConnection';
  /** Edges for the PostToPostFormatConnection connection */
  edges: Array<PostToPostFormatConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<PostFormat>;
  /** Information about pagination in a connection. */
  pageInfo: PostToPostFormatConnectionPageInfo;
};

/** An edge in a connection */
export type PostToPostFormatConnectionEdge = Edge & PostFormatConnectionEdge & {
  __typename?: 'PostToPostFormatConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: PostFormat;
};

/** Pagination metadata specific to &quot;PostToPostFormatConnection&quot; collections. Provides cursors and flags for navigating through sets of PostToPostFormatConnection Nodes. */
export type PostToPostFormatConnectionPageInfo = PageInfo & PostFormatConnectionPageInfo & WpPageInfo & {
  __typename?: 'PostToPostFormatConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostToPostFormatConnection connection */
export type PostToPostFormatConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the Post type and the post type */
export type PostToPreviewConnectionEdge = Edge & OneToOneConnection & PostConnectionEdge & {
  __typename?: 'PostToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Post;
};

/** Connection between the Post type and the post type */
export type PostToRevisionConnection = Connection & PostConnection & {
  __typename?: 'PostToRevisionConnection';
  /** Edges for the PostToRevisionConnection connection */
  edges: Array<PostToRevisionConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: PostToRevisionConnectionPageInfo;
};

/** An edge in a connection */
export type PostToRevisionConnectionEdge = Edge & PostConnectionEdge & {
  __typename?: 'PostToRevisionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Post;
};

/** Pagination metadata specific to &quot;PostToRevisionConnection&quot; collections. Provides cursors and flags for navigating through sets of PostToRevisionConnection Nodes. */
export type PostToRevisionConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {
  __typename?: 'PostToRevisionConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostToRevisionConnection connection */
export type PostToRevisionConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']['input']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']['input']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag slugs, used to display objects from one tag AND another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of tag slugs, used to include objects in ANY specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the Post type and the tag type */
export type PostToTagConnection = Connection & TagConnection & {
  __typename?: 'PostToTagConnection';
  /** Edges for the PostToTagConnection connection */
  edges: Array<PostToTagConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Tag>;
  /** Information about pagination in a connection. */
  pageInfo: PostToTagConnectionPageInfo;
};

/** An edge in a connection */
export type PostToTagConnectionEdge = Edge & TagConnectionEdge & {
  __typename?: 'PostToTagConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Tag;
};

/** Pagination metadata specific to &quot;PostToTagConnection&quot; collections. Provides cursors and flags for navigating through sets of PostToTagConnection Nodes. */
export type PostToTagConnectionPageInfo = PageInfo & TagConnectionPageInfo & WpPageInfo & {
  __typename?: 'PostToTagConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostToTagConnection connection */
export type PostToTagConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the Post type and the TermNode type */
export type PostToTermNodeConnection = Connection & TermNodeConnection & {
  __typename?: 'PostToTermNodeConnection';
  /** Edges for the PostToTermNodeConnection connection */
  edges: Array<PostToTermNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<TermNode>;
  /** Information about pagination in a connection. */
  pageInfo: PostToTermNodeConnectionPageInfo;
};

/** An edge in a connection */
export type PostToTermNodeConnectionEdge = Edge & TermNodeConnectionEdge & {
  __typename?: 'PostToTermNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: TermNode;
};

/** Pagination metadata specific to &quot;PostToTermNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of PostToTermNodeConnection Nodes. */
export type PostToTermNodeConnectionPageInfo = PageInfo & TermNodeConnectionPageInfo & WpPageInfo & {
  __typename?: 'PostToTermNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostToTermNodeConnection connection */
export type PostToTermNodeConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Details for labels of the PostType */
export type PostTypeLabelDetails = {
  __typename?: 'PostTypeLabelDetails';
  /** Default is ‘Add New’ for both hierarchical and non-hierarchical types. */
  addNew?: Maybe<Scalars['String']['output']>;
  /** Label for adding a new singular item. */
  addNewItem?: Maybe<Scalars['String']['output']>;
  /** Label to signify all items in a submenu link. */
  allItems?: Maybe<Scalars['String']['output']>;
  /** Label for archives in nav menus */
  archives?: Maybe<Scalars['String']['output']>;
  /** Label for the attributes meta box. */
  attributes?: Maybe<Scalars['String']['output']>;
  /** Label for editing a singular item. */
  editItem?: Maybe<Scalars['String']['output']>;
  /** Label for the Featured Image meta box title. */
  featuredImage?: Maybe<Scalars['String']['output']>;
  /** Label for the table views hidden heading. */
  filterItemsList?: Maybe<Scalars['String']['output']>;
  /** Label for the media frame button. */
  insertIntoItem?: Maybe<Scalars['String']['output']>;
  /** Label for the table hidden heading. */
  itemsList?: Maybe<Scalars['String']['output']>;
  /** Label for the table pagination hidden heading. */
  itemsListNavigation?: Maybe<Scalars['String']['output']>;
  /** Label for the menu name. */
  menuName?: Maybe<Scalars['String']['output']>;
  /** General name for the post type, usually plural. */
  name?: Maybe<Scalars['String']['output']>;
  /** Label for the new item page title. */
  newItem?: Maybe<Scalars['String']['output']>;
  /** Label used when no items are found. */
  notFound?: Maybe<Scalars['String']['output']>;
  /** Label used when no items are in the trash. */
  notFoundInTrash?: Maybe<Scalars['String']['output']>;
  /** Label used to prefix parents of hierarchical items. */
  parentItemColon?: Maybe<Scalars['String']['output']>;
  /** Label for removing the featured image. */
  removeFeaturedImage?: Maybe<Scalars['String']['output']>;
  /** Label for searching plural items. */
  searchItems?: Maybe<Scalars['String']['output']>;
  /** Label for setting the featured image. */
  setFeaturedImage?: Maybe<Scalars['String']['output']>;
  /** Name for one object of this post type. */
  singularName?: Maybe<Scalars['String']['output']>;
  /** Label for the media frame filter. */
  uploadedToThisItem?: Maybe<Scalars['String']['output']>;
  /** Label in the media frame for using a featured image. */
  useFeaturedImage?: Maybe<Scalars['String']['output']>;
  /** Label for viewing a singular item. */
  viewItem?: Maybe<Scalars['String']['output']>;
  /** Label for viewing post type archives. */
  viewItems?: Maybe<Scalars['String']['output']>;
};

/** Content that supports a draft preview mode. Allows viewing unpublished changes before they are made publicly available. Previewing unpublished changes requires appropriate permissions. */
export type Previewable = {
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
};

/** The reading setting type */
export type ReadingSettings = {
  __typename?: 'ReadingSettings';
  /** The ID of the page that should display the latest posts */
  pageForPosts?: Maybe<Scalars['Int']['output']>;
  /** The ID of the page that should be displayed on the front page */
  pageOnFront?: Maybe<Scalars['Int']['output']>;
  /** Blog pages show at most. */
  postsPerPage?: Maybe<Scalars['Int']['output']>;
  /** What to show on the front page */
  showOnFront?: Maybe<Scalars['String']['output']>;
};

/** Input for the refreshJwtAuthToken mutation. */
export type RefreshJwtAuthTokenInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** A valid, previously issued JWT refresh token. If valid a new Auth token will be provided. If invalid, expired, revoked or otherwise invalid, a new AuthToken will not be provided. */
  jwtRefreshToken: Scalars['String']['input'];
};

/** The payload for the refreshJwtAuthToken mutation. */
export type RefreshJwtAuthTokenPayload = {
  __typename?: 'RefreshJwtAuthTokenPayload';
  /** JWT Token that can be used in future requests for Authentication */
  authToken?: Maybe<Scalars['String']['output']>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the registerUser mutation. */
export type RegisterUserInput = {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** The user's first name. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars['String']['input']>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** User's locale. */
  locale?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars['String']['input']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** If true, this will refresh the users JWT secret. */
  refreshJwtUserSecret?: InputMaybe<Scalars['Boolean']['input']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars['String']['input']>;
  /** If true, this will revoke the users JWT secret. If false, this will unrevoke the JWT secret AND issue a new one. To revoke, the user must have proper capabilities to edit users JWT secrets. */
  revokeJwtUserSecret?: InputMaybe<Scalars['Boolean']['input']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains the user's username. */
  username: Scalars['String']['input'];
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars['String']['input']>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the registerUser mutation. */
export type RegisterUserPayload = {
  __typename?: 'RegisterUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The User object mutation type. */
  user?: Maybe<User>;
};

/** Logical operators for filter conditions. Determines whether multiple filtering criteria should be combined with AND (all must match) or OR (any can match). */
export enum RelationEnum {
  /** All conditions must match (more restrictive filtering) */
  And = 'AND',
  /** Any condition can match (more inclusive filtering) */
  Or = 'OR'
}

/** Input for the resetUserPassword mutation. */
export type ResetUserPasswordInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Password reset key */
  key?: InputMaybe<Scalars['String']['input']>;
  /** The user's login (username). */
  login?: InputMaybe<Scalars['String']['input']>;
  /** The new password. */
  password?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the resetUserPassword mutation. */
export type ResetUserPasswordPayload = {
  __typename?: 'ResetUserPasswordPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The User object mutation type. */
  user?: Maybe<User>;
};

/** Input for the restoreComment mutation. */
export type RestoreCommentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the comment to be restored */
  id: Scalars['ID']['input'];
};

/** The payload for the restoreComment mutation. */
export type RestoreCommentPayload = {
  __typename?: 'RestoreCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The restored comment object */
  comment?: Maybe<Comment>;
  /** The ID of the restored comment */
  restoredId?: Maybe<Scalars['ID']['output']>;
};

/** The root mutation */
export type RootMutation = {
  __typename?: 'RootMutation';
  /** The createAdminCostPdf mutation */
  createAdminCostPdf?: Maybe<CreateAdminCostPdfPayload>;
  /** The createAliceHubProgram mutation */
  createAliceHubProgram?: Maybe<CreateAliceHubProgramPayload>;
  /** The createAliceReportPage mutation */
  createAliceReportPage?: Maybe<CreateAliceReportPagePayload>;
  /** The createAliceReportPdf mutation */
  createAliceReportPdf?: Maybe<CreateAliceReportPdfPayload>;
  /** The createAliceStats mutation */
  createAliceStats?: Maybe<CreateAliceStatsPayload>;
  /** The createCampaignToolkitAsset mutation */
  createCampaignToolkitAsset?: Maybe<CreateCampaignToolkitAssetPayload>;
  /** The createCategory mutation */
  createCategory?: Maybe<CreateCategoryPayload>;
  /** The createComment mutation */
  createComment?: Maybe<CreateCommentPayload>;
  /** The createCurrent990FormPdf mutation */
  createCurrent990FormPdf?: Maybe<CreateCurrent990FormPdfPayload>;
  /** The createDonorPrivacyPolicyPdf mutation */
  createDonorPrivacyPolicyPdf?: Maybe<CreateDonorPrivacyPolicyPdfPayload>;
  /** The createFaq mutation */
  createFaq?: Maybe<CreateFaqPayload>;
  /** The createFourPillarsHeroComponent mutation */
  createFourPillarsHeroComponent?: Maybe<CreateFourPillarsHeroComponentPayload>;
  /** The createFourPillarsPreview mutation */
  createFourPillarsPreview?: Maybe<CreateFourPillarsPreviewPayload>;
  /** The createGetInvolvedHero mutation */
  createGetInvolvedHero?: Maybe<CreateGetInvolvedHeroPayload>;
  /** The createGiftAcceptancePolicyPdf mutation */
  createGiftAcceptancePolicyPdf?: Maybe<CreateGiftAcceptancePolicyPdfPayload>;
  /** The createGirlScoutsComponent mutation */
  createGirlScoutsComponent?: Maybe<CreateGirlScoutsComponentPayload>;
  /** The createHeroComponentOurImpactPage mutation */
  createHeroComponentOurImpactPage?: Maybe<CreateHeroComponentOurImpactPagePayload>;
  /** The createHomePageHero mutation */
  createHomePageHero?: Maybe<CreateHomePageHeroPayload>;
  /** The createHowToContributeComponent mutation */
  createHowToContributeComponent?: Maybe<CreateHowToContributeComponentPayload>;
  /** The createImpactCarousel mutation */
  createImpactCarousel?: Maybe<CreateImpactCarouselPayload>;
  /** The createImpactStatistic mutation */
  createImpactStatistic?: Maybe<CreateImpactStatisticPayload>;
  /** The createIndividualsPageHero mutation */
  createIndividualsPageHero?: Maybe<CreateIndividualsPageHeroPayload>;
  /** The createMediaItem mutation */
  createMediaItem?: Maybe<CreateMediaItemPayload>;
  /** The createMobileFoodPantryComponent mutation */
  createMobileFoodPantryComponent?: Maybe<CreateMobileFoodPantryComponentPayload>;
  /** The createNorthwoodsAirLifeline mutation */
  createNorthwoodsAirLifeline?: Maybe<CreateNorthwoodsAirLifelinePayload>;
  /** The createOurImpactHomePage mutation */
  createOurImpactHomePage?: Maybe<CreateOurImpactHomePagePayload>;
  /** The createPage mutation */
  createPage?: Maybe<CreatePagePayload>;
  /** The createPartnerPageHero mutation */
  createPartnerPageHero?: Maybe<CreatePartnerPageHeroPayload>;
  /** The createPartnersTickerItem mutation */
  createPartnersTickerItem?: Maybe<CreatePartnersTickerItemPayload>;
  /** The createPost mutation */
  createPost?: Maybe<CreatePostPayload>;
  /** The createPostFormat mutation */
  createPostFormat?: Maybe<CreatePostFormatPayload>;
  /** The createTag mutation */
  createTag?: Maybe<CreateTagPayload>;
  /** The createUser mutation */
  createUser?: Maybe<CreateUserPayload>;
  /** The createUwContactInfo mutation */
  createUwContactInfo?: Maybe<CreateUwContactInfoPayload>;
  /** The createValuesHistory mutation */
  createValuesHistory?: Maybe<CreateValuesHistoryPayload>;
  /** The createVitaTaxPrep mutation */
  createVitaTaxPrep?: Maybe<CreateVitaTaxPrepPayload>;
  /** The createYmcaComponent mutation */
  createYmcaComponent?: Maybe<CreateYmcaComponentPayload>;
  /** The deleteAdminCostPdf mutation */
  deleteAdminCostPdf?: Maybe<DeleteAdminCostPdfPayload>;
  /** The deleteAliceHubProgram mutation */
  deleteAliceHubProgram?: Maybe<DeleteAliceHubProgramPayload>;
  /** The deleteAliceReportPage mutation */
  deleteAliceReportPage?: Maybe<DeleteAliceReportPagePayload>;
  /** The deleteAliceReportPdf mutation */
  deleteAliceReportPdf?: Maybe<DeleteAliceReportPdfPayload>;
  /** The deleteAliceStats mutation */
  deleteAliceStats?: Maybe<DeleteAliceStatsPayload>;
  /** The deleteCampaignToolkitAsset mutation */
  deleteCampaignToolkitAsset?: Maybe<DeleteCampaignToolkitAssetPayload>;
  /** The deleteCategory mutation */
  deleteCategory?: Maybe<DeleteCategoryPayload>;
  /** The deleteComment mutation */
  deleteComment?: Maybe<DeleteCommentPayload>;
  /** The deleteCurrent990FormPdf mutation */
  deleteCurrent990FormPdf?: Maybe<DeleteCurrent990FormPdfPayload>;
  /** The deleteDonorPrivacyPolicyPdf mutation */
  deleteDonorPrivacyPolicyPdf?: Maybe<DeleteDonorPrivacyPolicyPdfPayload>;
  /** The deleteFaq mutation */
  deleteFaq?: Maybe<DeleteFaqPayload>;
  /** The deleteFourPillarsHeroComponent mutation */
  deleteFourPillarsHeroComponent?: Maybe<DeleteFourPillarsHeroComponentPayload>;
  /** The deleteFourPillarsPreview mutation */
  deleteFourPillarsPreview?: Maybe<DeleteFourPillarsPreviewPayload>;
  /** The deleteGetInvolvedHero mutation */
  deleteGetInvolvedHero?: Maybe<DeleteGetInvolvedHeroPayload>;
  /** The deleteGiftAcceptancePolicyPdf mutation */
  deleteGiftAcceptancePolicyPdf?: Maybe<DeleteGiftAcceptancePolicyPdfPayload>;
  /** The deleteGirlScoutsComponent mutation */
  deleteGirlScoutsComponent?: Maybe<DeleteGirlScoutsComponentPayload>;
  /** The deleteHeroComponentOurImpactPage mutation */
  deleteHeroComponentOurImpactPage?: Maybe<DeleteHeroComponentOurImpactPagePayload>;
  /** The deleteHomePageHero mutation */
  deleteHomePageHero?: Maybe<DeleteHomePageHeroPayload>;
  /** The deleteHowToContributeComponent mutation */
  deleteHowToContributeComponent?: Maybe<DeleteHowToContributeComponentPayload>;
  /** The deleteImpactCarousel mutation */
  deleteImpactCarousel?: Maybe<DeleteImpactCarouselPayload>;
  /** The deleteImpactStatistic mutation */
  deleteImpactStatistic?: Maybe<DeleteImpactStatisticPayload>;
  /** The deleteIndividualsPageHero mutation */
  deleteIndividualsPageHero?: Maybe<DeleteIndividualsPageHeroPayload>;
  /** The deleteMediaItem mutation */
  deleteMediaItem?: Maybe<DeleteMediaItemPayload>;
  /** The deleteMobileFoodPantryComponent mutation */
  deleteMobileFoodPantryComponent?: Maybe<DeleteMobileFoodPantryComponentPayload>;
  /** The deleteNorthwoodsAirLifeline mutation */
  deleteNorthwoodsAirLifeline?: Maybe<DeleteNorthwoodsAirLifelinePayload>;
  /** The deleteOurImpactHomePage mutation */
  deleteOurImpactHomePage?: Maybe<DeleteOurImpactHomePagePayload>;
  /** The deletePage mutation */
  deletePage?: Maybe<DeletePagePayload>;
  /** The deletePartnerPageHero mutation */
  deletePartnerPageHero?: Maybe<DeletePartnerPageHeroPayload>;
  /** The deletePartnersTickerItem mutation */
  deletePartnersTickerItem?: Maybe<DeletePartnersTickerItemPayload>;
  /** The deletePost mutation */
  deletePost?: Maybe<DeletePostPayload>;
  /** The deletePostFormat mutation */
  deletePostFormat?: Maybe<DeletePostFormatPayload>;
  /** The deleteTag mutation */
  deleteTag?: Maybe<DeleteTagPayload>;
  /** The deleteUser mutation */
  deleteUser?: Maybe<DeleteUserPayload>;
  /** The deleteUwContactInfo mutation */
  deleteUwContactInfo?: Maybe<DeleteUwContactInfoPayload>;
  /** The deleteValuesHistory mutation */
  deleteValuesHistory?: Maybe<DeleteValuesHistoryPayload>;
  /** The deleteVitaTaxPrep mutation */
  deleteVitaTaxPrep?: Maybe<DeleteVitaTaxPrepPayload>;
  /** The deleteYmcaComponent mutation */
  deleteYmcaComponent?: Maybe<DeleteYmcaComponentPayload>;
  /** The generateAuthorizationCode mutation */
  generateAuthorizationCode?: Maybe<GenerateAuthorizationCodePayload>;
  /** Increase the count. */
  increaseCount?: Maybe<Scalars['Int']['output']>;
  /** Login a user. Request for an authToken and User details in response */
  login?: Maybe<LoginPayload>;
  /** Use a valid JWT Refresh token to retrieve a new JWT Auth Token */
  refreshJwtAuthToken?: Maybe<RefreshJwtAuthTokenPayload>;
  /** The registerUser mutation */
  registerUser?: Maybe<RegisterUserPayload>;
  /** The resetUserPassword mutation */
  resetUserPassword?: Maybe<ResetUserPasswordPayload>;
  /** The restoreComment mutation */
  restoreComment?: Maybe<RestoreCommentPayload>;
  /** Send password reset email to user */
  sendPasswordResetEmail?: Maybe<SendPasswordResetEmailPayload>;
  /** The updateAdminCostPdf mutation */
  updateAdminCostPdf?: Maybe<UpdateAdminCostPdfPayload>;
  /** The updateAliceHubProgram mutation */
  updateAliceHubProgram?: Maybe<UpdateAliceHubProgramPayload>;
  /** The updateAliceReportPage mutation */
  updateAliceReportPage?: Maybe<UpdateAliceReportPagePayload>;
  /** The updateAliceReportPdf mutation */
  updateAliceReportPdf?: Maybe<UpdateAliceReportPdfPayload>;
  /** The updateAliceStats mutation */
  updateAliceStats?: Maybe<UpdateAliceStatsPayload>;
  /** The updateCampaignToolkitAsset mutation */
  updateCampaignToolkitAsset?: Maybe<UpdateCampaignToolkitAssetPayload>;
  /** The updateCategory mutation */
  updateCategory?: Maybe<UpdateCategoryPayload>;
  /** The updateComment mutation */
  updateComment?: Maybe<UpdateCommentPayload>;
  /** The updateCurrent990FormPdf mutation */
  updateCurrent990FormPdf?: Maybe<UpdateCurrent990FormPdfPayload>;
  /** The updateDonorPrivacyPolicyPdf mutation */
  updateDonorPrivacyPolicyPdf?: Maybe<UpdateDonorPrivacyPolicyPdfPayload>;
  /** The updateFaq mutation */
  updateFaq?: Maybe<UpdateFaqPayload>;
  /** The updateFourPillarsHeroComponent mutation */
  updateFourPillarsHeroComponent?: Maybe<UpdateFourPillarsHeroComponentPayload>;
  /** The updateFourPillarsPreview mutation */
  updateFourPillarsPreview?: Maybe<UpdateFourPillarsPreviewPayload>;
  /** The updateGetInvolvedHero mutation */
  updateGetInvolvedHero?: Maybe<UpdateGetInvolvedHeroPayload>;
  /** The updateGiftAcceptancePolicyPdf mutation */
  updateGiftAcceptancePolicyPdf?: Maybe<UpdateGiftAcceptancePolicyPdfPayload>;
  /** The updateGirlScoutsComponent mutation */
  updateGirlScoutsComponent?: Maybe<UpdateGirlScoutsComponentPayload>;
  /** The updateHeroComponentOurImpactPage mutation */
  updateHeroComponentOurImpactPage?: Maybe<UpdateHeroComponentOurImpactPagePayload>;
  /** The updateHomePageHero mutation */
  updateHomePageHero?: Maybe<UpdateHomePageHeroPayload>;
  /** The updateHowToContributeComponent mutation */
  updateHowToContributeComponent?: Maybe<UpdateHowToContributeComponentPayload>;
  /** The updateImpactCarousel mutation */
  updateImpactCarousel?: Maybe<UpdateImpactCarouselPayload>;
  /** The updateImpactStatistic mutation */
  updateImpactStatistic?: Maybe<UpdateImpactStatisticPayload>;
  /** The updateIndividualsPageHero mutation */
  updateIndividualsPageHero?: Maybe<UpdateIndividualsPageHeroPayload>;
  /** The updateMediaItem mutation */
  updateMediaItem?: Maybe<UpdateMediaItemPayload>;
  /** The updateMobileFoodPantryComponent mutation */
  updateMobileFoodPantryComponent?: Maybe<UpdateMobileFoodPantryComponentPayload>;
  /** The updateNorthwoodsAirLifeline mutation */
  updateNorthwoodsAirLifeline?: Maybe<UpdateNorthwoodsAirLifelinePayload>;
  /** The updateOurImpactHomePage mutation */
  updateOurImpactHomePage?: Maybe<UpdateOurImpactHomePagePayload>;
  /** The updatePage mutation */
  updatePage?: Maybe<UpdatePagePayload>;
  /** The updatePartnerPageHero mutation */
  updatePartnerPageHero?: Maybe<UpdatePartnerPageHeroPayload>;
  /** The updatePartnersTickerItem mutation */
  updatePartnersTickerItem?: Maybe<UpdatePartnersTickerItemPayload>;
  /** The updatePost mutation */
  updatePost?: Maybe<UpdatePostPayload>;
  /** The updatePostFormat mutation */
  updatePostFormat?: Maybe<UpdatePostFormatPayload>;
  /** The updateSettings mutation */
  updateSettings?: Maybe<UpdateSettingsPayload>;
  /** The updateTag mutation */
  updateTag?: Maybe<UpdateTagPayload>;
  /** The updateUser mutation */
  updateUser?: Maybe<UpdateUserPayload>;
  /** The updateUwContactInfo mutation */
  updateUwContactInfo?: Maybe<UpdateUwContactInfoPayload>;
  /** The updateValuesHistory mutation */
  updateValuesHistory?: Maybe<UpdateValuesHistoryPayload>;
  /** The updateVitaTaxPrep mutation */
  updateVitaTaxPrep?: Maybe<UpdateVitaTaxPrepPayload>;
  /** The updateYmcaComponent mutation */
  updateYmcaComponent?: Maybe<UpdateYmcaComponentPayload>;
};


/** The root mutation */
export type RootMutationCreateAdminCostPdfArgs = {
  input: CreateAdminCostPdfInput;
};


/** The root mutation */
export type RootMutationCreateAliceHubProgramArgs = {
  input: CreateAliceHubProgramInput;
};


/** The root mutation */
export type RootMutationCreateAliceReportPageArgs = {
  input: CreateAliceReportPageInput;
};


/** The root mutation */
export type RootMutationCreateAliceReportPdfArgs = {
  input: CreateAliceReportPdfInput;
};


/** The root mutation */
export type RootMutationCreateAliceStatsArgs = {
  input: CreateAliceStatsInput;
};


/** The root mutation */
export type RootMutationCreateCampaignToolkitAssetArgs = {
  input: CreateCampaignToolkitAssetInput;
};


/** The root mutation */
export type RootMutationCreateCategoryArgs = {
  input: CreateCategoryInput;
};


/** The root mutation */
export type RootMutationCreateCommentArgs = {
  input: CreateCommentInput;
};


/** The root mutation */
export type RootMutationCreateCurrent990FormPdfArgs = {
  input: CreateCurrent990FormPdfInput;
};


/** The root mutation */
export type RootMutationCreateDonorPrivacyPolicyPdfArgs = {
  input: CreateDonorPrivacyPolicyPdfInput;
};


/** The root mutation */
export type RootMutationCreateFaqArgs = {
  input: CreateFaqInput;
};


/** The root mutation */
export type RootMutationCreateFourPillarsHeroComponentArgs = {
  input: CreateFourPillarsHeroComponentInput;
};


/** The root mutation */
export type RootMutationCreateFourPillarsPreviewArgs = {
  input: CreateFourPillarsPreviewInput;
};


/** The root mutation */
export type RootMutationCreateGetInvolvedHeroArgs = {
  input: CreateGetInvolvedHeroInput;
};


/** The root mutation */
export type RootMutationCreateGiftAcceptancePolicyPdfArgs = {
  input: CreateGiftAcceptancePolicyPdfInput;
};


/** The root mutation */
export type RootMutationCreateGirlScoutsComponentArgs = {
  input: CreateGirlScoutsComponentInput;
};


/** The root mutation */
export type RootMutationCreateHeroComponentOurImpactPageArgs = {
  input: CreateHeroComponentOurImpactPageInput;
};


/** The root mutation */
export type RootMutationCreateHomePageHeroArgs = {
  input: CreateHomePageHeroInput;
};


/** The root mutation */
export type RootMutationCreateHowToContributeComponentArgs = {
  input: CreateHowToContributeComponentInput;
};


/** The root mutation */
export type RootMutationCreateImpactCarouselArgs = {
  input: CreateImpactCarouselInput;
};


/** The root mutation */
export type RootMutationCreateImpactStatisticArgs = {
  input: CreateImpactStatisticInput;
};


/** The root mutation */
export type RootMutationCreateIndividualsPageHeroArgs = {
  input: CreateIndividualsPageHeroInput;
};


/** The root mutation */
export type RootMutationCreateMediaItemArgs = {
  input: CreateMediaItemInput;
};


/** The root mutation */
export type RootMutationCreateMobileFoodPantryComponentArgs = {
  input: CreateMobileFoodPantryComponentInput;
};


/** The root mutation */
export type RootMutationCreateNorthwoodsAirLifelineArgs = {
  input: CreateNorthwoodsAirLifelineInput;
};


/** The root mutation */
export type RootMutationCreateOurImpactHomePageArgs = {
  input: CreateOurImpactHomePageInput;
};


/** The root mutation */
export type RootMutationCreatePageArgs = {
  input: CreatePageInput;
};


/** The root mutation */
export type RootMutationCreatePartnerPageHeroArgs = {
  input: CreatePartnerPageHeroInput;
};


/** The root mutation */
export type RootMutationCreatePartnersTickerItemArgs = {
  input: CreatePartnersTickerItemInput;
};


/** The root mutation */
export type RootMutationCreatePostArgs = {
  input: CreatePostInput;
};


/** The root mutation */
export type RootMutationCreatePostFormatArgs = {
  input: CreatePostFormatInput;
};


/** The root mutation */
export type RootMutationCreateTagArgs = {
  input: CreateTagInput;
};


/** The root mutation */
export type RootMutationCreateUserArgs = {
  input: CreateUserInput;
};


/** The root mutation */
export type RootMutationCreateUwContactInfoArgs = {
  input: CreateUwContactInfoInput;
};


/** The root mutation */
export type RootMutationCreateValuesHistoryArgs = {
  input: CreateValuesHistoryInput;
};


/** The root mutation */
export type RootMutationCreateVitaTaxPrepArgs = {
  input: CreateVitaTaxPrepInput;
};


/** The root mutation */
export type RootMutationCreateYmcaComponentArgs = {
  input: CreateYmcaComponentInput;
};


/** The root mutation */
export type RootMutationDeleteAdminCostPdfArgs = {
  input: DeleteAdminCostPdfInput;
};


/** The root mutation */
export type RootMutationDeleteAliceHubProgramArgs = {
  input: DeleteAliceHubProgramInput;
};


/** The root mutation */
export type RootMutationDeleteAliceReportPageArgs = {
  input: DeleteAliceReportPageInput;
};


/** The root mutation */
export type RootMutationDeleteAliceReportPdfArgs = {
  input: DeleteAliceReportPdfInput;
};


/** The root mutation */
export type RootMutationDeleteAliceStatsArgs = {
  input: DeleteAliceStatsInput;
};


/** The root mutation */
export type RootMutationDeleteCampaignToolkitAssetArgs = {
  input: DeleteCampaignToolkitAssetInput;
};


/** The root mutation */
export type RootMutationDeleteCategoryArgs = {
  input: DeleteCategoryInput;
};


/** The root mutation */
export type RootMutationDeleteCommentArgs = {
  input: DeleteCommentInput;
};


/** The root mutation */
export type RootMutationDeleteCurrent990FormPdfArgs = {
  input: DeleteCurrent990FormPdfInput;
};


/** The root mutation */
export type RootMutationDeleteDonorPrivacyPolicyPdfArgs = {
  input: DeleteDonorPrivacyPolicyPdfInput;
};


/** The root mutation */
export type RootMutationDeleteFaqArgs = {
  input: DeleteFaqInput;
};


/** The root mutation */
export type RootMutationDeleteFourPillarsHeroComponentArgs = {
  input: DeleteFourPillarsHeroComponentInput;
};


/** The root mutation */
export type RootMutationDeleteFourPillarsPreviewArgs = {
  input: DeleteFourPillarsPreviewInput;
};


/** The root mutation */
export type RootMutationDeleteGetInvolvedHeroArgs = {
  input: DeleteGetInvolvedHeroInput;
};


/** The root mutation */
export type RootMutationDeleteGiftAcceptancePolicyPdfArgs = {
  input: DeleteGiftAcceptancePolicyPdfInput;
};


/** The root mutation */
export type RootMutationDeleteGirlScoutsComponentArgs = {
  input: DeleteGirlScoutsComponentInput;
};


/** The root mutation */
export type RootMutationDeleteHeroComponentOurImpactPageArgs = {
  input: DeleteHeroComponentOurImpactPageInput;
};


/** The root mutation */
export type RootMutationDeleteHomePageHeroArgs = {
  input: DeleteHomePageHeroInput;
};


/** The root mutation */
export type RootMutationDeleteHowToContributeComponentArgs = {
  input: DeleteHowToContributeComponentInput;
};


/** The root mutation */
export type RootMutationDeleteImpactCarouselArgs = {
  input: DeleteImpactCarouselInput;
};


/** The root mutation */
export type RootMutationDeleteImpactStatisticArgs = {
  input: DeleteImpactStatisticInput;
};


/** The root mutation */
export type RootMutationDeleteIndividualsPageHeroArgs = {
  input: DeleteIndividualsPageHeroInput;
};


/** The root mutation */
export type RootMutationDeleteMediaItemArgs = {
  input: DeleteMediaItemInput;
};


/** The root mutation */
export type RootMutationDeleteMobileFoodPantryComponentArgs = {
  input: DeleteMobileFoodPantryComponentInput;
};


/** The root mutation */
export type RootMutationDeleteNorthwoodsAirLifelineArgs = {
  input: DeleteNorthwoodsAirLifelineInput;
};


/** The root mutation */
export type RootMutationDeleteOurImpactHomePageArgs = {
  input: DeleteOurImpactHomePageInput;
};


/** The root mutation */
export type RootMutationDeletePageArgs = {
  input: DeletePageInput;
};


/** The root mutation */
export type RootMutationDeletePartnerPageHeroArgs = {
  input: DeletePartnerPageHeroInput;
};


/** The root mutation */
export type RootMutationDeletePartnersTickerItemArgs = {
  input: DeletePartnersTickerItemInput;
};


/** The root mutation */
export type RootMutationDeletePostArgs = {
  input: DeletePostInput;
};


/** The root mutation */
export type RootMutationDeletePostFormatArgs = {
  input: DeletePostFormatInput;
};


/** The root mutation */
export type RootMutationDeleteTagArgs = {
  input: DeleteTagInput;
};


/** The root mutation */
export type RootMutationDeleteUserArgs = {
  input: DeleteUserInput;
};


/** The root mutation */
export type RootMutationDeleteUwContactInfoArgs = {
  input: DeleteUwContactInfoInput;
};


/** The root mutation */
export type RootMutationDeleteValuesHistoryArgs = {
  input: DeleteValuesHistoryInput;
};


/** The root mutation */
export type RootMutationDeleteVitaTaxPrepArgs = {
  input: DeleteVitaTaxPrepInput;
};


/** The root mutation */
export type RootMutationDeleteYmcaComponentArgs = {
  input: DeleteYmcaComponentInput;
};


/** The root mutation */
export type RootMutationGenerateAuthorizationCodeArgs = {
  input: GenerateAuthorizationCodeInput;
};


/** The root mutation */
export type RootMutationIncreaseCountArgs = {
  count?: InputMaybe<Scalars['Int']['input']>;
};


/** The root mutation */
export type RootMutationLoginArgs = {
  input: LoginInput;
};


/** The root mutation */
export type RootMutationRefreshJwtAuthTokenArgs = {
  input: RefreshJwtAuthTokenInput;
};


/** The root mutation */
export type RootMutationRegisterUserArgs = {
  input: RegisterUserInput;
};


/** The root mutation */
export type RootMutationResetUserPasswordArgs = {
  input: ResetUserPasswordInput;
};


/** The root mutation */
export type RootMutationRestoreCommentArgs = {
  input: RestoreCommentInput;
};


/** The root mutation */
export type RootMutationSendPasswordResetEmailArgs = {
  input: SendPasswordResetEmailInput;
};


/** The root mutation */
export type RootMutationUpdateAdminCostPdfArgs = {
  input: UpdateAdminCostPdfInput;
};


/** The root mutation */
export type RootMutationUpdateAliceHubProgramArgs = {
  input: UpdateAliceHubProgramInput;
};


/** The root mutation */
export type RootMutationUpdateAliceReportPageArgs = {
  input: UpdateAliceReportPageInput;
};


/** The root mutation */
export type RootMutationUpdateAliceReportPdfArgs = {
  input: UpdateAliceReportPdfInput;
};


/** The root mutation */
export type RootMutationUpdateAliceStatsArgs = {
  input: UpdateAliceStatsInput;
};


/** The root mutation */
export type RootMutationUpdateCampaignToolkitAssetArgs = {
  input: UpdateCampaignToolkitAssetInput;
};


/** The root mutation */
export type RootMutationUpdateCategoryArgs = {
  input: UpdateCategoryInput;
};


/** The root mutation */
export type RootMutationUpdateCommentArgs = {
  input: UpdateCommentInput;
};


/** The root mutation */
export type RootMutationUpdateCurrent990FormPdfArgs = {
  input: UpdateCurrent990FormPdfInput;
};


/** The root mutation */
export type RootMutationUpdateDonorPrivacyPolicyPdfArgs = {
  input: UpdateDonorPrivacyPolicyPdfInput;
};


/** The root mutation */
export type RootMutationUpdateFaqArgs = {
  input: UpdateFaqInput;
};


/** The root mutation */
export type RootMutationUpdateFourPillarsHeroComponentArgs = {
  input: UpdateFourPillarsHeroComponentInput;
};


/** The root mutation */
export type RootMutationUpdateFourPillarsPreviewArgs = {
  input: UpdateFourPillarsPreviewInput;
};


/** The root mutation */
export type RootMutationUpdateGetInvolvedHeroArgs = {
  input: UpdateGetInvolvedHeroInput;
};


/** The root mutation */
export type RootMutationUpdateGiftAcceptancePolicyPdfArgs = {
  input: UpdateGiftAcceptancePolicyPdfInput;
};


/** The root mutation */
export type RootMutationUpdateGirlScoutsComponentArgs = {
  input: UpdateGirlScoutsComponentInput;
};


/** The root mutation */
export type RootMutationUpdateHeroComponentOurImpactPageArgs = {
  input: UpdateHeroComponentOurImpactPageInput;
};


/** The root mutation */
export type RootMutationUpdateHomePageHeroArgs = {
  input: UpdateHomePageHeroInput;
};


/** The root mutation */
export type RootMutationUpdateHowToContributeComponentArgs = {
  input: UpdateHowToContributeComponentInput;
};


/** The root mutation */
export type RootMutationUpdateImpactCarouselArgs = {
  input: UpdateImpactCarouselInput;
};


/** The root mutation */
export type RootMutationUpdateImpactStatisticArgs = {
  input: UpdateImpactStatisticInput;
};


/** The root mutation */
export type RootMutationUpdateIndividualsPageHeroArgs = {
  input: UpdateIndividualsPageHeroInput;
};


/** The root mutation */
export type RootMutationUpdateMediaItemArgs = {
  input: UpdateMediaItemInput;
};


/** The root mutation */
export type RootMutationUpdateMobileFoodPantryComponentArgs = {
  input: UpdateMobileFoodPantryComponentInput;
};


/** The root mutation */
export type RootMutationUpdateNorthwoodsAirLifelineArgs = {
  input: UpdateNorthwoodsAirLifelineInput;
};


/** The root mutation */
export type RootMutationUpdateOurImpactHomePageArgs = {
  input: UpdateOurImpactHomePageInput;
};


/** The root mutation */
export type RootMutationUpdatePageArgs = {
  input: UpdatePageInput;
};


/** The root mutation */
export type RootMutationUpdatePartnerPageHeroArgs = {
  input: UpdatePartnerPageHeroInput;
};


/** The root mutation */
export type RootMutationUpdatePartnersTickerItemArgs = {
  input: UpdatePartnersTickerItemInput;
};


/** The root mutation */
export type RootMutationUpdatePostArgs = {
  input: UpdatePostInput;
};


/** The root mutation */
export type RootMutationUpdatePostFormatArgs = {
  input: UpdatePostFormatInput;
};


/** The root mutation */
export type RootMutationUpdateSettingsArgs = {
  input: UpdateSettingsInput;
};


/** The root mutation */
export type RootMutationUpdateTagArgs = {
  input: UpdateTagInput;
};


/** The root mutation */
export type RootMutationUpdateUserArgs = {
  input: UpdateUserInput;
};


/** The root mutation */
export type RootMutationUpdateUwContactInfoArgs = {
  input: UpdateUwContactInfoInput;
};


/** The root mutation */
export type RootMutationUpdateValuesHistoryArgs = {
  input: UpdateValuesHistoryInput;
};


/** The root mutation */
export type RootMutationUpdateVitaTaxPrepArgs = {
  input: UpdateVitaTaxPrepInput;
};


/** The root mutation */
export type RootMutationUpdateYmcaComponentArgs = {
  input: UpdateYmcaComponentInput;
};

/** The root entry point into the Graph */
export type RootQuery = {
  __typename?: 'RootQuery';
  /** An object of the adminCostPdf Type.  */
  adminCostPdf?: Maybe<AdminCostPdf>;
  /**
   * A adminCostPdf object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  adminCostPdfBy?: Maybe<AdminCostPdf>;
  /** Connection between the RootQuery type and the adminCostPdf type */
  adminCostPdfs?: Maybe<RootQueryToAdminCostPdfConnection>;
  /** An object of the aliceHubProgram Type.  */
  aliceHubProgram?: Maybe<AliceHubProgram>;
  /**
   * A aliceHubProgram object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  aliceHubProgramBy?: Maybe<AliceHubProgram>;
  /** Connection between the RootQuery type and the aliceHubProgram type */
  aliceHubPrograms?: Maybe<RootQueryToAliceHubProgramConnection>;
  /** An object of the aliceReportPage Type.  */
  aliceReportPage?: Maybe<AliceReportPage>;
  /**
   * A aliceReportPage object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  aliceReportPageBy?: Maybe<AliceReportPage>;
  /** Connection between the RootQuery type and the aliceReportPage type */
  aliceReportPages?: Maybe<RootQueryToAliceReportPageConnection>;
  /** An object of the aliceReportPdf Type.  */
  aliceReportPdf?: Maybe<AliceReportPdf>;
  /**
   * A aliceReportPdf object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  aliceReportPdfBy?: Maybe<AliceReportPdf>;
  /** Connection between the RootQuery type and the aliceReportPdf type */
  aliceReportPdfs?: Maybe<RootQueryToAliceReportPdfConnection>;
  /** An object of the aliceStats Type.  */
  aliceStats?: Maybe<AliceStats>;
  /**
   * A aliceStats object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  aliceStatsBy?: Maybe<AliceStats>;
  /** Connection between the RootQuery type and the aliceStats type */
  allAliceStats?: Maybe<RootQueryToAliceStatsConnection>;
  /** Entry point to get all settings for the site */
  allSettings?: Maybe<Settings>;
  /** An object of the campaignToolkitAsset Type.  */
  campaignToolkitAsset?: Maybe<CampaignToolkitAsset>;
  /**
   * A campaignToolkitAsset object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  campaignToolkitAssetBy?: Maybe<CampaignToolkitAsset>;
  /** Connection between the RootQuery type and the campaignToolkitAsset type */
  campaignToolkitAssets?: Maybe<RootQueryToCampaignToolkitAssetConnection>;
  /** Connection between the RootQuery type and the category type */
  categories?: Maybe<RootQueryToCategoryConnection>;
  /** A 0bject */
  category?: Maybe<Category>;
  /** Returns a Comment */
  comment?: Maybe<Comment>;
  /** Connection between the RootQuery type and the Comment type */
  comments?: Maybe<RootQueryToCommentConnection>;
  /** A node used to manage content */
  contentNode?: Maybe<ContentNode>;
  /** Connection between the RootQuery type and the ContentNode type */
  contentNodes?: Maybe<RootQueryToContentNodeConnection>;
  /** Fetch a Content Type node by unique Identifier */
  contentType?: Maybe<ContentType>;
  /** Connection between the RootQuery type and the ContentType type */
  contentTypes?: Maybe<RootQueryToContentTypeConnection>;
  /** An object of the current990FormPdf Type.  */
  current990FormPdf?: Maybe<Current990FormPdf>;
  /**
   * A current990FormPdf object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  current990FormPdfBy?: Maybe<Current990FormPdf>;
  /** Connection between the RootQuery type and the current990FormPdf type */
  current990FormPdfs?: Maybe<RootQueryToCurrent990FormPdfConnection>;
  /** Fields of the &#039;DiscussionSettings&#039; settings group */
  discussionSettings?: Maybe<DiscussionSettings>;
  /** An object of the donorPrivacyPolicyPdf Type.  */
  donorPrivacyPolicyPdf?: Maybe<DonorPrivacyPolicyPdf>;
  /**
   * A donorPrivacyPolicyPdf object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  donorPrivacyPolicyPdfBy?: Maybe<DonorPrivacyPolicyPdf>;
  /** Connection between the RootQuery type and the donorPrivacyPolicyPdf type */
  donorPrivacyPolicyPdfs?: Maybe<RootQueryToDonorPrivacyPolicyPdfConnection>;
  /** An object of the faq Type.  */
  faq?: Maybe<Faq>;
  /**
   * A faq object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  faqBy?: Maybe<Faq>;
  /** Connection between the RootQuery type and the faq type */
  faqs?: Maybe<RootQueryToFaqConnection>;
  /** An object of the fourPillarsHeroComponent Type.  */
  fourPillarsHeroComponent?: Maybe<FourPillarsHeroComponent>;
  /**
   * A fourPillarsHeroComponent object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  fourPillarsHeroComponentBy?: Maybe<FourPillarsHeroComponent>;
  /** Connection between the RootQuery type and the fourPillarsHeroComponent type */
  fourPillarsHeroComponents?: Maybe<RootQueryToFourPillarsHeroComponentConnection>;
  /** An object of the fourPillarsPreview Type.  */
  fourPillarsPreview?: Maybe<FourPillarsPreview>;
  /**
   * A fourPillarsPreview object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  fourPillarsPreviewBy?: Maybe<FourPillarsPreview>;
  /** Connection between the RootQuery type and the fourPillarsPreview type */
  fourPillarsPreviews?: Maybe<RootQueryToFourPillarsPreviewConnection>;
  /** Fields of the &#039;GeneralSettings&#039; settings group */
  generalSettings?: Maybe<GeneralSettings>;
  /** An object of the getInvolvedHero Type.  */
  getInvolvedHero?: Maybe<GetInvolvedHero>;
  /**
   * A getInvolvedHero object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  getInvolvedHeroBy?: Maybe<GetInvolvedHero>;
  /** Connection between the RootQuery type and the getInvolvedHero type */
  getInvolvedHeroes?: Maybe<RootQueryToGetInvolvedHeroConnection>;
  /** An object of the giftAcceptancePolicyPdf Type.  */
  giftAcceptancePolicyPdf?: Maybe<GiftAcceptancePolicyPdf>;
  /**
   * A giftAcceptancePolicyPdf object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  giftAcceptancePolicyPdfBy?: Maybe<GiftAcceptancePolicyPdf>;
  /** Connection between the RootQuery type and the giftAcceptancePolicyPdf type */
  giftAcceptancePolicyPdfs?: Maybe<RootQueryToGiftAcceptancePolicyPdfConnection>;
  /** An object of the girlScoutsComponent Type.  */
  girlScoutsComponent?: Maybe<GirlScoutsComponent>;
  /**
   * A girlScoutsComponent object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  girlScoutsComponentBy?: Maybe<GirlScoutsComponent>;
  /** Connection between the RootQuery type and the girlScoutsComponent type */
  girlScoutsComponents?: Maybe<RootQueryToGirlScoutsComponentConnection>;
  /** Returns the stylesheet resulting of merging core, theme, and user data. */
  globalStylesheet?: Maybe<Scalars['String']['output']>;
  /** An object of the heroComponentOurImpactPage Type.  */
  heroComponentOurImpactPage?: Maybe<HeroComponentOurImpactPage>;
  /**
   * A heroComponentOurImpactPage object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  heroComponentOurImpactPageBy?: Maybe<HeroComponentOurImpactPage>;
  /** Connection between the RootQuery type and the heroComponentOurImpactPage type */
  heroComponentOurImpactPages?: Maybe<RootQueryToHeroComponentOurImpactPageConnection>;
  /** An object of the homePageHero Type.  */
  homePageHero?: Maybe<HomePageHero>;
  /**
   * A homePageHero object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  homePageHeroBy?: Maybe<HomePageHero>;
  /** Connection between the RootQuery type and the homePageHero type */
  homePageHeroes?: Maybe<RootQueryToHomePageHeroConnection>;
  /** An object of the howToContributeComponent Type.  */
  howToContributeComponent?: Maybe<HowToContributeComponent>;
  /**
   * A howToContributeComponent object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  howToContributeComponentBy?: Maybe<HowToContributeComponent>;
  /** Connection between the RootQuery type and the howToContributeComponent type */
  howToContributeComponents?: Maybe<RootQueryToHowToContributeComponentConnection>;
  /** An object of the impactCarousel Type.  */
  impactCarousel?: Maybe<ImpactCarousel>;
  /**
   * A impactCarousel object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  impactCarouselBy?: Maybe<ImpactCarousel>;
  /** Connection between the RootQuery type and the impactCarousel type */
  impactCarousels?: Maybe<RootQueryToImpactCarouselConnection>;
  /** An object of the impactStatistic Type.  */
  impactStatistic?: Maybe<ImpactStatistic>;
  /**
   * A impactStatistic object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  impactStatisticBy?: Maybe<ImpactStatistic>;
  /** Connection between the RootQuery type and the impactStatistic type */
  impactStatistics?: Maybe<RootQueryToImpactStatisticConnection>;
  /** An object of the individualsPageHero Type.  */
  individualsPageHero?: Maybe<IndividualsPageHero>;
  /**
   * A individualsPageHero object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  individualsPageHeroBy?: Maybe<IndividualsPageHero>;
  /** Connection between the RootQuery type and the individualsPageHero type */
  individualsPageHeroes?: Maybe<RootQueryToIndividualsPageHeroConnection>;
  /** An object of the mediaItem Type.  */
  mediaItem?: Maybe<MediaItem>;
  /**
   * A mediaItem object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  mediaItemBy?: Maybe<MediaItem>;
  /** Connection between the RootQuery type and the mediaItem type */
  mediaItems?: Maybe<RootQueryToMediaItemConnection>;
  /** A WordPress navigation menu */
  menu?: Maybe<Menu>;
  /** A WordPress navigation menu item */
  menuItem?: Maybe<MenuItem>;
  /** Connection between the RootQuery type and the MenuItem type */
  menuItems?: Maybe<RootQueryToMenuItemConnection>;
  /** Connection between the RootQuery type and the Menu type */
  menus?: Maybe<RootQueryToMenuConnection>;
  /** An object of the mobileFoodPantryComponent Type.  */
  mobileFoodPantryComponent?: Maybe<MobileFoodPantryComponent>;
  /**
   * A mobileFoodPantryComponent object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  mobileFoodPantryComponentBy?: Maybe<MobileFoodPantryComponent>;
  /** Connection between the RootQuery type and the mobileFoodPantryComponent type */
  mobileFoodPantryComponents?: Maybe<RootQueryToMobileFoodPantryComponentConnection>;
  /** Fetches an object given its ID */
  node?: Maybe<Node>;
  /** Fetches an object given its Unique Resource Identifier */
  nodeByUri?: Maybe<UniformResourceIdentifiable>;
  /** An object of the northwoodsAirLifeline Type.  */
  northwoodsAirLifeline?: Maybe<NorthwoodsAirLifeline>;
  /**
   * A northwoodsAirLifeline object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  northwoodsAirLifelineBy?: Maybe<NorthwoodsAirLifeline>;
  /** Connection between the RootQuery type and the northwoodsAirLifeline type */
  northwoodsAirLifelines?: Maybe<RootQueryToNorthwoodsAirLifelineConnection>;
  /** An object of the ourImpactHomePage Type.  */
  ourImpactHomePage?: Maybe<OurImpactHomePage>;
  /**
   * A ourImpactHomePage object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  ourImpactHomePageBy?: Maybe<OurImpactHomePage>;
  /** Connection between the RootQuery type and the ourImpactHomePage type */
  ourImpactHomePages?: Maybe<RootQueryToOurImpactHomePageConnection>;
  /** An object of the page Type.  */
  page?: Maybe<Page>;
  /**
   * A page object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  pageBy?: Maybe<Page>;
  /** Connection between the RootQuery type and the page type */
  pages?: Maybe<RootQueryToPageConnection>;
  /** An object of the partnerPageHero Type.  */
  partnerPageHero?: Maybe<PartnerPageHero>;
  /**
   * A partnerPageHero object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  partnerPageHeroBy?: Maybe<PartnerPageHero>;
  /** Connection between the RootQuery type and the partnerPageHero type */
  partnerPageHeroes?: Maybe<RootQueryToPartnerPageHeroConnection>;
  /** An object of the partnersTickerItem Type.  */
  partnersTickerItem?: Maybe<PartnersTickerItem>;
  /**
   * A partnersTickerItem object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  partnersTickerItemBy?: Maybe<PartnersTickerItem>;
  /** Connection between the RootQuery type and the partnersTickerItem type */
  partnersTickerItems?: Maybe<RootQueryToPartnersTickerItemConnection>;
  /** A WordPress plugin */
  plugin?: Maybe<Plugin>;
  /** Connection between the RootQuery type and the Plugin type */
  plugins?: Maybe<RootQueryToPluginConnection>;
  /** An object of the post Type.  */
  post?: Maybe<Post>;
  /**
   * A post object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  postBy?: Maybe<Post>;
  /** A 0bject */
  postFormat?: Maybe<PostFormat>;
  /** Connection between the RootQuery type and the postFormat type */
  postFormats?: Maybe<RootQueryToPostFormatConnection>;
  /** Connection between the RootQuery type and the post type */
  posts?: Maybe<RootQueryToPostConnection>;
  /** Fields of the &#039;ReadingSettings&#039; settings group */
  readingSettings?: Maybe<ReadingSettings>;
  /** Connection between the RootQuery type and the EnqueuedScript type */
  registeredScripts?: Maybe<RootQueryToEnqueuedScriptConnection>;
  /** Connection between the RootQuery type and the EnqueuedStylesheet type */
  registeredStylesheets?: Maybe<RootQueryToEnqueuedStylesheetConnection>;
  /** Connection between the RootQuery type and the ContentNode type */
  revisions?: Maybe<RootQueryToRevisionsConnection>;
  /** A 0bject */
  tag?: Maybe<Tag>;
  /** Connection between the RootQuery type and the tag type */
  tags?: Maybe<RootQueryToTagConnection>;
  /** Connection between the RootQuery type and the Taxonomy type */
  taxonomies?: Maybe<RootQueryToTaxonomyConnection>;
  /** Fetch a Taxonomy node by unique Identifier */
  taxonomy?: Maybe<Taxonomy>;
  /** A node in a taxonomy used to group and relate content nodes */
  termNode?: Maybe<TermNode>;
  /** Connection between the RootQuery type and the TermNode type */
  terms?: Maybe<RootQueryToTermNodeConnection>;
  /** A Theme object */
  theme?: Maybe<Theme>;
  /** Connection between the RootQuery type and the Theme type */
  themes?: Maybe<RootQueryToThemeConnection>;
  /** Returns a user */
  user?: Maybe<User>;
  /** Returns a user role */
  userRole?: Maybe<UserRole>;
  /** Connection between the RootQuery type and the UserRole type */
  userRoles?: Maybe<RootQueryToUserRoleConnection>;
  /** Connection between the RootQuery type and the User type */
  users?: Maybe<RootQueryToUserConnection>;
  /** An object of the uwContactInfo Type.  */
  uwContactInfo?: Maybe<UwContactInfo>;
  /**
   * A uwContactInfo object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  uwContactInfoBy?: Maybe<UwContactInfo>;
  /** Connection between the RootQuery type and the uwContactInfo type */
  uwContactInfos?: Maybe<RootQueryToUwContactInfoConnection>;
  /** Connection between the RootQuery type and the valuesHistory type */
  valuesHistories?: Maybe<RootQueryToValuesHistoryConnection>;
  /** An object of the valuesHistory Type.  */
  valuesHistory?: Maybe<ValuesHistory>;
  /**
   * A valuesHistory object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  valuesHistoryBy?: Maybe<ValuesHistory>;
  /** Returns the current user */
  viewer?: Maybe<User>;
  /** An object of the vitaTaxPrep Type.  */
  vitaTaxPrep?: Maybe<VitaTaxPrep>;
  /**
   * A vitaTaxPrep object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  vitaTaxPrepBy?: Maybe<VitaTaxPrep>;
  /** Connection between the RootQuery type and the vitaTaxPrep type */
  vitaTaxPreps?: Maybe<RootQueryToVitaTaxPrepConnection>;
  /** Fields of the &#039;WritingSettings&#039; settings group */
  writingSettings?: Maybe<WritingSettings>;
  /** An object of the ymcaComponent Type.  */
  ymcaComponent?: Maybe<YmcaComponent>;
  /**
   * A ymcaComponent object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  ymcaComponentBy?: Maybe<YmcaComponent>;
  /** Connection between the RootQuery type and the ymcaComponent type */
  ymcaComponents?: Maybe<RootQueryToYmcaComponentConnection>;
};


/** The root entry point into the Graph */
export type RootQueryAdminCostPdfArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<AdminCostPdfIdType>;
};


/** The root entry point into the Graph */
export type RootQueryAdminCostPdfByArgs = {
  adminCostPdfId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryAdminCostPdfsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToAdminCostPdfConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryAliceHubProgramArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<AliceHubProgramIdType>;
};


/** The root entry point into the Graph */
export type RootQueryAliceHubProgramByArgs = {
  aliceHubProgramId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryAliceHubProgramsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToAliceHubProgramConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryAliceReportPageArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<AliceReportPageIdType>;
};


/** The root entry point into the Graph */
export type RootQueryAliceReportPageByArgs = {
  aliceReportPageId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryAliceReportPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToAliceReportPageConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryAliceReportPdfArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<AliceReportPdfIdType>;
};


/** The root entry point into the Graph */
export type RootQueryAliceReportPdfByArgs = {
  aliceReportPdfId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryAliceReportPdfsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToAliceReportPdfConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryAliceStatsArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<AliceStatsIdType>;
};


/** The root entry point into the Graph */
export type RootQueryAliceStatsByArgs = {
  aliceStatsId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryAllAliceStatsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToAliceStatsConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryCampaignToolkitAssetArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<CampaignToolkitAssetIdType>;
};


/** The root entry point into the Graph */
export type RootQueryCampaignToolkitAssetByArgs = {
  campaignToolkitAssetId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryCampaignToolkitAssetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToCampaignToolkitAssetConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryCategoriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToCategoryConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryCategoryArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<CategoryIdType>;
};


/** The root entry point into the Graph */
export type RootQueryCommentArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<CommentNodeIdTypeEnum>;
};


/** The root entry point into the Graph */
export type RootQueryCommentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToCommentConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryContentNodeArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  contentType?: InputMaybe<ContentTypeEnum>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<ContentNodeIdTypeEnum>;
};


/** The root entry point into the Graph */
export type RootQueryContentNodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToContentNodeConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryContentTypeArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<ContentTypeIdTypeEnum>;
};


/** The root entry point into the Graph */
export type RootQueryContentTypesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryCurrent990FormPdfArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<Current990FormPdfIdType>;
};


/** The root entry point into the Graph */
export type RootQueryCurrent990FormPdfByArgs = {
  current990FormPdfId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryCurrent990FormPdfsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToCurrent990FormPdfConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryDonorPrivacyPolicyPdfArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<DonorPrivacyPolicyPdfIdType>;
};


/** The root entry point into the Graph */
export type RootQueryDonorPrivacyPolicyPdfByArgs = {
  donorPrivacyPolicyPdfId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryDonorPrivacyPolicyPdfsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToDonorPrivacyPolicyPdfConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryFaqArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<FaqIdType>;
};


/** The root entry point into the Graph */
export type RootQueryFaqByArgs = {
  faqId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryFaqsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToFaqConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryFourPillarsHeroComponentArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<FourPillarsHeroComponentIdType>;
};


/** The root entry point into the Graph */
export type RootQueryFourPillarsHeroComponentByArgs = {
  fourPillarsHeroComponentId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryFourPillarsHeroComponentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToFourPillarsHeroComponentConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryFourPillarsPreviewArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<FourPillarsPreviewIdType>;
};


/** The root entry point into the Graph */
export type RootQueryFourPillarsPreviewByArgs = {
  fourPillarsPreviewId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryFourPillarsPreviewsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToFourPillarsPreviewConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryGetInvolvedHeroArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<GetInvolvedHeroIdType>;
};


/** The root entry point into the Graph */
export type RootQueryGetInvolvedHeroByArgs = {
  getInvolvedHeroId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryGetInvolvedHeroesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToGetInvolvedHeroConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryGiftAcceptancePolicyPdfArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<GiftAcceptancePolicyPdfIdType>;
};


/** The root entry point into the Graph */
export type RootQueryGiftAcceptancePolicyPdfByArgs = {
  giftAcceptancePolicyPdfId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryGiftAcceptancePolicyPdfsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToGiftAcceptancePolicyPdfConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryGirlScoutsComponentArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<GirlScoutsComponentIdType>;
};


/** The root entry point into the Graph */
export type RootQueryGirlScoutsComponentByArgs = {
  girlScoutsComponentId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryGirlScoutsComponentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToGirlScoutsComponentConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryGlobalStylesheetArgs = {
  types?: InputMaybe<Array<InputMaybe<GlobalStylesheetTypesEnum>>>;
};


/** The root entry point into the Graph */
export type RootQueryHeroComponentOurImpactPageArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<HeroComponentOurImpactPageIdType>;
};


/** The root entry point into the Graph */
export type RootQueryHeroComponentOurImpactPageByArgs = {
  heroComponentOurImpactPageId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryHeroComponentOurImpactPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToHeroComponentOurImpactPageConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryHomePageHeroArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<HomePageHeroIdType>;
};


/** The root entry point into the Graph */
export type RootQueryHomePageHeroByArgs = {
  homePageHeroId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryHomePageHeroesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToHomePageHeroConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryHowToContributeComponentArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<HowToContributeComponentIdType>;
};


/** The root entry point into the Graph */
export type RootQueryHowToContributeComponentByArgs = {
  howToContributeComponentId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryHowToContributeComponentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToHowToContributeComponentConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryImpactCarouselArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<ImpactCarouselIdType>;
};


/** The root entry point into the Graph */
export type RootQueryImpactCarouselByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  impactCarouselId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryImpactCarouselsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToImpactCarouselConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryImpactStatisticArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<ImpactStatisticIdType>;
};


/** The root entry point into the Graph */
export type RootQueryImpactStatisticByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  impactStatisticId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryImpactStatisticsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToImpactStatisticConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryIndividualsPageHeroArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<IndividualsPageHeroIdType>;
};


/** The root entry point into the Graph */
export type RootQueryIndividualsPageHeroByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  individualsPageHeroId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryIndividualsPageHeroesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToIndividualsPageHeroConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryMediaItemArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<MediaItemIdType>;
};


/** The root entry point into the Graph */
export type RootQueryMediaItemByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  mediaItemId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryMediaItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToMediaItemConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryMenuArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<MenuNodeIdTypeEnum>;
};


/** The root entry point into the Graph */
export type RootQueryMenuItemArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<MenuItemNodeIdTypeEnum>;
};


/** The root entry point into the Graph */
export type RootQueryMenuItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToMenuItemConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryMenusArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToMenuConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryMobileFoodPantryComponentArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<MobileFoodPantryComponentIdType>;
};


/** The root entry point into the Graph */
export type RootQueryMobileFoodPantryComponentByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  mobileFoodPantryComponentId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryMobileFoodPantryComponentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToMobileFoodPantryComponentConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryNodeArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryNodeByUriArgs = {
  uri: Scalars['String']['input'];
};


/** The root entry point into the Graph */
export type RootQueryNorthwoodsAirLifelineArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<NorthwoodsAirLifelineIdType>;
};


/** The root entry point into the Graph */
export type RootQueryNorthwoodsAirLifelineByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  northwoodsAirLifelineId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryNorthwoodsAirLifelinesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToNorthwoodsAirLifelineConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryOurImpactHomePageArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<OurImpactHomePageIdType>;
};


/** The root entry point into the Graph */
export type RootQueryOurImpactHomePageByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  ourImpactHomePageId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryOurImpactHomePagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToOurImpactHomePageConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryPageArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<PageIdType>;
};


/** The root entry point into the Graph */
export type RootQueryPageByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  pageId?: InputMaybe<Scalars['Int']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToPageConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryPartnerPageHeroArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<PartnerPageHeroIdType>;
};


/** The root entry point into the Graph */
export type RootQueryPartnerPageHeroByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  partnerPageHeroId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryPartnerPageHeroesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToPartnerPageHeroConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryPartnersTickerItemArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<PartnersTickerItemIdType>;
};


/** The root entry point into the Graph */
export type RootQueryPartnersTickerItemByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  partnersTickerItemId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryPartnersTickerItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToPartnersTickerItemConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryPluginArgs = {
  id: Scalars['ID']['input'];
};


/** The root entry point into the Graph */
export type RootQueryPluginsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToPluginConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryPostArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<PostIdType>;
};


/** The root entry point into the Graph */
export type RootQueryPostByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  postId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryPostFormatArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<PostFormatIdType>;
};


/** The root entry point into the Graph */
export type RootQueryPostFormatsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToPostFormatConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToPostConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryRegisteredScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryRegisteredStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryRevisionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToRevisionsConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryTagArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<TagIdType>;
};


/** The root entry point into the Graph */
export type RootQueryTagsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToTagConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryTaxonomiesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryTaxonomyArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<TaxonomyIdTypeEnum>;
};


/** The root entry point into the Graph */
export type RootQueryTermNodeArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<TermNodeIdTypeEnum>;
  taxonomy?: InputMaybe<TaxonomyEnum>;
};


/** The root entry point into the Graph */
export type RootQueryTermsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToTermNodeConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryThemeArgs = {
  id: Scalars['ID']['input'];
};


/** The root entry point into the Graph */
export type RootQueryThemesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryUserArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<UserNodeIdTypeEnum>;
};


/** The root entry point into the Graph */
export type RootQueryUserRoleArgs = {
  id: Scalars['ID']['input'];
};


/** The root entry point into the Graph */
export type RootQueryUserRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryUsersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToUserConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryUwContactInfoArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<UwContactInfoIdType>;
};


/** The root entry point into the Graph */
export type RootQueryUwContactInfoByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
  uwContactInfoId?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryUwContactInfosArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToUwContactInfoConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryValuesHistoriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToValuesHistoryConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryValuesHistoryArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<ValuesHistoryIdType>;
};


/** The root entry point into the Graph */
export type RootQueryValuesHistoryByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
  valuesHistoryId?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryVitaTaxPrepArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<VitaTaxPrepIdType>;
};


/** The root entry point into the Graph */
export type RootQueryVitaTaxPrepByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
  vitaTaxPrepId?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryVitaTaxPrepsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToVitaTaxPrepConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryYmcaComponentArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<YmcaComponentIdType>;
};


/** The root entry point into the Graph */
export type RootQueryYmcaComponentByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
  ymcaComponentId?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryYmcaComponentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToYmcaComponentConnectionWhereArgs>;
};

/** Connection between the RootQuery type and the adminCostPdf type */
export type RootQueryToAdminCostPdfConnection = AdminCostPdfConnection & Connection & {
  __typename?: 'RootQueryToAdminCostPdfConnection';
  /** Edges for the RootQueryToAdminCostPdfConnection connection */
  edges: Array<RootQueryToAdminCostPdfConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<AdminCostPdf>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToAdminCostPdfConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToAdminCostPdfConnectionEdge = AdminCostPdfConnectionEdge & Edge & {
  __typename?: 'RootQueryToAdminCostPdfConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: AdminCostPdf;
};

/** Pagination metadata specific to &quot;RootQueryToAdminCostPdfConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToAdminCostPdfConnection Nodes. */
export type RootQueryToAdminCostPdfConnectionPageInfo = AdminCostPdfConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToAdminCostPdfConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToAdminCostPdfConnection connection */
export type RootQueryToAdminCostPdfConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the aliceHubProgram type */
export type RootQueryToAliceHubProgramConnection = AliceHubProgramConnection & Connection & {
  __typename?: 'RootQueryToAliceHubProgramConnection';
  /** Edges for the RootQueryToAliceHubProgramConnection connection */
  edges: Array<RootQueryToAliceHubProgramConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<AliceHubProgram>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToAliceHubProgramConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToAliceHubProgramConnectionEdge = AliceHubProgramConnectionEdge & Edge & {
  __typename?: 'RootQueryToAliceHubProgramConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: AliceHubProgram;
};

/** Pagination metadata specific to &quot;RootQueryToAliceHubProgramConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToAliceHubProgramConnection Nodes. */
export type RootQueryToAliceHubProgramConnectionPageInfo = AliceHubProgramConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToAliceHubProgramConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToAliceHubProgramConnection connection */
export type RootQueryToAliceHubProgramConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the aliceReportPage type */
export type RootQueryToAliceReportPageConnection = AliceReportPageConnection & Connection & {
  __typename?: 'RootQueryToAliceReportPageConnection';
  /** Edges for the RootQueryToAliceReportPageConnection connection */
  edges: Array<RootQueryToAliceReportPageConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<AliceReportPage>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToAliceReportPageConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToAliceReportPageConnectionEdge = AliceReportPageConnectionEdge & Edge & {
  __typename?: 'RootQueryToAliceReportPageConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: AliceReportPage;
};

/** Pagination metadata specific to &quot;RootQueryToAliceReportPageConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToAliceReportPageConnection Nodes. */
export type RootQueryToAliceReportPageConnectionPageInfo = AliceReportPageConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToAliceReportPageConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToAliceReportPageConnection connection */
export type RootQueryToAliceReportPageConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the aliceReportPdf type */
export type RootQueryToAliceReportPdfConnection = AliceReportPdfConnection & Connection & {
  __typename?: 'RootQueryToAliceReportPdfConnection';
  /** Edges for the RootQueryToAliceReportPdfConnection connection */
  edges: Array<RootQueryToAliceReportPdfConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<AliceReportPdf>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToAliceReportPdfConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToAliceReportPdfConnectionEdge = AliceReportPdfConnectionEdge & Edge & {
  __typename?: 'RootQueryToAliceReportPdfConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: AliceReportPdf;
};

/** Pagination metadata specific to &quot;RootQueryToAliceReportPdfConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToAliceReportPdfConnection Nodes. */
export type RootQueryToAliceReportPdfConnectionPageInfo = AliceReportPdfConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToAliceReportPdfConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToAliceReportPdfConnection connection */
export type RootQueryToAliceReportPdfConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the aliceStats type */
export type RootQueryToAliceStatsConnection = AliceStatsConnection & Connection & {
  __typename?: 'RootQueryToAliceStatsConnection';
  /** Edges for the RootQueryToAliceStatsConnection connection */
  edges: Array<RootQueryToAliceStatsConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<AliceStats>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToAliceStatsConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToAliceStatsConnectionEdge = AliceStatsConnectionEdge & Edge & {
  __typename?: 'RootQueryToAliceStatsConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: AliceStats;
};

/** Pagination metadata specific to &quot;RootQueryToAliceStatsConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToAliceStatsConnection Nodes. */
export type RootQueryToAliceStatsConnectionPageInfo = AliceStatsConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToAliceStatsConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToAliceStatsConnection connection */
export type RootQueryToAliceStatsConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the campaignToolkitAsset type */
export type RootQueryToCampaignToolkitAssetConnection = CampaignToolkitAssetConnection & Connection & {
  __typename?: 'RootQueryToCampaignToolkitAssetConnection';
  /** Edges for the RootQueryToCampaignToolkitAssetConnection connection */
  edges: Array<RootQueryToCampaignToolkitAssetConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<CampaignToolkitAsset>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToCampaignToolkitAssetConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToCampaignToolkitAssetConnectionEdge = CampaignToolkitAssetConnectionEdge & Edge & {
  __typename?: 'RootQueryToCampaignToolkitAssetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: CampaignToolkitAsset;
};

/** Pagination metadata specific to &quot;RootQueryToCampaignToolkitAssetConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToCampaignToolkitAssetConnection Nodes. */
export type RootQueryToCampaignToolkitAssetConnectionPageInfo = CampaignToolkitAssetConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToCampaignToolkitAssetConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToCampaignToolkitAssetConnection connection */
export type RootQueryToCampaignToolkitAssetConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the category type */
export type RootQueryToCategoryConnection = CategoryConnection & Connection & {
  __typename?: 'RootQueryToCategoryConnection';
  /** Edges for the RootQueryToCategoryConnection connection */
  edges: Array<RootQueryToCategoryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Category>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToCategoryConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToCategoryConnectionEdge = CategoryConnectionEdge & Edge & {
  __typename?: 'RootQueryToCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Category;
};

/** Pagination metadata specific to &quot;RootQueryToCategoryConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToCategoryConnection Nodes. */
export type RootQueryToCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToCategoryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToCategoryConnection connection */
export type RootQueryToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the RootQuery type and the Comment type */
export type RootQueryToCommentConnection = CommentConnection & Connection & {
  __typename?: 'RootQueryToCommentConnection';
  /** Edges for the RootQueryToCommentConnection connection */
  edges: Array<RootQueryToCommentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToCommentConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToCommentConnectionEdge = CommentConnectionEdge & Edge & {
  __typename?: 'RootQueryToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Comment;
};

/** Pagination metadata specific to &quot;RootQueryToCommentConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToCommentConnection Nodes. */
export type RootQueryToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToCommentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToCommentConnection connection */
export type RootQueryToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** One or more Comment Statuses to limit results by */
  statusIn?: InputMaybe<Array<InputMaybe<CommentStatusEnum>>>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the RootQuery type and the ContentNode type */
export type RootQueryToContentNodeConnection = Connection & ContentNodeConnection & {
  __typename?: 'RootQueryToContentNodeConnection';
  /** Edges for the RootQueryToContentNodeConnection connection */
  edges: Array<RootQueryToContentNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToContentNodeConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'RootQueryToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Pagination metadata specific to &quot;RootQueryToContentNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToContentNodeConnection Nodes. */
export type RootQueryToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToContentNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToContentNodeConnection connection */
export type RootQueryToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the ContentType type */
export type RootQueryToContentTypeConnection = Connection & ContentTypeConnection & {
  __typename?: 'RootQueryToContentTypeConnection';
  /** Edges for the RootQueryToContentTypeConnection connection */
  edges: Array<RootQueryToContentTypeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentType>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToContentTypeConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToContentTypeConnectionEdge = ContentTypeConnectionEdge & Edge & {
  __typename?: 'RootQueryToContentTypeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentType;
};

/** Pagination metadata specific to &quot;RootQueryToContentTypeConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToContentTypeConnection Nodes. */
export type RootQueryToContentTypeConnectionPageInfo = ContentTypeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToContentTypeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the RootQuery type and the current990FormPdf type */
export type RootQueryToCurrent990FormPdfConnection = Connection & Current990FormPdfConnection & {
  __typename?: 'RootQueryToCurrent990FormPdfConnection';
  /** Edges for the RootQueryToCurrent990FormPdfConnection connection */
  edges: Array<RootQueryToCurrent990FormPdfConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Current990FormPdf>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToCurrent990FormPdfConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToCurrent990FormPdfConnectionEdge = Current990FormPdfConnectionEdge & Edge & {
  __typename?: 'RootQueryToCurrent990FormPdfConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Current990FormPdf;
};

/** Pagination metadata specific to &quot;RootQueryToCurrent990FormPdfConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToCurrent990FormPdfConnection Nodes. */
export type RootQueryToCurrent990FormPdfConnectionPageInfo = Current990FormPdfConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToCurrent990FormPdfConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToCurrent990FormPdfConnection connection */
export type RootQueryToCurrent990FormPdfConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the donorPrivacyPolicyPdf type */
export type RootQueryToDonorPrivacyPolicyPdfConnection = Connection & DonorPrivacyPolicyPdfConnection & {
  __typename?: 'RootQueryToDonorPrivacyPolicyPdfConnection';
  /** Edges for the RootQueryToDonorPrivacyPolicyPdfConnection connection */
  edges: Array<RootQueryToDonorPrivacyPolicyPdfConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<DonorPrivacyPolicyPdf>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToDonorPrivacyPolicyPdfConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToDonorPrivacyPolicyPdfConnectionEdge = DonorPrivacyPolicyPdfConnectionEdge & Edge & {
  __typename?: 'RootQueryToDonorPrivacyPolicyPdfConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: DonorPrivacyPolicyPdf;
};

/** Pagination metadata specific to &quot;RootQueryToDonorPrivacyPolicyPdfConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToDonorPrivacyPolicyPdfConnection Nodes. */
export type RootQueryToDonorPrivacyPolicyPdfConnectionPageInfo = DonorPrivacyPolicyPdfConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToDonorPrivacyPolicyPdfConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToDonorPrivacyPolicyPdfConnection connection */
export type RootQueryToDonorPrivacyPolicyPdfConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the EnqueuedScript type */
export type RootQueryToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {
  __typename?: 'RootQueryToEnqueuedScriptConnection';
  /** Edges for the RootQueryToEnqueuedScriptConnection connection */
  edges: Array<RootQueryToEnqueuedScriptConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedScript>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToEnqueuedScriptConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {
  __typename?: 'RootQueryToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedScript;
};

/** Pagination metadata specific to &quot;RootQueryToEnqueuedScriptConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToEnqueuedScriptConnection Nodes. */
export type RootQueryToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToEnqueuedScriptConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the RootQuery type and the EnqueuedStylesheet type */
export type RootQueryToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {
  __typename?: 'RootQueryToEnqueuedStylesheetConnection';
  /** Edges for the RootQueryToEnqueuedStylesheetConnection connection */
  edges: Array<RootQueryToEnqueuedStylesheetConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedStylesheet>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToEnqueuedStylesheetConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {
  __typename?: 'RootQueryToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedStylesheet;
};

/** Pagination metadata specific to &quot;RootQueryToEnqueuedStylesheetConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToEnqueuedStylesheetConnection Nodes. */
export type RootQueryToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToEnqueuedStylesheetConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the RootQuery type and the faq type */
export type RootQueryToFaqConnection = Connection & FaqConnection & {
  __typename?: 'RootQueryToFaqConnection';
  /** Edges for the RootQueryToFaqConnection connection */
  edges: Array<RootQueryToFaqConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Faq>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToFaqConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToFaqConnectionEdge = Edge & FaqConnectionEdge & {
  __typename?: 'RootQueryToFaqConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Faq;
};

/** Pagination metadata specific to &quot;RootQueryToFaqConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToFaqConnection Nodes. */
export type RootQueryToFaqConnectionPageInfo = FaqConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToFaqConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToFaqConnection connection */
export type RootQueryToFaqConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the fourPillarsHeroComponent type */
export type RootQueryToFourPillarsHeroComponentConnection = Connection & FourPillarsHeroComponentConnection & {
  __typename?: 'RootQueryToFourPillarsHeroComponentConnection';
  /** Edges for the RootQueryToFourPillarsHeroComponentConnection connection */
  edges: Array<RootQueryToFourPillarsHeroComponentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<FourPillarsHeroComponent>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToFourPillarsHeroComponentConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToFourPillarsHeroComponentConnectionEdge = Edge & FourPillarsHeroComponentConnectionEdge & {
  __typename?: 'RootQueryToFourPillarsHeroComponentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: FourPillarsHeroComponent;
};

/** Pagination metadata specific to &quot;RootQueryToFourPillarsHeroComponentConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToFourPillarsHeroComponentConnection Nodes. */
export type RootQueryToFourPillarsHeroComponentConnectionPageInfo = FourPillarsHeroComponentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToFourPillarsHeroComponentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToFourPillarsHeroComponentConnection connection */
export type RootQueryToFourPillarsHeroComponentConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the fourPillarsPreview type */
export type RootQueryToFourPillarsPreviewConnection = Connection & FourPillarsPreviewConnection & {
  __typename?: 'RootQueryToFourPillarsPreviewConnection';
  /** Edges for the RootQueryToFourPillarsPreviewConnection connection */
  edges: Array<RootQueryToFourPillarsPreviewConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<FourPillarsPreview>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToFourPillarsPreviewConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToFourPillarsPreviewConnectionEdge = Edge & FourPillarsPreviewConnectionEdge & {
  __typename?: 'RootQueryToFourPillarsPreviewConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: FourPillarsPreview;
};

/** Pagination metadata specific to &quot;RootQueryToFourPillarsPreviewConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToFourPillarsPreviewConnection Nodes. */
export type RootQueryToFourPillarsPreviewConnectionPageInfo = FourPillarsPreviewConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToFourPillarsPreviewConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToFourPillarsPreviewConnection connection */
export type RootQueryToFourPillarsPreviewConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the getInvolvedHero type */
export type RootQueryToGetInvolvedHeroConnection = Connection & GetInvolvedHeroConnection & {
  __typename?: 'RootQueryToGetInvolvedHeroConnection';
  /** Edges for the RootQueryToGetInvolvedHeroConnection connection */
  edges: Array<RootQueryToGetInvolvedHeroConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<GetInvolvedHero>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToGetInvolvedHeroConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToGetInvolvedHeroConnectionEdge = Edge & GetInvolvedHeroConnectionEdge & {
  __typename?: 'RootQueryToGetInvolvedHeroConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: GetInvolvedHero;
};

/** Pagination metadata specific to &quot;RootQueryToGetInvolvedHeroConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToGetInvolvedHeroConnection Nodes. */
export type RootQueryToGetInvolvedHeroConnectionPageInfo = GetInvolvedHeroConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToGetInvolvedHeroConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToGetInvolvedHeroConnection connection */
export type RootQueryToGetInvolvedHeroConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the giftAcceptancePolicyPdf type */
export type RootQueryToGiftAcceptancePolicyPdfConnection = Connection & GiftAcceptancePolicyPdfConnection & {
  __typename?: 'RootQueryToGiftAcceptancePolicyPdfConnection';
  /** Edges for the RootQueryToGiftAcceptancePolicyPdfConnection connection */
  edges: Array<RootQueryToGiftAcceptancePolicyPdfConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<GiftAcceptancePolicyPdf>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToGiftAcceptancePolicyPdfConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToGiftAcceptancePolicyPdfConnectionEdge = Edge & GiftAcceptancePolicyPdfConnectionEdge & {
  __typename?: 'RootQueryToGiftAcceptancePolicyPdfConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: GiftAcceptancePolicyPdf;
};

/** Pagination metadata specific to &quot;RootQueryToGiftAcceptancePolicyPdfConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToGiftAcceptancePolicyPdfConnection Nodes. */
export type RootQueryToGiftAcceptancePolicyPdfConnectionPageInfo = GiftAcceptancePolicyPdfConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToGiftAcceptancePolicyPdfConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToGiftAcceptancePolicyPdfConnection connection */
export type RootQueryToGiftAcceptancePolicyPdfConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the girlScoutsComponent type */
export type RootQueryToGirlScoutsComponentConnection = Connection & GirlScoutsComponentConnection & {
  __typename?: 'RootQueryToGirlScoutsComponentConnection';
  /** Edges for the RootQueryToGirlScoutsComponentConnection connection */
  edges: Array<RootQueryToGirlScoutsComponentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<GirlScoutsComponent>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToGirlScoutsComponentConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToGirlScoutsComponentConnectionEdge = Edge & GirlScoutsComponentConnectionEdge & {
  __typename?: 'RootQueryToGirlScoutsComponentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: GirlScoutsComponent;
};

/** Pagination metadata specific to &quot;RootQueryToGirlScoutsComponentConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToGirlScoutsComponentConnection Nodes. */
export type RootQueryToGirlScoutsComponentConnectionPageInfo = GirlScoutsComponentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToGirlScoutsComponentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToGirlScoutsComponentConnection connection */
export type RootQueryToGirlScoutsComponentConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the heroComponentOurImpactPage type */
export type RootQueryToHeroComponentOurImpactPageConnection = Connection & HeroComponentOurImpactPageConnection & {
  __typename?: 'RootQueryToHeroComponentOurImpactPageConnection';
  /** Edges for the RootQueryToHeroComponentOurImpactPageConnection connection */
  edges: Array<RootQueryToHeroComponentOurImpactPageConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<HeroComponentOurImpactPage>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToHeroComponentOurImpactPageConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToHeroComponentOurImpactPageConnectionEdge = Edge & HeroComponentOurImpactPageConnectionEdge & {
  __typename?: 'RootQueryToHeroComponentOurImpactPageConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: HeroComponentOurImpactPage;
};

/** Pagination metadata specific to &quot;RootQueryToHeroComponentOurImpactPageConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToHeroComponentOurImpactPageConnection Nodes. */
export type RootQueryToHeroComponentOurImpactPageConnectionPageInfo = HeroComponentOurImpactPageConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToHeroComponentOurImpactPageConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToHeroComponentOurImpactPageConnection connection */
export type RootQueryToHeroComponentOurImpactPageConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the homePageHero type */
export type RootQueryToHomePageHeroConnection = Connection & HomePageHeroConnection & {
  __typename?: 'RootQueryToHomePageHeroConnection';
  /** Edges for the RootQueryToHomePageHeroConnection connection */
  edges: Array<RootQueryToHomePageHeroConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<HomePageHero>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToHomePageHeroConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToHomePageHeroConnectionEdge = Edge & HomePageHeroConnectionEdge & {
  __typename?: 'RootQueryToHomePageHeroConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: HomePageHero;
};

/** Pagination metadata specific to &quot;RootQueryToHomePageHeroConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToHomePageHeroConnection Nodes. */
export type RootQueryToHomePageHeroConnectionPageInfo = HomePageHeroConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToHomePageHeroConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToHomePageHeroConnection connection */
export type RootQueryToHomePageHeroConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the howToContributeComponent type */
export type RootQueryToHowToContributeComponentConnection = Connection & HowToContributeComponentConnection & {
  __typename?: 'RootQueryToHowToContributeComponentConnection';
  /** Edges for the RootQueryToHowToContributeComponentConnection connection */
  edges: Array<RootQueryToHowToContributeComponentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<HowToContributeComponent>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToHowToContributeComponentConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToHowToContributeComponentConnectionEdge = Edge & HowToContributeComponentConnectionEdge & {
  __typename?: 'RootQueryToHowToContributeComponentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: HowToContributeComponent;
};

/** Pagination metadata specific to &quot;RootQueryToHowToContributeComponentConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToHowToContributeComponentConnection Nodes. */
export type RootQueryToHowToContributeComponentConnectionPageInfo = HowToContributeComponentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToHowToContributeComponentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToHowToContributeComponentConnection connection */
export type RootQueryToHowToContributeComponentConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the impactCarousel type */
export type RootQueryToImpactCarouselConnection = Connection & ImpactCarouselConnection & {
  __typename?: 'RootQueryToImpactCarouselConnection';
  /** Edges for the RootQueryToImpactCarouselConnection connection */
  edges: Array<RootQueryToImpactCarouselConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ImpactCarousel>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToImpactCarouselConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToImpactCarouselConnectionEdge = Edge & ImpactCarouselConnectionEdge & {
  __typename?: 'RootQueryToImpactCarouselConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ImpactCarousel;
};

/** Pagination metadata specific to &quot;RootQueryToImpactCarouselConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToImpactCarouselConnection Nodes. */
export type RootQueryToImpactCarouselConnectionPageInfo = ImpactCarouselConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToImpactCarouselConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToImpactCarouselConnection connection */
export type RootQueryToImpactCarouselConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the impactStatistic type */
export type RootQueryToImpactStatisticConnection = Connection & ImpactStatisticConnection & {
  __typename?: 'RootQueryToImpactStatisticConnection';
  /** Edges for the RootQueryToImpactStatisticConnection connection */
  edges: Array<RootQueryToImpactStatisticConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ImpactStatistic>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToImpactStatisticConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToImpactStatisticConnectionEdge = Edge & ImpactStatisticConnectionEdge & {
  __typename?: 'RootQueryToImpactStatisticConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ImpactStatistic;
};

/** Pagination metadata specific to &quot;RootQueryToImpactStatisticConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToImpactStatisticConnection Nodes. */
export type RootQueryToImpactStatisticConnectionPageInfo = ImpactStatisticConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToImpactStatisticConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToImpactStatisticConnection connection */
export type RootQueryToImpactStatisticConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the individualsPageHero type */
export type RootQueryToIndividualsPageHeroConnection = Connection & IndividualsPageHeroConnection & {
  __typename?: 'RootQueryToIndividualsPageHeroConnection';
  /** Edges for the RootQueryToIndividualsPageHeroConnection connection */
  edges: Array<RootQueryToIndividualsPageHeroConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<IndividualsPageHero>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToIndividualsPageHeroConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToIndividualsPageHeroConnectionEdge = Edge & IndividualsPageHeroConnectionEdge & {
  __typename?: 'RootQueryToIndividualsPageHeroConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: IndividualsPageHero;
};

/** Pagination metadata specific to &quot;RootQueryToIndividualsPageHeroConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToIndividualsPageHeroConnection Nodes. */
export type RootQueryToIndividualsPageHeroConnectionPageInfo = IndividualsPageHeroConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToIndividualsPageHeroConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToIndividualsPageHeroConnection connection */
export type RootQueryToIndividualsPageHeroConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the mediaItem type */
export type RootQueryToMediaItemConnection = Connection & MediaItemConnection & {
  __typename?: 'RootQueryToMediaItemConnection';
  /** Edges for the RootQueryToMediaItemConnection connection */
  edges: Array<RootQueryToMediaItemConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<MediaItem>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToMediaItemConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & {
  __typename?: 'RootQueryToMediaItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: MediaItem;
};

/** Pagination metadata specific to &quot;RootQueryToMediaItemConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToMediaItemConnection Nodes. */
export type RootQueryToMediaItemConnectionPageInfo = MediaItemConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToMediaItemConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToMediaItemConnection connection */
export type RootQueryToMediaItemConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the Menu type */
export type RootQueryToMenuConnection = Connection & MenuConnection & {
  __typename?: 'RootQueryToMenuConnection';
  /** Edges for the RootQueryToMenuConnection connection */
  edges: Array<RootQueryToMenuConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Menu>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToMenuConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToMenuConnectionEdge = Edge & MenuConnectionEdge & {
  __typename?: 'RootQueryToMenuConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Menu;
};

/** Pagination metadata specific to &quot;RootQueryToMenuConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToMenuConnection Nodes. */
export type RootQueryToMenuConnectionPageInfo = MenuConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToMenuConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToMenuConnection connection */
export type RootQueryToMenuConnectionWhereArgs = {
  /** The database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<MenuLocationEnum>;
  /** The slug of the menu to query items for */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the MenuItem type */
export type RootQueryToMenuItemConnection = Connection & MenuItemConnection & {
  __typename?: 'RootQueryToMenuItemConnection';
  /** Edges for the RootQueryToMenuItemConnection connection */
  edges: Array<RootQueryToMenuItemConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<MenuItem>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToMenuItemConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToMenuItemConnectionEdge = Edge & MenuItemConnectionEdge & {
  __typename?: 'RootQueryToMenuItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: MenuItem;
};

/** Pagination metadata specific to &quot;RootQueryToMenuItemConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToMenuItemConnection Nodes. */
export type RootQueryToMenuItemConnectionPageInfo = MenuItemConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToMenuItemConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToMenuItemConnection connection */
export type RootQueryToMenuItemConnectionWhereArgs = {
  /** The database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<MenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the RootQuery type and the mobileFoodPantryComponent type */
export type RootQueryToMobileFoodPantryComponentConnection = Connection & MobileFoodPantryComponentConnection & {
  __typename?: 'RootQueryToMobileFoodPantryComponentConnection';
  /** Edges for the RootQueryToMobileFoodPantryComponentConnection connection */
  edges: Array<RootQueryToMobileFoodPantryComponentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<MobileFoodPantryComponent>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToMobileFoodPantryComponentConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToMobileFoodPantryComponentConnectionEdge = Edge & MobileFoodPantryComponentConnectionEdge & {
  __typename?: 'RootQueryToMobileFoodPantryComponentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: MobileFoodPantryComponent;
};

/** Pagination metadata specific to &quot;RootQueryToMobileFoodPantryComponentConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToMobileFoodPantryComponentConnection Nodes. */
export type RootQueryToMobileFoodPantryComponentConnectionPageInfo = MobileFoodPantryComponentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToMobileFoodPantryComponentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToMobileFoodPantryComponentConnection connection */
export type RootQueryToMobileFoodPantryComponentConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the northwoodsAirLifeline type */
export type RootQueryToNorthwoodsAirLifelineConnection = Connection & NorthwoodsAirLifelineConnection & {
  __typename?: 'RootQueryToNorthwoodsAirLifelineConnection';
  /** Edges for the RootQueryToNorthwoodsAirLifelineConnection connection */
  edges: Array<RootQueryToNorthwoodsAirLifelineConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<NorthwoodsAirLifeline>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToNorthwoodsAirLifelineConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToNorthwoodsAirLifelineConnectionEdge = Edge & NorthwoodsAirLifelineConnectionEdge & {
  __typename?: 'RootQueryToNorthwoodsAirLifelineConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: NorthwoodsAirLifeline;
};

/** Pagination metadata specific to &quot;RootQueryToNorthwoodsAirLifelineConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToNorthwoodsAirLifelineConnection Nodes. */
export type RootQueryToNorthwoodsAirLifelineConnectionPageInfo = NorthwoodsAirLifelineConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToNorthwoodsAirLifelineConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToNorthwoodsAirLifelineConnection connection */
export type RootQueryToNorthwoodsAirLifelineConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the ourImpactHomePage type */
export type RootQueryToOurImpactHomePageConnection = Connection & OurImpactHomePageConnection & {
  __typename?: 'RootQueryToOurImpactHomePageConnection';
  /** Edges for the RootQueryToOurImpactHomePageConnection connection */
  edges: Array<RootQueryToOurImpactHomePageConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<OurImpactHomePage>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToOurImpactHomePageConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToOurImpactHomePageConnectionEdge = Edge & OurImpactHomePageConnectionEdge & {
  __typename?: 'RootQueryToOurImpactHomePageConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: OurImpactHomePage;
};

/** Pagination metadata specific to &quot;RootQueryToOurImpactHomePageConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToOurImpactHomePageConnection Nodes. */
export type RootQueryToOurImpactHomePageConnectionPageInfo = OurImpactHomePageConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToOurImpactHomePageConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToOurImpactHomePageConnection connection */
export type RootQueryToOurImpactHomePageConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the page type */
export type RootQueryToPageConnection = Connection & PageConnection & {
  __typename?: 'RootQueryToPageConnection';
  /** Edges for the RootQueryToPageConnection connection */
  edges: Array<RootQueryToPageConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Page>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToPageConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToPageConnectionEdge = Edge & PageConnectionEdge & {
  __typename?: 'RootQueryToPageConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Page;
};

/** Pagination metadata specific to &quot;RootQueryToPageConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToPageConnection Nodes. */
export type RootQueryToPageConnectionPageInfo = PageConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToPageConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToPageConnection connection */
export type RootQueryToPageConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the partnerPageHero type */
export type RootQueryToPartnerPageHeroConnection = Connection & PartnerPageHeroConnection & {
  __typename?: 'RootQueryToPartnerPageHeroConnection';
  /** Edges for the RootQueryToPartnerPageHeroConnection connection */
  edges: Array<RootQueryToPartnerPageHeroConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<PartnerPageHero>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToPartnerPageHeroConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToPartnerPageHeroConnectionEdge = Edge & PartnerPageHeroConnectionEdge & {
  __typename?: 'RootQueryToPartnerPageHeroConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: PartnerPageHero;
};

/** Pagination metadata specific to &quot;RootQueryToPartnerPageHeroConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToPartnerPageHeroConnection Nodes. */
export type RootQueryToPartnerPageHeroConnectionPageInfo = PageInfo & PartnerPageHeroConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToPartnerPageHeroConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToPartnerPageHeroConnection connection */
export type RootQueryToPartnerPageHeroConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the partnersTickerItem type */
export type RootQueryToPartnersTickerItemConnection = Connection & PartnersTickerItemConnection & {
  __typename?: 'RootQueryToPartnersTickerItemConnection';
  /** Edges for the RootQueryToPartnersTickerItemConnection connection */
  edges: Array<RootQueryToPartnersTickerItemConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<PartnersTickerItem>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToPartnersTickerItemConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToPartnersTickerItemConnectionEdge = Edge & PartnersTickerItemConnectionEdge & {
  __typename?: 'RootQueryToPartnersTickerItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: PartnersTickerItem;
};

/** Pagination metadata specific to &quot;RootQueryToPartnersTickerItemConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToPartnersTickerItemConnection Nodes. */
export type RootQueryToPartnersTickerItemConnectionPageInfo = PageInfo & PartnersTickerItemConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToPartnersTickerItemConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToPartnersTickerItemConnection connection */
export type RootQueryToPartnersTickerItemConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the Plugin type */
export type RootQueryToPluginConnection = Connection & PluginConnection & {
  __typename?: 'RootQueryToPluginConnection';
  /** Edges for the RootQueryToPluginConnection connection */
  edges: Array<RootQueryToPluginConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Plugin>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToPluginConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToPluginConnectionEdge = Edge & PluginConnectionEdge & {
  __typename?: 'RootQueryToPluginConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Plugin;
};

/** Pagination metadata specific to &quot;RootQueryToPluginConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToPluginConnection Nodes. */
export type RootQueryToPluginConnectionPageInfo = PageInfo & PluginConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToPluginConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToPluginConnection connection */
export type RootQueryToPluginConnectionWhereArgs = {
  /** Show plugin based on a keyword search. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve plugins where plugin status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PluginStatusEnum>>>;
  /** Show plugins with a specific status. */
  status?: InputMaybe<PluginStatusEnum>;
};

/** Connection between the RootQuery type and the post type */
export type RootQueryToPostConnection = Connection & PostConnection & {
  __typename?: 'RootQueryToPostConnection';
  /** Edges for the RootQueryToPostConnection connection */
  edges: Array<RootQueryToPostConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToPostConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToPostConnectionEdge = Edge & PostConnectionEdge & {
  __typename?: 'RootQueryToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Post;
};

/** Pagination metadata specific to &quot;RootQueryToPostConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToPostConnection Nodes. */
export type RootQueryToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToPostConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToPostConnection connection */
export type RootQueryToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']['input']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']['input']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag slugs, used to display objects from one tag AND another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of tag slugs, used to include objects in ANY specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the postFormat type */
export type RootQueryToPostFormatConnection = Connection & PostFormatConnection & {
  __typename?: 'RootQueryToPostFormatConnection';
  /** Edges for the RootQueryToPostFormatConnection connection */
  edges: Array<RootQueryToPostFormatConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<PostFormat>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToPostFormatConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToPostFormatConnectionEdge = Edge & PostFormatConnectionEdge & {
  __typename?: 'RootQueryToPostFormatConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: PostFormat;
};

/** Pagination metadata specific to &quot;RootQueryToPostFormatConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToPostFormatConnection Nodes. */
export type RootQueryToPostFormatConnectionPageInfo = PageInfo & PostFormatConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToPostFormatConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToPostFormatConnection connection */
export type RootQueryToPostFormatConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the RootQuery type and the ContentNode type */
export type RootQueryToRevisionsConnection = Connection & ContentNodeConnection & {
  __typename?: 'RootQueryToRevisionsConnection';
  /** Edges for the RootQueryToRevisionsConnection connection */
  edges: Array<RootQueryToRevisionsConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToRevisionsConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToRevisionsConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'RootQueryToRevisionsConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Pagination metadata specific to &quot;RootQueryToRevisionsConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToRevisionsConnection Nodes. */
export type RootQueryToRevisionsConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToRevisionsConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToRevisionsConnection connection */
export type RootQueryToRevisionsConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the tag type */
export type RootQueryToTagConnection = Connection & TagConnection & {
  __typename?: 'RootQueryToTagConnection';
  /** Edges for the RootQueryToTagConnection connection */
  edges: Array<RootQueryToTagConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Tag>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToTagConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToTagConnectionEdge = Edge & TagConnectionEdge & {
  __typename?: 'RootQueryToTagConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Tag;
};

/** Pagination metadata specific to &quot;RootQueryToTagConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToTagConnection Nodes. */
export type RootQueryToTagConnectionPageInfo = PageInfo & TagConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToTagConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToTagConnection connection */
export type RootQueryToTagConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the RootQuery type and the Taxonomy type */
export type RootQueryToTaxonomyConnection = Connection & TaxonomyConnection & {
  __typename?: 'RootQueryToTaxonomyConnection';
  /** Edges for the RootQueryToTaxonomyConnection connection */
  edges: Array<RootQueryToTaxonomyConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Taxonomy>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToTaxonomyConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToTaxonomyConnectionEdge = Edge & TaxonomyConnectionEdge & {
  __typename?: 'RootQueryToTaxonomyConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Taxonomy;
};

/** Pagination metadata specific to &quot;RootQueryToTaxonomyConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToTaxonomyConnection Nodes. */
export type RootQueryToTaxonomyConnectionPageInfo = PageInfo & TaxonomyConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToTaxonomyConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the RootQuery type and the TermNode type */
export type RootQueryToTermNodeConnection = Connection & TermNodeConnection & {
  __typename?: 'RootQueryToTermNodeConnection';
  /** Edges for the RootQueryToTermNodeConnection connection */
  edges: Array<RootQueryToTermNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<TermNode>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToTermNodeConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToTermNodeConnectionEdge = Edge & TermNodeConnectionEdge & {
  __typename?: 'RootQueryToTermNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: TermNode;
};

/** Pagination metadata specific to &quot;RootQueryToTermNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToTermNodeConnection Nodes. */
export type RootQueryToTermNodeConnectionPageInfo = PageInfo & TermNodeConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToTermNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToTermNodeConnection connection */
export type RootQueryToTermNodeConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the RootQuery type and the Theme type */
export type RootQueryToThemeConnection = Connection & ThemeConnection & {
  __typename?: 'RootQueryToThemeConnection';
  /** Edges for the RootQueryToThemeConnection connection */
  edges: Array<RootQueryToThemeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Theme>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToThemeConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToThemeConnectionEdge = Edge & ThemeConnectionEdge & {
  __typename?: 'RootQueryToThemeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Theme;
};

/** Pagination metadata specific to &quot;RootQueryToThemeConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToThemeConnection Nodes. */
export type RootQueryToThemeConnectionPageInfo = PageInfo & ThemeConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToThemeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the RootQuery type and the User type */
export type RootQueryToUserConnection = Connection & UserConnection & {
  __typename?: 'RootQueryToUserConnection';
  /** Edges for the RootQueryToUserConnection connection */
  edges: Array<RootQueryToUserConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<User>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToUserConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToUserConnectionEdge = Edge & UserConnectionEdge & {
  __typename?: 'RootQueryToUserConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: User;
};

/** Pagination metadata specific to &quot;RootQueryToUserConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToUserConnection Nodes. */
export type RootQueryToUserConnectionPageInfo = PageInfo & UserConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToUserConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToUserConnection connection */
export type RootQueryToUserConnectionWhereArgs = {
  /** Array of userIds to exclude. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** Pass an array of post types to filter results to users who have published posts in those post types. */
  hasPublishedPosts?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of userIds to include. */
  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** The user login. */
  login?: InputMaybe<Scalars['String']['input']>;
  /** An array of logins to include. Users matching one of these logins will be included in results. */
  loginIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** An array of logins to exclude. Users matching one of these logins will not be included in results. */
  loginNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** The user nicename. */
  nicename?: InputMaybe<Scalars['String']['input']>;
  /** An array of nicenames to include. Users matching one of these nicenames will be included in results. */
  nicenameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** An array of nicenames to exclude. Users matching one of these nicenames will not be included in results. */
  nicenameNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<UsersConnectionOrderbyInput>>>;
  /** An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role. */
  role?: InputMaybe<UserRoleEnum>;
  /** An array of role names. Matched users must have at least one of these roles. */
  roleIn?: InputMaybe<Array<InputMaybe<UserRoleEnum>>>;
  /** An array of role names to exclude. Users matching one or more of these roles will not be included in results. */
  roleNotIn?: InputMaybe<Array<InputMaybe<UserRoleEnum>>>;
  /** Search keyword. Searches for possible string matches on columns. When "searchColumns" is left empty, it tries to determine which column to search in based on search string. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'. */
  searchColumns?: InputMaybe<Array<InputMaybe<UsersConnectionSearchColumnEnum>>>;
};

/** Connection between the RootQuery type and the UserRole type */
export type RootQueryToUserRoleConnection = Connection & UserRoleConnection & {
  __typename?: 'RootQueryToUserRoleConnection';
  /** Edges for the RootQueryToUserRoleConnection connection */
  edges: Array<RootQueryToUserRoleConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<UserRole>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToUserRoleConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToUserRoleConnectionEdge = Edge & UserRoleConnectionEdge & {
  __typename?: 'RootQueryToUserRoleConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: UserRole;
};

/** Pagination metadata specific to &quot;RootQueryToUserRoleConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToUserRoleConnection Nodes. */
export type RootQueryToUserRoleConnectionPageInfo = PageInfo & UserRoleConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToUserRoleConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the RootQuery type and the uwContactInfo type */
export type RootQueryToUwContactInfoConnection = Connection & UwContactInfoConnection & {
  __typename?: 'RootQueryToUwContactInfoConnection';
  /** Edges for the RootQueryToUwContactInfoConnection connection */
  edges: Array<RootQueryToUwContactInfoConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<UwContactInfo>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToUwContactInfoConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToUwContactInfoConnectionEdge = Edge & UwContactInfoConnectionEdge & {
  __typename?: 'RootQueryToUwContactInfoConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: UwContactInfo;
};

/** Pagination metadata specific to &quot;RootQueryToUwContactInfoConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToUwContactInfoConnection Nodes. */
export type RootQueryToUwContactInfoConnectionPageInfo = PageInfo & UwContactInfoConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToUwContactInfoConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToUwContactInfoConnection connection */
export type RootQueryToUwContactInfoConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the valuesHistory type */
export type RootQueryToValuesHistoryConnection = Connection & ValuesHistoryConnection & {
  __typename?: 'RootQueryToValuesHistoryConnection';
  /** Edges for the RootQueryToValuesHistoryConnection connection */
  edges: Array<RootQueryToValuesHistoryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ValuesHistory>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToValuesHistoryConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToValuesHistoryConnectionEdge = Edge & ValuesHistoryConnectionEdge & {
  __typename?: 'RootQueryToValuesHistoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ValuesHistory;
};

/** Pagination metadata specific to &quot;RootQueryToValuesHistoryConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToValuesHistoryConnection Nodes. */
export type RootQueryToValuesHistoryConnectionPageInfo = PageInfo & ValuesHistoryConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToValuesHistoryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToValuesHistoryConnection connection */
export type RootQueryToValuesHistoryConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the vitaTaxPrep type */
export type RootQueryToVitaTaxPrepConnection = Connection & VitaTaxPrepConnection & {
  __typename?: 'RootQueryToVitaTaxPrepConnection';
  /** Edges for the RootQueryToVitaTaxPrepConnection connection */
  edges: Array<RootQueryToVitaTaxPrepConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<VitaTaxPrep>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToVitaTaxPrepConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToVitaTaxPrepConnectionEdge = Edge & VitaTaxPrepConnectionEdge & {
  __typename?: 'RootQueryToVitaTaxPrepConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: VitaTaxPrep;
};

/** Pagination metadata specific to &quot;RootQueryToVitaTaxPrepConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToVitaTaxPrepConnection Nodes. */
export type RootQueryToVitaTaxPrepConnectionPageInfo = PageInfo & VitaTaxPrepConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToVitaTaxPrepConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToVitaTaxPrepConnection connection */
export type RootQueryToVitaTaxPrepConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the ymcaComponent type */
export type RootQueryToYmcaComponentConnection = Connection & YmcaComponentConnection & {
  __typename?: 'RootQueryToYmcaComponentConnection';
  /** Edges for the RootQueryToYmcaComponentConnection connection */
  edges: Array<RootQueryToYmcaComponentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<YmcaComponent>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToYmcaComponentConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToYmcaComponentConnectionEdge = Edge & YmcaComponentConnectionEdge & {
  __typename?: 'RootQueryToYmcaComponentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: YmcaComponent;
};

/** Pagination metadata specific to &quot;RootQueryToYmcaComponentConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToYmcaComponentConnection Nodes. */
export type RootQueryToYmcaComponentConnectionPageInfo = PageInfo & WpPageInfo & YmcaComponentConnectionPageInfo & {
  __typename?: 'RootQueryToYmcaComponentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToYmcaComponentConnection connection */
export type RootQueryToYmcaComponentConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Script insertion positions in the document structure. Determines whether scripts are placed in the document head or before the closing body tag. */
export enum ScriptLoadingGroupLocationEnum {
  /** Delayed loading at end of document, right before the closing `<body>` tag. (allows content to render first) */
  Footer = 'FOOTER',
  /** Early loading in document `<head>` tag. (executes before page content renders) */
  Header = 'HEADER'
}

/** Script loading optimization attributes. Controls browser behavior for script loading to improve page performance (async or defer). */
export enum ScriptLoadingStrategyEnum {
  /** Load script in parallel with page rendering, executing as soon as downloaded */
  Async = 'ASYNC',
  /** Download script in parallel but defer execution until page is fully parsed */
  Defer = 'DEFER'
}

/** Input for the sendPasswordResetEmail mutation. */
export type SendPasswordResetEmailInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains the user's username or email address. */
  username: Scalars['String']['input'];
};

/** The payload for the sendPasswordResetEmail mutation. */
export type SendPasswordResetEmailPayload = {
  __typename?: 'SendPasswordResetEmailPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Whether the mutation completed successfully. This does NOT necessarily mean that an email was sent. */
  success?: Maybe<Scalars['Boolean']['output']>;
  /**
   * The user that the password reset email was sent to
   * @deprecated This field will be removed in a future version of WPGraphQL
   */
  user?: Maybe<User>;
};

/** All of the registered settings */
export type Settings = {
  __typename?: 'Settings';
  /** Settings of the the string Settings Group */
  discussionSettingsDefaultCommentStatus?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  discussionSettingsDefaultPingStatus?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsDateFormat?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsDescription?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsEmail?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsLanguage?: Maybe<Scalars['String']['output']>;
  /** Settings of the the integer Settings Group */
  generalSettingsStartOfWeek?: Maybe<Scalars['Int']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsTimeFormat?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsTimezone?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsTitle?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsUrl?: Maybe<Scalars['String']['output']>;
  /** Settings of the the integer Settings Group */
  readingSettingsPageForPosts?: Maybe<Scalars['Int']['output']>;
  /** Settings of the the integer Settings Group */
  readingSettingsPageOnFront?: Maybe<Scalars['Int']['output']>;
  /** Settings of the the integer Settings Group */
  readingSettingsPostsPerPage?: Maybe<Scalars['Int']['output']>;
  /** Settings of the the string Settings Group */
  readingSettingsShowOnFront?: Maybe<Scalars['String']['output']>;
  /** Settings of the the integer Settings Group */
  writingSettingsDefaultCategory?: Maybe<Scalars['Int']['output']>;
  /** Settings of the the string Settings Group */
  writingSettingsDefaultPostFormat?: Maybe<Scalars['String']['output']>;
  /** Settings of the the boolean Settings Group */
  writingSettingsUseSmilies?: Maybe<Scalars['Boolean']['output']>;
};

/** A taxonomy term used to organize and classify content. Tags do not have a hierarchy and are generally used for more specific classifications. */
export type Tag = DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable & {
  __typename?: 'Tag';
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the Tag type and the ContentNode type */
  contentNodes?: Maybe<TagToContentNodeConnection>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The description of the object */
  description?: Maybe<Scalars['String']['output']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The link to the term */
  link?: Maybe<Scalars['String']['output']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']['output']>;
  /** Connection between the Tag type and the post type */
  posts?: Maybe<TagToPostConnection>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  tagId?: Maybe<Scalars['Int']['output']>;
  /** Connection between the Tag type and the Taxonomy type */
  taxonomy?: Maybe<TagToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']['output']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** A taxonomy term used to organize and classify content. Tags do not have a hierarchy and are generally used for more specific classifications. */
export type TagContentNodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TagToContentNodeConnectionWhereArgs>;
};


/** A taxonomy term used to organize and classify content. Tags do not have a hierarchy and are generally used for more specific classifications. */
export type TagEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A taxonomy term used to organize and classify content. Tags do not have a hierarchy and are generally used for more specific classifications. */
export type TagEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A taxonomy term used to organize and classify content. Tags do not have a hierarchy and are generally used for more specific classifications. */
export type TagPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TagToPostConnectionWhereArgs>;
};

/** A paginated collection of tag Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of tag Nodes */
export type TagConnection = {
  /** A list of edges (relational context) between RootQuery and connected tag Nodes */
  edges: Array<TagConnectionEdge>;
  /** A list of connected tag Nodes */
  nodes: Array<Tag>;
  /** Information about pagination in a connection. */
  pageInfo: TagConnectionPageInfo;
};

/** Represents a connection to a tag. Contains both the tag Node and metadata about the relationship. */
export type TagConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected tag Node */
  node: Tag;
};

/** Pagination metadata specific to &quot;TagConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;TagConnectionEdge&quot; Nodes. */
export type TagConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific Tag. Determines which unique property (global ID, database ID, slug, etc.) is used to locate the Tag. */
export enum TagIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the Tag type and the ContentNode type */
export type TagToContentNodeConnection = Connection & ContentNodeConnection & {
  __typename?: 'TagToContentNodeConnection';
  /** Edges for the TagToContentNodeConnection connection */
  edges: Array<TagToContentNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: TagToContentNodeConnectionPageInfo;
};

/** An edge in a connection */
export type TagToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'TagToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Pagination metadata specific to &quot;TagToContentNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of TagToContentNodeConnection Nodes. */
export type TagToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'TagToContentNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the TagToContentNodeConnection connection */
export type TagToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfTagEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the Tag type and the post type */
export type TagToPostConnection = Connection & PostConnection & {
  __typename?: 'TagToPostConnection';
  /** Edges for the TagToPostConnection connection */
  edges: Array<TagToPostConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: TagToPostConnectionPageInfo;
};

/** An edge in a connection */
export type TagToPostConnectionEdge = Edge & PostConnectionEdge & {
  __typename?: 'TagToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Post;
};

/** Pagination metadata specific to &quot;TagToPostConnection&quot; collections. Provides cursors and flags for navigating through sets of TagToPostConnection Nodes. */
export type TagToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {
  __typename?: 'TagToPostConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the TagToPostConnection connection */
export type TagToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']['input']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']['input']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag slugs, used to display objects from one tag AND another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of tag slugs, used to include objects in ANY specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the Tag type and the Taxonomy type */
export type TagToTaxonomyConnectionEdge = Edge & OneToOneConnection & TaxonomyConnectionEdge & {
  __typename?: 'TagToTaxonomyConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Taxonomy;
};

/** A taxonomy object */
export type Taxonomy = Node & {
  __typename?: 'Taxonomy';
  /** List of Content Types associated with the Taxonomy */
  connectedContentTypes?: Maybe<TaxonomyToContentTypeConnection>;
  /** List of Term Nodes associated with the Taxonomy */
  connectedTerms?: Maybe<TaxonomyToTermNodeConnection>;
  /** Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description */
  description?: Maybe<Scalars['String']['output']>;
  /** The plural name of the post type within the GraphQL Schema. */
  graphqlPluralName?: Maybe<Scalars['String']['output']>;
  /** The singular name of the post type within the GraphQL Schema. */
  graphqlSingleName?: Maybe<Scalars['String']['output']>;
  /** Whether the taxonomy is hierarchical */
  hierarchical?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the taxonomy object. */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Name of the taxonomy shown in the menu. Usually plural. */
  label?: Maybe<Scalars['String']['output']>;
  /** The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label */
  name?: Maybe<Scalars['String']['output']>;
  /** Whether the taxonomy is publicly queryable */
  public?: Maybe<Scalars['Boolean']['output']>;
  /** Name of content type to display in REST API &quot;wp/v2&quot; namespace. */
  restBase?: Maybe<Scalars['String']['output']>;
  /** The REST Controller class assigned to handling this content type. */
  restControllerClass?: Maybe<Scalars['String']['output']>;
  /** Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud */
  showCloud?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to display a column for the taxonomy on its post type listing screens. */
  showInAdminColumn?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to add the post type to the GraphQL Schema. */
  showInGraphql?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to show the taxonomy in the admin menu */
  showInMenu?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the taxonomy is available for selection in navigation menus. */
  showInNavMenus?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to show the taxonomy in the quick/bulk edit panel. */
  showInQuickEdit?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace. */
  showInRest?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to generate and allow a UI for managing terms in this taxonomy in the admin */
  showUi?: Maybe<Scalars['Boolean']['output']>;
};


/** A taxonomy object */
export type TaxonomyConnectedContentTypesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A taxonomy object */
export type TaxonomyConnectedTermsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** A paginated collection of Taxonomy Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of Taxonomy Nodes */
export type TaxonomyConnection = {
  /** A list of edges (relational context) between RootQuery and connected Taxonomy Nodes */
  edges: Array<TaxonomyConnectionEdge>;
  /** A list of connected Taxonomy Nodes */
  nodes: Array<Taxonomy>;
  /** Information about pagination in a connection. */
  pageInfo: TaxonomyConnectionPageInfo;
};

/** Represents a connection to a Taxonomy. Contains both the Taxonomy Node and metadata about the relationship. */
export type TaxonomyConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected Taxonomy Node */
  node: Taxonomy;
};

/** Pagination metadata specific to &quot;TaxonomyConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;TaxonomyConnectionEdge&quot; Nodes. */
export type TaxonomyConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Available classification systems for organizing content. Identifies the different taxonomy types that can be used for content categorization. */
export enum TaxonomyEnum {
  /** Taxonomy enum category */
  Category = 'CATEGORY',
  /** Taxonomy enum post_format */
  Postformat = 'POSTFORMAT',
  /** Taxonomy enum post_tag */
  Tag = 'TAG'
}

/** Identifier types for retrieving a taxonomy definition. Determines whether to look up taxonomies by ID or name. */
export enum TaxonomyIdTypeEnum {
  /** The globally unique ID */
  Id = 'ID',
  /** The name of the taxonomy */
  Name = 'NAME'
}

/** Connection between the Taxonomy type and the ContentType type */
export type TaxonomyToContentTypeConnection = Connection & ContentTypeConnection & {
  __typename?: 'TaxonomyToContentTypeConnection';
  /** Edges for the TaxonomyToContentTypeConnection connection */
  edges: Array<TaxonomyToContentTypeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentType>;
  /** Information about pagination in a connection. */
  pageInfo: TaxonomyToContentTypeConnectionPageInfo;
};

/** An edge in a connection */
export type TaxonomyToContentTypeConnectionEdge = ContentTypeConnectionEdge & Edge & {
  __typename?: 'TaxonomyToContentTypeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentType;
};

/** Pagination metadata specific to &quot;TaxonomyToContentTypeConnection&quot; collections. Provides cursors and flags for navigating through sets of TaxonomyToContentTypeConnection Nodes. */
export type TaxonomyToContentTypeConnectionPageInfo = ContentTypeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'TaxonomyToContentTypeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the Taxonomy type and the TermNode type */
export type TaxonomyToTermNodeConnection = Connection & TermNodeConnection & {
  __typename?: 'TaxonomyToTermNodeConnection';
  /** Edges for the TaxonomyToTermNodeConnection connection */
  edges: Array<TaxonomyToTermNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<TermNode>;
  /** Information about pagination in a connection. */
  pageInfo: TaxonomyToTermNodeConnectionPageInfo;
};

/** An edge in a connection */
export type TaxonomyToTermNodeConnectionEdge = Edge & TermNodeConnectionEdge & {
  __typename?: 'TaxonomyToTermNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: TermNode;
};

/** Pagination metadata specific to &quot;TaxonomyToTermNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of TaxonomyToTermNodeConnection Nodes. */
export type TaxonomyToTermNodeConnectionPageInfo = PageInfo & TermNodeConnectionPageInfo & WpPageInfo & {
  __typename?: 'TaxonomyToTermNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The template assigned to the node */
export type Template_PageNoTitle = ContentTemplate & {
  __typename?: 'Template_PageNoTitle';
  /** The name of the template */
  templateName?: Maybe<Scalars['String']['output']>;
};

/** Base interface for taxonomy terms such as categories and tags. Terms are used to organize and classify content. */
export type TermNode = {
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']['output']>;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int']['output'];
  /** The description of the object */
  description?: Maybe<Scalars['String']['output']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The link to the term */
  link?: Maybe<Scalars['String']['output']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']['output']>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']['output']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** Base interface for taxonomy terms such as categories and tags. Terms are used to organize and classify content. */
export type TermNodeEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Base interface for taxonomy terms such as categories and tags. Terms are used to organize and classify content. */
export type TermNodeEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** A paginated collection of TermNode Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of TermNode Nodes */
export type TermNodeConnection = {
  /** A list of edges (relational context) between RootQuery and connected TermNode Nodes */
  edges: Array<TermNodeConnectionEdge>;
  /** A list of connected TermNode Nodes */
  nodes: Array<TermNode>;
  /** Information about pagination in a connection. */
  pageInfo: TermNodeConnectionPageInfo;
};

/** Represents a connection to a TermNode. Contains both the TermNode Node and metadata about the relationship. */
export type TermNodeConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected TermNode Node */
  node: TermNode;
};

/** Pagination metadata specific to &quot;TermNodeConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;TermNodeConnectionEdge&quot; Nodes. */
export type TermNodeConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is "ID". To be used along with the "id" field. */
export enum TermNodeIdTypeEnum {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the TermNode type and the EnqueuedScript type */
export type TermNodeToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {
  __typename?: 'TermNodeToEnqueuedScriptConnection';
  /** Edges for the TermNodeToEnqueuedScriptConnection connection */
  edges: Array<TermNodeToEnqueuedScriptConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedScript>;
  /** Information about pagination in a connection. */
  pageInfo: TermNodeToEnqueuedScriptConnectionPageInfo;
};

/** An edge in a connection */
export type TermNodeToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {
  __typename?: 'TermNodeToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedScript;
};

/** Pagination metadata specific to &quot;TermNodeToEnqueuedScriptConnection&quot; collections. Provides cursors and flags for navigating through sets of TermNodeToEnqueuedScriptConnection Nodes. */
export type TermNodeToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'TermNodeToEnqueuedScriptConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the TermNode type and the EnqueuedStylesheet type */
export type TermNodeToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {
  __typename?: 'TermNodeToEnqueuedStylesheetConnection';
  /** Edges for the TermNodeToEnqueuedStylesheetConnection connection */
  edges: Array<TermNodeToEnqueuedStylesheetConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedStylesheet>;
  /** Information about pagination in a connection. */
  pageInfo: TermNodeToEnqueuedStylesheetConnectionPageInfo;
};

/** An edge in a connection */
export type TermNodeToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {
  __typename?: 'TermNodeToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedStylesheet;
};

/** Pagination metadata specific to &quot;TermNodeToEnqueuedStylesheetConnection&quot; collections. Provides cursors and flags for navigating through sets of TermNodeToEnqueuedStylesheetConnection Nodes. */
export type TermNodeToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'TermNodeToEnqueuedStylesheetConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Sorting attributes for taxonomy term collections. Determines which property of taxonomy terms is used for ordering results. */
export enum TermObjectsConnectionOrderbyEnum {
  /** Ordering by number of associated content items. */
  Count = 'COUNT',
  /** Alphabetical ordering by term description text. */
  Description = 'DESCRIPTION',
  /** Alphabetical ordering by term name. */
  Name = 'NAME',
  /** Alphabetical ordering by URL-friendly name. */
  Slug = 'SLUG',
  /** Ordering by assigned term grouping value. */
  TermGroup = 'TERM_GROUP',
  /** Ordering by internal identifier. */
  TermId = 'TERM_ID',
  /** Ordering by manually defined sort position. */
  TermOrder = 'TERM_ORDER'
}

/** A theme object */
export type Theme = Node & {
  __typename?: 'Theme';
  /** Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; ). */
  author?: Maybe<Scalars['String']['output']>;
  /** URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; ). */
  authorUri?: Maybe<Scalars['String']['output']>;
  /** The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; ). */
  description?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the theme object. */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; ). */
  name?: Maybe<Scalars['String']['output']>;
  /** The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot(). */
  screenshot?: Maybe<Scalars['String']['output']>;
  /** The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet(). */
  slug?: Maybe<Scalars['String']['output']>;
  /** URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; ). */
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; ). */
  themeUri?: Maybe<Scalars['String']['output']>;
  /** The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; ). */
  version?: Maybe<Scalars['String']['output']>;
};

/** A paginated collection of Theme Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of Theme Nodes */
export type ThemeConnection = {
  /** A list of edges (relational context) between RootQuery and connected Theme Nodes */
  edges: Array<ThemeConnectionEdge>;
  /** A list of connected Theme Nodes */
  nodes: Array<Theme>;
  /** Information about pagination in a connection. */
  pageInfo: ThemeConnectionPageInfo;
};

/** Represents a connection to a Theme. Contains both the Theme Node and metadata about the relationship. */
export type ThemeConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected Theme Node */
  node: Theme;
};

/** Pagination metadata specific to &quot;ThemeConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;ThemeConnectionEdge&quot; Nodes. */
export type ThemeConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;UWContactInformationFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type UwContactInformationFields = AcfFieldGroup & AcfFieldGroupFields & UwContactInformationFields_Fields & {
  __typename?: 'UWContactInformationFields';
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  city?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  facebookLink?: Maybe<Scalars['String']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  googleMapsUrl?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  instagramLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  linkedinLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  phoneNumber?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  state?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  streetAddress?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  zip?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;UWContactInformationFields&quot; Field Group */
export type UwContactInformationFields_Fields = {
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  city?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  facebookLink?: Maybe<Scalars['String']['output']>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  googleMapsUrl?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  instagramLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  linkedinLink?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  phoneNumber?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  state?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  streetAddress?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;UWContactInformationFields&quot; Field Group */
  zip?: Maybe<Scalars['String']['output']>;
};

/** An interface for content that can be accessed via a unique URI/URL path. Implemented by content types that have their own permalinks. */
export type UniformResourceIdentifiable = {
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};

/** Input for the updateAdminCostPdf mutation. */
export type UpdateAdminCostPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the adminCostPdf object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateAdminCostPdf mutation. */
export type UpdateAdminCostPdfPayload = {
  __typename?: 'UpdateAdminCostPdfPayload';
  /** The Post object mutation type. */
  adminCostPdf?: Maybe<AdminCostPdf>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the updateAliceHubProgram mutation. */
export type UpdateAliceHubProgramInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the aliceHubProgram object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateAliceHubProgram mutation. */
export type UpdateAliceHubProgramPayload = {
  __typename?: 'UpdateAliceHubProgramPayload';
  /** The Post object mutation type. */
  aliceHubProgram?: Maybe<AliceHubProgram>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the updateAliceReportPage mutation. */
export type UpdateAliceReportPageInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the aliceReportPage object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateAliceReportPage mutation. */
export type UpdateAliceReportPagePayload = {
  __typename?: 'UpdateAliceReportPagePayload';
  /** The Post object mutation type. */
  aliceReportPage?: Maybe<AliceReportPage>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the updateAliceReportPdf mutation. */
export type UpdateAliceReportPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the aliceReportPdf object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateAliceReportPdf mutation. */
export type UpdateAliceReportPdfPayload = {
  __typename?: 'UpdateAliceReportPdfPayload';
  /** The Post object mutation type. */
  aliceReportPdf?: Maybe<AliceReportPdf>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the updateAliceStats mutation. */
export type UpdateAliceStatsInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the aliceStats object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateAliceStats mutation. */
export type UpdateAliceStatsPayload = {
  __typename?: 'UpdateAliceStatsPayload';
  /** The Post object mutation type. */
  aliceStats?: Maybe<AliceStats>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the updateCampaignToolkitAsset mutation. */
export type UpdateCampaignToolkitAssetInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the campaignToolkitAsset object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateCampaignToolkitAsset mutation. */
export type UpdateCampaignToolkitAssetPayload = {
  __typename?: 'UpdateCampaignToolkitAssetPayload';
  /** The Post object mutation type. */
  campaignToolkitAsset?: Maybe<CampaignToolkitAsset>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the updateCategory mutation. */
export type UpdateCategoryInput = {
  /** The slug that the category will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the category object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the category object to update */
  id: Scalars['ID']['input'];
  /** The name of the category object to mutate */
  name?: InputMaybe<Scalars['String']['input']>;
  /** The database ID of the category that should be set as the parent. This field cannot be used in conjunction with parentId */
  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the category that should be set as the parent. This field cannot be used in conjunction with parentDatabaseId */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateCategory mutation. */
export type UpdateCategoryPayload = {
  __typename?: 'UpdateCategoryPayload';
  /** The created category */
  category?: Maybe<Category>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the updateComment mutation. */
export type UpdateCommentInput = {
  /** The name of the comment's author. */
  author?: InputMaybe<Scalars['String']['input']>;
  /** The email of the comment's author. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** The url of the comment's author. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The database ID of the post object the comment belongs to. */
  commentOn?: InputMaybe<Scalars['Int']['input']>;
  /** Content of the comment. */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the comment being updated. */
  id: Scalars['ID']['input'];
  /** Parent comment ID of current comment. */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** The approval status of the comment */
  status?: InputMaybe<CommentStatusEnum>;
  /** Type of comment. */
  type?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateComment mutation. */
export type UpdateCommentPayload = {
  __typename?: 'UpdateCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The comment that was created */
  comment?: Maybe<Comment>;
  /** Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache */
  success?: Maybe<Scalars['Boolean']['output']>;
};

/** Input for the updateCurrent990FormPdf mutation. */
export type UpdateCurrent990FormPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the current990FormPdf object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateCurrent990FormPdf mutation. */
export type UpdateCurrent990FormPdfPayload = {
  __typename?: 'UpdateCurrent990FormPdfPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  current990FormPdf?: Maybe<Current990FormPdf>;
};

/** Input for the updateDonorPrivacyPolicyPdf mutation. */
export type UpdateDonorPrivacyPolicyPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the donorPrivacyPolicyPdf object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateDonorPrivacyPolicyPdf mutation. */
export type UpdateDonorPrivacyPolicyPdfPayload = {
  __typename?: 'UpdateDonorPrivacyPolicyPdfPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  donorPrivacyPolicyPdf?: Maybe<DonorPrivacyPolicyPdf>;
};

/** Input for the updateFaq mutation. */
export type UpdateFaqInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the faq object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateFaq mutation. */
export type UpdateFaqPayload = {
  __typename?: 'UpdateFaqPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  faq?: Maybe<Faq>;
};

/** Input for the updateFourPillarsHeroComponent mutation. */
export type UpdateFourPillarsHeroComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the fourPillarsHeroComponent object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateFourPillarsHeroComponent mutation. */
export type UpdateFourPillarsHeroComponentPayload = {
  __typename?: 'UpdateFourPillarsHeroComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  fourPillarsHeroComponent?: Maybe<FourPillarsHeroComponent>;
};

/** Input for the updateFourPillarsPreview mutation. */
export type UpdateFourPillarsPreviewInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the fourPillarsPreview object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateFourPillarsPreview mutation. */
export type UpdateFourPillarsPreviewPayload = {
  __typename?: 'UpdateFourPillarsPreviewPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  fourPillarsPreview?: Maybe<FourPillarsPreview>;
};

/** Input for the updateGetInvolvedHero mutation. */
export type UpdateGetInvolvedHeroInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the getInvolvedHero object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateGetInvolvedHero mutation. */
export type UpdateGetInvolvedHeroPayload = {
  __typename?: 'UpdateGetInvolvedHeroPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  getInvolvedHero?: Maybe<GetInvolvedHero>;
};

/** Input for the updateGiftAcceptancePolicyPdf mutation. */
export type UpdateGiftAcceptancePolicyPdfInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the giftAcceptancePolicyPdf object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateGiftAcceptancePolicyPdf mutation. */
export type UpdateGiftAcceptancePolicyPdfPayload = {
  __typename?: 'UpdateGiftAcceptancePolicyPdfPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  giftAcceptancePolicyPdf?: Maybe<GiftAcceptancePolicyPdf>;
};

/** Input for the updateGirlScoutsComponent mutation. */
export type UpdateGirlScoutsComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the girlScoutsComponent object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateGirlScoutsComponent mutation. */
export type UpdateGirlScoutsComponentPayload = {
  __typename?: 'UpdateGirlScoutsComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  girlScoutsComponent?: Maybe<GirlScoutsComponent>;
};

/** Input for the updateHeroComponentOurImpactPage mutation. */
export type UpdateHeroComponentOurImpactPageInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the heroComponentOurImpactPage object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateHeroComponentOurImpactPage mutation. */
export type UpdateHeroComponentOurImpactPagePayload = {
  __typename?: 'UpdateHeroComponentOurImpactPagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  heroComponentOurImpactPage?: Maybe<HeroComponentOurImpactPage>;
};

/** Input for the updateHomePageHero mutation. */
export type UpdateHomePageHeroInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the homePageHero object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateHomePageHero mutation. */
export type UpdateHomePageHeroPayload = {
  __typename?: 'UpdateHomePageHeroPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  homePageHero?: Maybe<HomePageHero>;
};

/** Input for the updateHowToContributeComponent mutation. */
export type UpdateHowToContributeComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the howToContributeComponent object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateHowToContributeComponent mutation. */
export type UpdateHowToContributeComponentPayload = {
  __typename?: 'UpdateHowToContributeComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  howToContributeComponent?: Maybe<HowToContributeComponent>;
};

/** Input for the updateImpactCarousel mutation. */
export type UpdateImpactCarouselInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the impactCarousel object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateImpactCarousel mutation. */
export type UpdateImpactCarouselPayload = {
  __typename?: 'UpdateImpactCarouselPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  impactCarousel?: Maybe<ImpactCarousel>;
};

/** Input for the updateImpactStatistic mutation. */
export type UpdateImpactStatisticInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the impactStatistic object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateImpactStatistic mutation. */
export type UpdateImpactStatisticPayload = {
  __typename?: 'UpdateImpactStatisticPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  impactStatistic?: Maybe<ImpactStatistic>;
};

/** Input for the updateIndividualsPageHero mutation. */
export type UpdateIndividualsPageHeroInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the individualsPageHero object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateIndividualsPageHero mutation. */
export type UpdateIndividualsPageHeroPayload = {
  __typename?: 'UpdateIndividualsPageHeroPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  individualsPageHero?: Maybe<IndividualsPageHero>;
};

/** Input for the updateMediaItem mutation. */
export type UpdateMediaItemInput = {
  /** Alternative text to display when mediaItem is not displayed */
  altText?: InputMaybe<Scalars['String']['input']>;
  /** The userId to assign as the author of the mediaItem */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** The caption for the mediaItem */
  caption?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The comment status for the mediaItem */
  commentStatus?: InputMaybe<Scalars['String']['input']>;
  /** The date of the mediaItem */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The date (in GMT zone) of the mediaItem */
  dateGmt?: InputMaybe<Scalars['String']['input']>;
  /** Description of the mediaItem */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The file name of the mediaItem */
  filePath?: InputMaybe<Scalars['String']['input']>;
  /** The file type of the mediaItem */
  fileType?: InputMaybe<MimeTypeEnum>;
  /** The ID of the mediaItem object */
  id: Scalars['ID']['input'];
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The ping status for the mediaItem */
  pingStatus?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the mediaItem */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the mediaItem */
  status?: InputMaybe<MediaItemStatusEnum>;
  /** The title of the mediaItem */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateMediaItem mutation. */
export type UpdateMediaItemPayload = {
  __typename?: 'UpdateMediaItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The MediaItem object mutation type. */
  mediaItem?: Maybe<MediaItem>;
};

/** Input for the updateMobileFoodPantryComponent mutation. */
export type UpdateMobileFoodPantryComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the mobileFoodPantryComponent object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateMobileFoodPantryComponent mutation. */
export type UpdateMobileFoodPantryComponentPayload = {
  __typename?: 'UpdateMobileFoodPantryComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  mobileFoodPantryComponent?: Maybe<MobileFoodPantryComponent>;
};

/** Input for the updateNorthwoodsAirLifeline mutation. */
export type UpdateNorthwoodsAirLifelineInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the northwoodsAirLifeline object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateNorthwoodsAirLifeline mutation. */
export type UpdateNorthwoodsAirLifelinePayload = {
  __typename?: 'UpdateNorthwoodsAirLifelinePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  northwoodsAirLifeline?: Maybe<NorthwoodsAirLifeline>;
};

/** Input for the updateOurImpactHomePage mutation. */
export type UpdateOurImpactHomePageInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the ourImpactHomePage object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateOurImpactHomePage mutation. */
export type UpdateOurImpactHomePagePayload = {
  __typename?: 'UpdateOurImpactHomePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  ourImpactHomePage?: Maybe<OurImpactHomePage>;
};

/** Input for the updatePage mutation. */
export type UpdatePageInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the page object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updatePage mutation. */
export type UpdatePagePayload = {
  __typename?: 'UpdatePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  page?: Maybe<Page>;
};

/** Input for the updatePartnerPageHero mutation. */
export type UpdatePartnerPageHeroInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the partnerPageHero object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updatePartnerPageHero mutation. */
export type UpdatePartnerPageHeroPayload = {
  __typename?: 'UpdatePartnerPageHeroPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  partnerPageHero?: Maybe<PartnerPageHero>;
};

/** Input for the updatePartnersTickerItem mutation. */
export type UpdatePartnersTickerItemInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the partnersTickerItem object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updatePartnersTickerItem mutation. */
export type UpdatePartnersTickerItemPayload = {
  __typename?: 'UpdatePartnersTickerItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  partnersTickerItem?: Maybe<PartnersTickerItem>;
};

/** Input for the updatePostFormat mutation. */
export type UpdatePostFormatInput = {
  /** The slug that the post_format will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the post_format object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the postFormat object to update */
  id: Scalars['ID']['input'];
  /** The name of the post_format object to mutate */
  name?: InputMaybe<Scalars['String']['input']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updatePostFormat mutation. */
export type UpdatePostFormatPayload = {
  __typename?: 'UpdatePostFormatPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The created post_format */
  postFormat?: Maybe<PostFormat>;
};

/** Input for the updatePost mutation. */
export type UpdatePostInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** Set connections between the post and categories */
  categories?: InputMaybe<PostCategoriesInput>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The excerpt of the object */
  excerpt?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the post object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The ping status for the object */
  pingStatus?: InputMaybe<Scalars['String']['input']>;
  /** URLs that have been pinged. */
  pinged?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Set connections between the post and postFormats */
  postFormats?: InputMaybe<PostPostFormatsInput>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** Set connections between the post and tags */
  tags?: InputMaybe<PostTagsInput>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
  /** URLs queued to be pinged. */
  toPing?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

/** The payload for the updatePost mutation. */
export type UpdatePostPayload = {
  __typename?: 'UpdatePostPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  post?: Maybe<Post>;
};

/** Input for the updateSettings mutation. */
export type UpdateSettingsInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Allow people to submit comments on new posts. */
  discussionSettingsDefaultCommentStatus?: InputMaybe<Scalars['String']['input']>;
  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
  discussionSettingsDefaultPingStatus?: InputMaybe<Scalars['String']['input']>;
  /** A date format for all date strings. */
  generalSettingsDateFormat?: InputMaybe<Scalars['String']['input']>;
  /** Site tagline. */
  generalSettingsDescription?: InputMaybe<Scalars['String']['input']>;
  /** This address is used for admin purposes, like new user notification. */
  generalSettingsEmail?: InputMaybe<Scalars['String']['input']>;
  /** WordPress locale code. */
  generalSettingsLanguage?: InputMaybe<Scalars['String']['input']>;
  /** A day number of the week that the week should start on. */
  generalSettingsStartOfWeek?: InputMaybe<Scalars['Int']['input']>;
  /** A time format for all time strings. */
  generalSettingsTimeFormat?: InputMaybe<Scalars['String']['input']>;
  /** A city in the same timezone as you. */
  generalSettingsTimezone?: InputMaybe<Scalars['String']['input']>;
  /** Site title. */
  generalSettingsTitle?: InputMaybe<Scalars['String']['input']>;
  /** Site URL. */
  generalSettingsUrl?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the page that should display the latest posts */
  readingSettingsPageForPosts?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the page that should be displayed on the front page */
  readingSettingsPageOnFront?: InputMaybe<Scalars['Int']['input']>;
  /** Blog pages show at most. */
  readingSettingsPostsPerPage?: InputMaybe<Scalars['Int']['input']>;
  /** What to show on the front page */
  readingSettingsShowOnFront?: InputMaybe<Scalars['String']['input']>;
  /** Default post category. */
  writingSettingsDefaultCategory?: InputMaybe<Scalars['Int']['input']>;
  /** Default post format. */
  writingSettingsDefaultPostFormat?: InputMaybe<Scalars['String']['input']>;
  /** Convert emoticons like :-) and :-P to graphics on display. */
  writingSettingsUseSmilies?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the updateSettings mutation. */
export type UpdateSettingsPayload = {
  __typename?: 'UpdateSettingsPayload';
  /** Update all settings. */
  allSettings?: Maybe<Settings>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Update the DiscussionSettings setting. */
  discussionSettings?: Maybe<DiscussionSettings>;
  /** Update the GeneralSettings setting. */
  generalSettings?: Maybe<GeneralSettings>;
  /** Update the ReadingSettings setting. */
  readingSettings?: Maybe<ReadingSettings>;
  /** Update the WritingSettings setting. */
  writingSettings?: Maybe<WritingSettings>;
};

/** Input for the updateTag mutation. */
export type UpdateTagInput = {
  /** The slug that the post_tag will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the post_tag object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the tag object to update */
  id: Scalars['ID']['input'];
  /** The name of the post_tag object to mutate */
  name?: InputMaybe<Scalars['String']['input']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateTag mutation. */
export type UpdateTagPayload = {
  __typename?: 'UpdateTagPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The created post_tag */
  tag?: Maybe<Tag>;
};

/** Input for the updateUser mutation. */
export type UpdateUserInput = {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** The user's first name. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the user */
  id: Scalars['ID']['input'];
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars['String']['input']>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** User's locale. */
  locale?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars['String']['input']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** If true, this will refresh the users JWT secret. */
  refreshJwtUserSecret?: InputMaybe<Scalars['Boolean']['input']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars['String']['input']>;
  /** If true, this will revoke the users JWT secret. If false, this will unrevoke the JWT secret AND issue a new one. To revoke, the user must have proper capabilities to edit users JWT secrets. */
  revokeJwtUserSecret?: InputMaybe<Scalars['Boolean']['input']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars['String']['input']>;
  /** An array of roles to be assigned to the user. */
  roles?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars['String']['input']>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateUser mutation. */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The User object mutation type. */
  user?: Maybe<User>;
};

/** Input for the updateUwContactInfo mutation. */
export type UpdateUwContactInfoInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the uwContactInfo object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateUwContactInfo mutation. */
export type UpdateUwContactInfoPayload = {
  __typename?: 'UpdateUwContactInfoPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  uwContactInfo?: Maybe<UwContactInfo>;
};

/** Input for the updateValuesHistory mutation. */
export type UpdateValuesHistoryInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the valuesHistory object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateValuesHistory mutation. */
export type UpdateValuesHistoryPayload = {
  __typename?: 'UpdateValuesHistoryPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  valuesHistory?: Maybe<ValuesHistory>;
};

/** Input for the updateVitaTaxPrep mutation. */
export type UpdateVitaTaxPrepInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the vitaTaxPrep object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateVitaTaxPrep mutation. */
export type UpdateVitaTaxPrepPayload = {
  __typename?: 'UpdateVitaTaxPrepPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  vitaTaxPrep?: Maybe<VitaTaxPrep>;
};

/** Input for the updateYmcaComponent mutation. */
export type UpdateYmcaComponentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the ymcaComponent object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateYmcaComponent mutation. */
export type UpdateYmcaComponentPayload = {
  __typename?: 'UpdateYmcaComponentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  ymcaComponent?: Maybe<YmcaComponent>;
};

/** A registered user account. Users can be assigned roles, author content, and have various capabilities within the site. */
export type User = Commenter & DatabaseIdentifier & Node & UniformResourceIdentifiable & {
  __typename?: 'User';
  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
  avatar?: Maybe<Avatar>;
  /** User metadata option name. Usually it will be &quot;wp_capabilities&quot;. */
  capKey?: Maybe<Scalars['String']['output']>;
  /** A list of capabilities (permissions) granted to the user */
  capabilities?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Connection between the User type and the Comment type */
  comments?: Maybe<UserToCommentConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int']['output'];
  /** Description of the user. */
  description?: Maybe<Scalars['String']['output']>;
  /** Email address of the user. This is equivalent to the WP_User-&gt;user_email property. */
  email?: Maybe<Scalars['String']['output']>;
  /** Connection between the User type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<UserToEnqueuedScriptConnection>;
  /** Connection between the User type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<UserToEnqueuedStylesheetConnection>;
  /** A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps. */
  extraCapabilities?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** First name of the user. This is equivalent to the WP_User-&gt;user_first_name property. */
  firstName?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier for the user object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether the JWT User secret has been revoked. If the secret has been revoked, auth tokens will not be issued until an admin, or user with proper capabilities re-issues a secret for the user. */
  isJwtAuthSecretRevoked: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The expiration for the JWT Token for the user. If not set custom for the user, it will use the default sitewide expiration setting */
  jwtAuthExpiration?: Maybe<Scalars['String']['output']>;
  /** A JWT token that can be used in future requests for authentication/authorization */
  jwtAuthToken?: Maybe<Scalars['String']['output']>;
  /** A JWT token that can be used in future requests to get a refreshed jwtAuthToken. If the refresh token used in a request is revoked or otherwise invalid, a valid Auth token will NOT be issued in the response headers. */
  jwtRefreshToken?: Maybe<Scalars['String']['output']>;
  /** A unique secret tied to the users JWT token that can be revoked or refreshed. Revoking the secret prevents JWT tokens from being issued to the user. Refreshing the token invalidates previously issued tokens, but allows new tokens to be issued. */
  jwtUserSecret?: Maybe<Scalars['String']['output']>;
  /** Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property. */
  lastName?: Maybe<Scalars['String']['output']>;
  /** The preferred language locale set for the user. Value derived from get_user_locale(). */
  locale?: Maybe<Scalars['String']['output']>;
  /** Connection between the User type and the mediaItem type */
  mediaItems?: Maybe<UserToMediaItemConnection>;
  /** Display name of the user. This is equivalent to the WP_User-&gt;display_name property. */
  name?: Maybe<Scalars['String']['output']>;
  /** The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename */
  nicename?: Maybe<Scalars['String']['output']>;
  /** Nickname of the user. */
  nickname?: Maybe<Scalars['String']['output']>;
  /** Connection between the User type and the page type */
  pages?: Maybe<UserToPageConnection>;
  /** Connection between the User type and the post type */
  posts?: Maybe<UserToPostConnection>;
  /** The date the user registered or was created. The field follows a full ISO8601 date string format. */
  registeredDate?: Maybe<Scalars['String']['output']>;
  /** Connection between the User and Revisions authored by the user */
  revisions?: Maybe<UserToRevisionsConnection>;
  /** Connection between the User type and the UserRole type */
  roles?: Maybe<UserToUserRoleConnection>;
  /** Whether the Toolbar should be displayed when the user is viewing the site. */
  shouldShowAdminToolbar?: Maybe<Scalars['Boolean']['output']>;
  shouldShowFaustToolbar?: Maybe<Scalars['Boolean']['output']>;
  /** The slug for the user. This field is equivalent to WP_User-&gt;user_nicename */
  slug?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
  /** A website url that is associated with the user. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * The Id of the user. Equivalent to WP_User-&gt;ID
   * @deprecated Deprecated in favor of the databaseId field
   */
  userId?: Maybe<Scalars['Int']['output']>;
  /** Username for the user. This field is equivalent to WP_User-&gt;user_login. */
  username?: Maybe<Scalars['String']['output']>;
};


/** A registered user account. Users can be assigned roles, author content, and have various capabilities within the site. */
export type UserAvatarArgs = {
  forceDefault?: InputMaybe<Scalars['Boolean']['input']>;
  rating?: InputMaybe<AvatarRatingEnum>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/** A registered user account. Users can be assigned roles, author content, and have various capabilities within the site. */
export type UserCommentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToCommentConnectionWhereArgs>;
};


/** A registered user account. Users can be assigned roles, author content, and have various capabilities within the site. */
export type UserEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A registered user account. Users can be assigned roles, author content, and have various capabilities within the site. */
export type UserEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A registered user account. Users can be assigned roles, author content, and have various capabilities within the site. */
export type UserMediaItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToMediaItemConnectionWhereArgs>;
};


/** A registered user account. Users can be assigned roles, author content, and have various capabilities within the site. */
export type UserPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToPageConnectionWhereArgs>;
};


/** A registered user account. Users can be assigned roles, author content, and have various capabilities within the site. */
export type UserPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToPostConnectionWhereArgs>;
};


/** A registered user account. Users can be assigned roles, author content, and have various capabilities within the site. */
export type UserRevisionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToRevisionsConnectionWhereArgs>;
};


/** A registered user account. Users can be assigned roles, author content, and have various capabilities within the site. */
export type UserRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** A paginated collection of User Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of User Nodes */
export type UserConnection = {
  /** A list of edges (relational context) between RootQuery and connected User Nodes */
  edges: Array<UserConnectionEdge>;
  /** A list of connected User Nodes */
  nodes: Array<User>;
  /** Information about pagination in a connection. */
  pageInfo: UserConnectionPageInfo;
};

/** Represents a connection to a User. Contains both the User Node and metadata about the relationship. */
export type UserConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected User Node */
  node: User;
};

/** Pagination metadata specific to &quot;UserConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;UserConnectionEdge&quot; Nodes. */
export type UserConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific user. Determines whether to look up users by ID, email, username, or other unique properties. */
export enum UserNodeIdTypeEnum {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The Email of the User */
  Email = 'EMAIL',
  /** The hashed Global ID */
  Id = 'ID',
  /** The slug of the User */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI',
  /** The username the User uses to login with */
  Username = 'USERNAME'
}

/** A user role object */
export type UserRole = Node & {
  __typename?: 'UserRole';
  /** The capabilities that belong to this role */
  capabilities?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The display name of the role */
  displayName?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier for the user role object. */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** The registered name of the role */
  name?: Maybe<Scalars['String']['output']>;
};

/** A paginated collection of UserRole Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of UserRole Nodes */
export type UserRoleConnection = {
  /** A list of edges (relational context) between RootQuery and connected UserRole Nodes */
  edges: Array<UserRoleConnectionEdge>;
  /** A list of connected UserRole Nodes */
  nodes: Array<UserRole>;
  /** Information about pagination in a connection. */
  pageInfo: UserRoleConnectionPageInfo;
};

/** Represents a connection to a UserRole. Contains both the UserRole Node and metadata about the relationship. */
export type UserRoleConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected UserRole Node */
  node: UserRole;
};

/** Pagination metadata specific to &quot;UserRoleConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;UserRoleConnectionEdge&quot; Nodes. */
export type UserRoleConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Permission levels for user accounts. Defines the standard access levels that control what actions users can perform within the system. */
export enum UserRoleEnum {
  /** User role with specific capabilities */
  Administrator = 'ADMINISTRATOR',
  /** User role with specific capabilities */
  Author = 'AUTHOR',
  /** User role with specific capabilities */
  Contributor = 'CONTRIBUTOR',
  /** User role with specific capabilities */
  Editor = 'EDITOR',
  /** User role with specific capabilities */
  Subscriber = 'SUBSCRIBER'
}

/** Connection between the User type and the Comment type */
export type UserToCommentConnection = CommentConnection & Connection & {
  __typename?: 'UserToCommentConnection';
  /** Edges for the UserToCommentConnection connection */
  edges: Array<UserToCommentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: UserToCommentConnectionPageInfo;
};

/** An edge in a connection */
export type UserToCommentConnectionEdge = CommentConnectionEdge & Edge & {
  __typename?: 'UserToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Comment;
};

/** Pagination metadata specific to &quot;UserToCommentConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToCommentConnection Nodes. */
export type UserToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToCommentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToCommentConnection connection */
export type UserToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** One or more Comment Statuses to limit results by */
  statusIn?: InputMaybe<Array<InputMaybe<CommentStatusEnum>>>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the User type and the EnqueuedScript type */
export type UserToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {
  __typename?: 'UserToEnqueuedScriptConnection';
  /** Edges for the UserToEnqueuedScriptConnection connection */
  edges: Array<UserToEnqueuedScriptConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedScript>;
  /** Information about pagination in a connection. */
  pageInfo: UserToEnqueuedScriptConnectionPageInfo;
};

/** An edge in a connection */
export type UserToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {
  __typename?: 'UserToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedScript;
};

/** Pagination metadata specific to &quot;UserToEnqueuedScriptConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToEnqueuedScriptConnection Nodes. */
export type UserToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToEnqueuedScriptConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the User type and the EnqueuedStylesheet type */
export type UserToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {
  __typename?: 'UserToEnqueuedStylesheetConnection';
  /** Edges for the UserToEnqueuedStylesheetConnection connection */
  edges: Array<UserToEnqueuedStylesheetConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedStylesheet>;
  /** Information about pagination in a connection. */
  pageInfo: UserToEnqueuedStylesheetConnectionPageInfo;
};

/** An edge in a connection */
export type UserToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {
  __typename?: 'UserToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedStylesheet;
};

/** Pagination metadata specific to &quot;UserToEnqueuedStylesheetConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToEnqueuedStylesheetConnection Nodes. */
export type UserToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToEnqueuedStylesheetConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the User type and the mediaItem type */
export type UserToMediaItemConnection = Connection & MediaItemConnection & {
  __typename?: 'UserToMediaItemConnection';
  /** Edges for the UserToMediaItemConnection connection */
  edges: Array<UserToMediaItemConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<MediaItem>;
  /** Information about pagination in a connection. */
  pageInfo: UserToMediaItemConnectionPageInfo;
};

/** An edge in a connection */
export type UserToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & {
  __typename?: 'UserToMediaItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: MediaItem;
};

/** Pagination metadata specific to &quot;UserToMediaItemConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToMediaItemConnection Nodes. */
export type UserToMediaItemConnectionPageInfo = MediaItemConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToMediaItemConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToMediaItemConnection connection */
export type UserToMediaItemConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the page type */
export type UserToPageConnection = Connection & PageConnection & {
  __typename?: 'UserToPageConnection';
  /** Edges for the UserToPageConnection connection */
  edges: Array<UserToPageConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Page>;
  /** Information about pagination in a connection. */
  pageInfo: UserToPageConnectionPageInfo;
};

/** An edge in a connection */
export type UserToPageConnectionEdge = Edge & PageConnectionEdge & {
  __typename?: 'UserToPageConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Page;
};

/** Pagination metadata specific to &quot;UserToPageConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToPageConnection Nodes. */
export type UserToPageConnectionPageInfo = PageConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToPageConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToPageConnection connection */
export type UserToPageConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the post type */
export type UserToPostConnection = Connection & PostConnection & {
  __typename?: 'UserToPostConnection';
  /** Edges for the UserToPostConnection connection */
  edges: Array<UserToPostConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: UserToPostConnectionPageInfo;
};

/** An edge in a connection */
export type UserToPostConnectionEdge = Edge & PostConnectionEdge & {
  __typename?: 'UserToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Post;
};

/** Pagination metadata specific to &quot;UserToPostConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToPostConnection Nodes. */
export type UserToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {
  __typename?: 'UserToPostConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToPostConnection connection */
export type UserToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']['input']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']['input']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag slugs, used to display objects from one tag AND another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of tag slugs, used to include objects in ANY specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the ContentNode type */
export type UserToRevisionsConnection = Connection & ContentNodeConnection & {
  __typename?: 'UserToRevisionsConnection';
  /** Edges for the UserToRevisionsConnection connection */
  edges: Array<UserToRevisionsConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: UserToRevisionsConnectionPageInfo;
};

/** An edge in a connection */
export type UserToRevisionsConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'UserToRevisionsConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Pagination metadata specific to &quot;UserToRevisionsConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToRevisionsConnection Nodes. */
export type UserToRevisionsConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToRevisionsConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToRevisionsConnection connection */
export type UserToRevisionsConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the UserRole type */
export type UserToUserRoleConnection = Connection & UserRoleConnection & {
  __typename?: 'UserToUserRoleConnection';
  /** Edges for the UserToUserRoleConnection connection */
  edges: Array<UserToUserRoleConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<UserRole>;
  /** Information about pagination in a connection. */
  pageInfo: UserToUserRoleConnectionPageInfo;
};

/** An edge in a connection */
export type UserToUserRoleConnectionEdge = Edge & UserRoleConnectionEdge & {
  __typename?: 'UserToUserRoleConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: UserRole;
};

/** Pagination metadata specific to &quot;UserToUserRoleConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToUserRoleConnection Nodes. */
export type UserToUserRoleConnectionPageInfo = PageInfo & UserRoleConnectionPageInfo & WpPageInfo & {
  __typename?: 'UserToUserRoleConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** User attribute sorting options. Determines which property of user accounts is used for ordering user listings. */
export enum UsersConnectionOrderbyEnum {
  /** Order by display name */
  DisplayName = 'DISPLAY_NAME',
  /** Order by email address */
  Email = 'EMAIL',
  /** Order by login */
  Login = 'LOGIN',
  /** Preserve the login order given in the LOGIN_IN array */
  LoginIn = 'LOGIN_IN',
  /** Order by nice name */
  NiceName = 'NICE_NAME',
  /** Preserve the nice name order given in the NICE_NAME_IN array */
  NiceNameIn = 'NICE_NAME_IN',
  /** Order by registration date */
  Registered = 'REGISTERED',
  /** Order by URL */
  Url = 'URL'
}

/** Options for ordering the connection */
export type UsersConnectionOrderbyInput = {
  /** The field name used to sort the results. */
  field: UsersConnectionOrderbyEnum;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
};

/** User properties that can be targeted in search operations. Defines which user attributes can be searched when looking for specific users. */
export enum UsersConnectionSearchColumnEnum {
  /** The user's email address. */
  Email = 'EMAIL',
  /** The globally unique ID. */
  Id = 'ID',
  /** The username the User uses to login with. */
  Login = 'LOGIN',
  /** A URL-friendly name for the user. The default is the user's username. */
  Nicename = 'NICENAME',
  /** The URL of the user's website. */
  Url = 'URL'
}

/** The uwContactInfo type */
export type UwContactInfo = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfUwContactInformationFields & {
  __typename?: 'UwContactInfo';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<UwContactInfoToUwContactInfoConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the uw_contact_info object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the uw_contact_info object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<UwContactInfoToParentConnectionEdge>;
  /** The password for the uw_contact_info object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the UwContactInfo type and the uwContactInfo type */
  preview?: Maybe<UwContactInfoToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** Fields of the UWContactInformationFields ACF Field Group */
  uWContactInformationFields?: Maybe<UwContactInformationFields>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  uwContactInfoId: Scalars['Int']['output'];
};


/** The uwContactInfo type */
export type UwContactInfoAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The uwContactInfo type */
export type UwContactInfoEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The uwContactInfo type */
export type UwContactInfoEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The uwContactInfo type */
export type UwContactInfoTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of uwContactInfo Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of uwContactInfo Nodes */
export type UwContactInfoConnection = {
  /** A list of edges (relational context) between RootQuery and connected uwContactInfo Nodes */
  edges: Array<UwContactInfoConnectionEdge>;
  /** A list of connected uwContactInfo Nodes */
  nodes: Array<UwContactInfo>;
  /** Information about pagination in a connection. */
  pageInfo: UwContactInfoConnectionPageInfo;
};

/** Represents a connection to a uwContactInfo. Contains both the uwContactInfo Node and metadata about the relationship. */
export type UwContactInfoConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected uwContactInfo Node */
  node: UwContactInfo;
};

/** Pagination metadata specific to &quot;UwContactInfoConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;UwContactInfoConnectionEdge&quot; Nodes. */
export type UwContactInfoConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific UwContactInfo. Specifies which unique attribute is used to find an exact UwContactInfo. */
export enum UwContactInfoIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the UwContactInfo type and the uwContactInfo type */
export type UwContactInfoToParentConnectionEdge = Edge & OneToOneConnection & UwContactInfoConnectionEdge & {
  __typename?: 'UwContactInfoToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: UwContactInfo;
};

/** Connection between the UwContactInfo type and the uwContactInfo type */
export type UwContactInfoToPreviewConnectionEdge = Edge & OneToOneConnection & UwContactInfoConnectionEdge & {
  __typename?: 'UwContactInfoToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: UwContactInfo;
};

/** Connection between the UwContactInfo type and the uwContactInfo type */
export type UwContactInfoToUwContactInfoConnection = Connection & UwContactInfoConnection & {
  __typename?: 'UwContactInfoToUwContactInfoConnection';
  /** Edges for the UwContactInfoToUwContactInfoConnection connection */
  edges: Array<UwContactInfoToUwContactInfoConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<UwContactInfo>;
  /** Information about pagination in a connection. */
  pageInfo: UwContactInfoToUwContactInfoConnectionPageInfo;
};

/** An edge in a connection */
export type UwContactInfoToUwContactInfoConnectionEdge = Edge & UwContactInfoConnectionEdge & {
  __typename?: 'UwContactInfoToUwContactInfoConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: UwContactInfo;
};

/** Pagination metadata specific to &quot;UwContactInfoToUwContactInfoConnection&quot; collections. Provides cursors and flags for navigating through sets of UwContactInfoToUwContactInfoConnection Nodes. */
export type UwContactInfoToUwContactInfoConnectionPageInfo = PageInfo & UwContactInfoConnectionPageInfo & WpPageInfo & {
  __typename?: 'UwContactInfoToUwContactInfoConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The &quot;VITATaxPrepFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type VitaTaxPrepFields = AcfFieldGroup & AcfFieldGroupFields & VitaTaxPrepFields_Fields & {
  __typename?: 'VITATaxPrepFields';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;VITATaxPrepFields&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;VITATaxPrepFields&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;VITATaxPrepFields&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;VITATaxPrepFields&quot; Field Group */
  linkTextTwo?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;VITATaxPrepFields&quot; Field Group */
  linkTwo?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;VITATaxPrepFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;VITATaxPrepFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;VITATaxPrepFields&quot; Field Group */
export type VitaTaxPrepFields_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;VITATaxPrepFields&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;VITATaxPrepFields&quot; Field Group */
  link?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;VITATaxPrepFields&quot; Field Group */
  linkText?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;VITATaxPrepFields&quot; Field Group */
  linkTextTwo?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;VITATaxPrepFields&quot; Field Group */
  linkTwo?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;VITATaxPrepFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;VITATaxPrepFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The &quot;ValuesAndHistoryFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type ValuesAndHistoryFields = AcfFieldGroup & AcfFieldGroupFields & ValuesAndHistoryFields_Fields & {
  __typename?: 'ValuesAndHistoryFields';
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ValuesAndHistoryFields&quot; Field Group */
  image1?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ValuesAndHistoryFields&quot; Field Group */
  image2?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ValuesAndHistoryFields&quot; Field Group */
  image3?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ValuesAndHistoryFields&quot; Field Group */
  imageAlt1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ValuesAndHistoryFields&quot; Field Group */
  imageAlt2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ValuesAndHistoryFields&quot; Field Group */
  imageAlt3?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;ValuesAndHistoryFields&quot; Field Group */
export type ValuesAndHistoryFields_Fields = {
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ValuesAndHistoryFields&quot; Field Group */
  image1?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ValuesAndHistoryFields&quot; Field Group */
  image2?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;ValuesAndHistoryFields&quot; Field Group */
  image3?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ValuesAndHistoryFields&quot; Field Group */
  imageAlt1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ValuesAndHistoryFields&quot; Field Group */
  imageAlt2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;ValuesAndHistoryFields&quot; Field Group */
  imageAlt3?: Maybe<Scalars['String']['output']>;
};

/** The valuesHistory type */
export type ValuesHistory = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfValuesAndHistoryFields & {
  __typename?: 'ValuesHistory';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<ValuesHistoryToValuesHistoryConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The content of the post. */
  content?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the values_history object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the values_history object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<ValuesHistoryToParentConnectionEdge>;
  /** The password for the values_history object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the ValuesHistory type and the valuesHistory type */
  preview?: Maybe<ValuesHistoryToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
  /** Fields of the ValuesAndHistoryFields ACF Field Group */
  valuesAndHistoryFields?: Maybe<ValuesAndHistoryFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  valuesHistoryId: Scalars['Int']['output'];
};


/** The valuesHistory type */
export type ValuesHistoryAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The valuesHistory type */
export type ValuesHistoryContentArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** The valuesHistory type */
export type ValuesHistoryEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The valuesHistory type */
export type ValuesHistoryEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The valuesHistory type */
export type ValuesHistoryTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of valuesHistory Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of valuesHistory Nodes */
export type ValuesHistoryConnection = {
  /** A list of edges (relational context) between RootQuery and connected valuesHistory Nodes */
  edges: Array<ValuesHistoryConnectionEdge>;
  /** A list of connected valuesHistory Nodes */
  nodes: Array<ValuesHistory>;
  /** Information about pagination in a connection. */
  pageInfo: ValuesHistoryConnectionPageInfo;
};

/** Represents a connection to a valuesHistory. Contains both the valuesHistory Node and metadata about the relationship. */
export type ValuesHistoryConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected valuesHistory Node */
  node: ValuesHistory;
};

/** Pagination metadata specific to &quot;ValuesHistoryConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;ValuesHistoryConnectionEdge&quot; Nodes. */
export type ValuesHistoryConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific ValuesHistory. Specifies which unique attribute is used to find an exact ValuesHistory. */
export enum ValuesHistoryIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the ValuesHistory type and the valuesHistory type */
export type ValuesHistoryToParentConnectionEdge = Edge & OneToOneConnection & ValuesHistoryConnectionEdge & {
  __typename?: 'ValuesHistoryToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: ValuesHistory;
};

/** Connection between the ValuesHistory type and the valuesHistory type */
export type ValuesHistoryToPreviewConnectionEdge = Edge & OneToOneConnection & ValuesHistoryConnectionEdge & {
  __typename?: 'ValuesHistoryToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: ValuesHistory;
};

/** Connection between the ValuesHistory type and the valuesHistory type */
export type ValuesHistoryToValuesHistoryConnection = Connection & ValuesHistoryConnection & {
  __typename?: 'ValuesHistoryToValuesHistoryConnection';
  /** Edges for the ValuesHistoryToValuesHistoryConnection connection */
  edges: Array<ValuesHistoryToValuesHistoryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ValuesHistory>;
  /** Information about pagination in a connection. */
  pageInfo: ValuesHistoryToValuesHistoryConnectionPageInfo;
};

/** An edge in a connection */
export type ValuesHistoryToValuesHistoryConnectionEdge = Edge & ValuesHistoryConnectionEdge & {
  __typename?: 'ValuesHistoryToValuesHistoryConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: ValuesHistory;
};

/** Pagination metadata specific to &quot;ValuesHistoryToValuesHistoryConnection&quot; collections. Provides cursors and flags for navigating through sets of ValuesHistoryToValuesHistoryConnection Nodes. */
export type ValuesHistoryToValuesHistoryConnectionPageInfo = PageInfo & ValuesHistoryConnectionPageInfo & WpPageInfo & {
  __typename?: 'ValuesHistoryToValuesHistoryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The vitaTaxPrep type */
export type VitaTaxPrep = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfVitaTaxPrepFields & {
  __typename?: 'VitaTaxPrep';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<VitaTaxPrepToVitaTaxPrepConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the vita_tax_prep object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the vita_tax_prep object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<VitaTaxPrepToParentConnectionEdge>;
  /** The password for the vita_tax_prep object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the VitaTaxPrep type and the vitaTaxPrep type */
  preview?: Maybe<VitaTaxPrepToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
  /** Fields of the VITATaxPrepFields ACF Field Group */
  vITATaxPrepFields?: Maybe<VitaTaxPrepFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  vitaTaxPrepId: Scalars['Int']['output'];
};


/** The vitaTaxPrep type */
export type VitaTaxPrepAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The vitaTaxPrep type */
export type VitaTaxPrepEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The vitaTaxPrep type */
export type VitaTaxPrepEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The vitaTaxPrep type */
export type VitaTaxPrepTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of vitaTaxPrep Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of vitaTaxPrep Nodes */
export type VitaTaxPrepConnection = {
  /** A list of edges (relational context) between RootQuery and connected vitaTaxPrep Nodes */
  edges: Array<VitaTaxPrepConnectionEdge>;
  /** A list of connected vitaTaxPrep Nodes */
  nodes: Array<VitaTaxPrep>;
  /** Information about pagination in a connection. */
  pageInfo: VitaTaxPrepConnectionPageInfo;
};

/** Represents a connection to a vitaTaxPrep. Contains both the vitaTaxPrep Node and metadata about the relationship. */
export type VitaTaxPrepConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected vitaTaxPrep Node */
  node: VitaTaxPrep;
};

/** Pagination metadata specific to &quot;VitaTaxPrepConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;VitaTaxPrepConnectionEdge&quot; Nodes. */
export type VitaTaxPrepConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific VitaTaxPrep. Specifies which unique attribute is used to find an exact VitaTaxPrep. */
export enum VitaTaxPrepIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the VitaTaxPrep type and the vitaTaxPrep type */
export type VitaTaxPrepToParentConnectionEdge = Edge & OneToOneConnection & VitaTaxPrepConnectionEdge & {
  __typename?: 'VitaTaxPrepToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: VitaTaxPrep;
};

/** Connection between the VitaTaxPrep type and the vitaTaxPrep type */
export type VitaTaxPrepToPreviewConnectionEdge = Edge & OneToOneConnection & VitaTaxPrepConnectionEdge & {
  __typename?: 'VitaTaxPrepToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: VitaTaxPrep;
};

/** Connection between the VitaTaxPrep type and the vitaTaxPrep type */
export type VitaTaxPrepToVitaTaxPrepConnection = Connection & VitaTaxPrepConnection & {
  __typename?: 'VitaTaxPrepToVitaTaxPrepConnection';
  /** Edges for the VitaTaxPrepToVitaTaxPrepConnection connection */
  edges: Array<VitaTaxPrepToVitaTaxPrepConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<VitaTaxPrep>;
  /** Information about pagination in a connection. */
  pageInfo: VitaTaxPrepToVitaTaxPrepConnectionPageInfo;
};

/** An edge in a connection */
export type VitaTaxPrepToVitaTaxPrepConnectionEdge = Edge & VitaTaxPrepConnectionEdge & {
  __typename?: 'VitaTaxPrepToVitaTaxPrepConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: VitaTaxPrep;
};

/** Pagination metadata specific to &quot;VitaTaxPrepToVitaTaxPrepConnection&quot; collections. Provides cursors and flags for navigating through sets of VitaTaxPrepToVitaTaxPrepConnection Nodes. */
export type VitaTaxPrepToVitaTaxPrepConnectionPageInfo = PageInfo & VitaTaxPrepConnectionPageInfo & WpPageInfo & {
  __typename?: 'VitaTaxPrepToVitaTaxPrepConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Metadata for cursor-based pagination. Provides cursors for continuing pagination and boolean flags indicating if more items exist in either direction. */
export type WpPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Provides access to fields of the &quot;ALICEReportPDFFields&quot; ACF Field Group via the &quot;aLICEReportPDFFields&quot; field */
export type WithAcfAliceReportPdfFields = {
  /** Fields of the ALICEReportPDFFields ACF Field Group */
  aLICEReportPDFFields?: Maybe<AliceReportPdfFields>;
};

/** Provides access to fields of the &quot;ALICEReportPageFields&quot; ACF Field Group via the &quot;aLICEReportPageFields&quot; field */
export type WithAcfAliceReportPageFields = {
  /** Fields of the ALICEReportPageFields ACF Field Group */
  aLICEReportPageFields?: Maybe<AliceReportPageFields>;
};

/** Provides access to fields of the &quot;AdminCostsPDFFields&quot; ACF Field Group via the &quot;adminCostsPDFFields&quot; field */
export type WithAcfAdminCostsPdfFields = {
  /** Fields of the AdminCostsPDFFields ACF Field Group */
  adminCostsPDFFields?: Maybe<AdminCostsPdfFields>;
};

/** Provides access to fields of the &quot;AliceHubProgramFields&quot; ACF Field Group via the &quot;aliceHubProgramFields&quot; field */
export type WithAcfAliceHubProgramFields = {
  /** Fields of the AliceHubProgramFields ACF Field Group */
  aliceHubProgramFields?: Maybe<AliceHubProgramFields>;
};

/** Provides access to fields of the &quot;AliceStatsFields&quot; ACF Field Group via the &quot;aliceStatsFields&quot; field */
export type WithAcfAliceStatsFields = {
  /** Fields of the AliceStatsFields ACF Field Group */
  aliceStatsFields?: Maybe<AliceStatsFields>;
};

/** Provides access to fields of the &quot;CampaignToolkitAssetFields&quot; ACF Field Group via the &quot;campaignToolkitAssetFields&quot; field */
export type WithAcfCampaignToolkitAssetFields = {
  /** Fields of the CampaignToolkitAssetFields ACF Field Group */
  campaignToolkitAssetFields?: Maybe<CampaignToolkitAssetFields>;
};

/** Provides access to fields of the &quot;Current990FormPDFFields&quot; ACF Field Group via the &quot;current990FormPDFFields&quot; field */
export type WithAcfCurrent990FormPdfFields = {
  /** Fields of the Current990FormPDFFields ACF Field Group */
  current990FormPDFFields?: Maybe<Current990FormPdfFields>;
};

/** Provides access to fields of the &quot;DonorPrivacyPolicyPDFFields&quot; ACF Field Group via the &quot;donorPrivacyPolicyPDFFields&quot; field */
export type WithAcfDonorPrivacyPolicyPdfFields = {
  /** Fields of the DonorPrivacyPolicyPDFFields ACF Field Group */
  donorPrivacyPolicyPDFFields?: Maybe<DonorPrivacyPolicyPdfFields>;
};

/** Provides access to fields of the &quot;FAQFields&quot; ACF Field Group via the &quot;fAQFields&quot; field */
export type WithAcfFaqFields = {
  /** Fields of the FAQFields ACF Field Group */
  fAQFields?: Maybe<FaqFields>;
};

/** Provides access to fields of the &quot;FourPillarsHeroComponentFields&quot; ACF Field Group via the &quot;fourPillarsHeroComponentFields&quot; field */
export type WithAcfFourPillarsHeroComponentFields = {
  /** Fields of the FourPillarsHeroComponentFields ACF Field Group */
  fourPillarsHeroComponentFields?: Maybe<FourPillarsHeroComponentFields>;
};

/** Provides access to fields of the &quot;FourPillarsPreviewFields&quot; ACF Field Group via the &quot;fourPillarsPreviewFields&quot; field */
export type WithAcfFourPillarsPreviewFields = {
  /** Fields of the FourPillarsPreviewFields ACF Field Group */
  fourPillarsPreviewFields?: Maybe<FourPillarsPreviewFields>;
};

/** Provides access to fields of the &quot;GetInvolvedHeroFields&quot; ACF Field Group via the &quot;getInvolvedHeroFields&quot; field */
export type WithAcfGetInvolvedHeroFields = {
  /** Fields of the GetInvolvedHeroFields ACF Field Group */
  getInvolvedHeroFields?: Maybe<GetInvolvedHeroFields>;
};

/** Provides access to fields of the &quot;GiftAcceptancePolicyPDFFields&quot; ACF Field Group via the &quot;giftAcceptancePolicyPDFFields&quot; field */
export type WithAcfGiftAcceptancePolicyPdfFields = {
  /** Fields of the GiftAcceptancePolicyPDFFields ACF Field Group */
  giftAcceptancePolicyPDFFields?: Maybe<GiftAcceptancePolicyPdfFields>;
};

/** Provides access to fields of the &quot;GirlScoutsComponentFields&quot; ACF Field Group via the &quot;girlScoutsComponentFields&quot; field */
export type WithAcfGirlScoutsComponentFields = {
  /** Fields of the GirlScoutsComponentFields ACF Field Group */
  girlScoutsComponentFields?: Maybe<GirlScoutsComponentFields>;
};

/** Provides access to fields of the &quot;HeroComponentFields&quot; ACF Field Group via the &quot;heroComponentFields&quot; field */
export type WithAcfHeroComponentFields = {
  /** Fields of the HeroComponentFields ACF Field Group */
  heroComponentFields?: Maybe<HeroComponentFields>;
};

/** Provides access to fields of the &quot;HomePageHeroFields&quot; ACF Field Group via the &quot;homePageHeroFields&quot; field */
export type WithAcfHomePageHeroFields = {
  /** Fields of the HomePageHeroFields ACF Field Group */
  homePageHeroFields?: Maybe<HomePageHeroFields>;
};

/** Provides access to fields of the &quot;HowToContributeComponentFields&quot; ACF Field Group via the &quot;howToContributeComponentFields&quot; field */
export type WithAcfHowToContributeComponentFields = {
  /** Fields of the HowToContributeComponentFields ACF Field Group */
  howToContributeComponentFields?: Maybe<HowToContributeComponentFields>;
};

/** Provides access to fields of the &quot;ImpactCarouselFields&quot; ACF Field Group via the &quot;impactCarouselFields&quot; field */
export type WithAcfImpactCarouselFields = {
  /** Fields of the ImpactCarouselFields ACF Field Group */
  impactCarouselFields?: Maybe<ImpactCarouselFields>;
};

/** Provides access to fields of the &quot;IndividualsPageHeroFields&quot; ACF Field Group via the &quot;individualsPageHeroFields&quot; field */
export type WithAcfIndividualsPageHeroFields = {
  /** Fields of the IndividualsPageHeroFields ACF Field Group */
  individualsPageHeroFields?: Maybe<IndividualsPageHeroFields>;
};

/** Provides access to fields of the &quot;MobileFoodPantryComponentFields&quot; ACF Field Group via the &quot;mobileFoodPantryComponentFields&quot; field */
export type WithAcfMobileFoodPantryComponentFields = {
  /** Fields of the MobileFoodPantryComponentFields ACF Field Group */
  mobileFoodPantryComponentFields?: Maybe<MobileFoodPantryComponentFields>;
};

/** Provides access to fields of the &quot;NorthwoodsAirLifelineFields&quot; ACF Field Group via the &quot;northwoodsAirLifelineFields&quot; field */
export type WithAcfNorthwoodsAirLifelineFields = {
  /** Fields of the NorthwoodsAirLifelineFields ACF Field Group */
  northwoodsAirLifelineFields?: Maybe<NorthwoodsAirLifelineFields>;
};

/** Provides access to fields of the &quot;OurImpactFields&quot; ACF Field Group via the &quot;ourImpactFields&quot; field */
export type WithAcfOurImpactFields = {
  /** Fields of the OurImpactFields ACF Field Group */
  ourImpactFields?: Maybe<OurImpactFields>;
};

/** Provides access to fields of the &quot;OurImpactHero&quot; ACF Field Group via the &quot;ourImpactHero&quot; field */
export type WithAcfOurImpactHero = {
  /** Fields of the OurImpactHero ACF Field Group */
  ourImpactHero?: Maybe<OurImpactHero>;
};

/** Provides access to fields of the &quot;OurImpactStatisticFields&quot; ACF Field Group via the &quot;ourImpactStatisticFields&quot; field */
export type WithAcfOurImpactStatisticFields = {
  /** Fields of the OurImpactStatisticFields ACF Field Group */
  ourImpactStatisticFields?: Maybe<OurImpactStatisticFields>;
};

/** Provides access to fields of the &quot;Ourimpactstatistics&quot; ACF Field Group via the &quot;ourimpactstatistics&quot; field */
export type WithAcfOurimpactstatistics = {
  /** Fields of the Ourimpactstatistics ACF Field Group */
  ourimpactstatistics?: Maybe<Ourimpactstatistics>;
};

/** Provides access to fields of the &quot;PartnerAgencies&quot; ACF Field Group via the &quot;partnerAgencies&quot; field */
export type WithAcfPartnerAgencies = {
  /** Fields of the PartnerAgencies ACF Field Group */
  partnerAgencies?: Maybe<PartnerAgencies>;
};

/** Provides access to fields of the &quot;PartnerPageHeroFields&quot; ACF Field Group via the &quot;partnerPageHeroFields&quot; field */
export type WithAcfPartnerPageHeroFields = {
  /** Fields of the PartnerPageHeroFields ACF Field Group */
  partnerPageHeroFields?: Maybe<PartnerPageHeroFields>;
};

/** Provides access to fields of the &quot;PartnersTickerItemFields&quot; ACF Field Group via the &quot;partnersTickerItemFields&quot; field */
export type WithAcfPartnersTickerItemFields = {
  /** Fields of the PartnersTickerItemFields ACF Field Group */
  partnersTickerItemFields?: Maybe<PartnersTickerItemFields>;
};

/** Provides access to fields of the &quot;UWContactInformationFields&quot; ACF Field Group via the &quot;uWContactInformationFields&quot; field */
export type WithAcfUwContactInformationFields = {
  /** Fields of the UWContactInformationFields ACF Field Group */
  uWContactInformationFields?: Maybe<UwContactInformationFields>;
};

/** Provides access to fields of the &quot;VITATaxPrepFields&quot; ACF Field Group via the &quot;vITATaxPrepFields&quot; field */
export type WithAcfVitaTaxPrepFields = {
  /** Fields of the VITATaxPrepFields ACF Field Group */
  vITATaxPrepFields?: Maybe<VitaTaxPrepFields>;
};

/** Provides access to fields of the &quot;ValuesAndHistoryFields&quot; ACF Field Group via the &quot;valuesAndHistoryFields&quot; field */
export type WithAcfValuesAndHistoryFields = {
  /** Fields of the ValuesAndHistoryFields ACF Field Group */
  valuesAndHistoryFields?: Maybe<ValuesAndHistoryFields>;
};

/** Provides access to fields of the &quot;YMCAComponentFields&quot; ACF Field Group via the &quot;yMCAComponentFields&quot; field */
export type WithAcfYmcaComponentFields = {
  /** Fields of the YMCAComponentFields ACF Field Group */
  yMCAComponentFields?: Maybe<YmcaComponentFields>;
};

/** The writing setting type */
export type WritingSettings = {
  __typename?: 'WritingSettings';
  /** Default post category. */
  defaultCategory?: Maybe<Scalars['Int']['output']>;
  /** Default post format. */
  defaultPostFormat?: Maybe<Scalars['String']['output']>;
  /** Convert emoticons like :-) and :-P to graphics on display. */
  useSmilies?: Maybe<Scalars['Boolean']['output']>;
};

/** The &quot;YMCAComponentFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;. */
export type YmcaComponentFields = AcfFieldGroup & AcfFieldGroupFields & YmcaComponentFields_Fields & {
  __typename?: 'YMCAComponentFields';
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  brandImg?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  link1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  link2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  linkText1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  linkText2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** Interface representing fields of the ACF &quot;YMCAComponentFields&quot; Field Group */
export type YmcaComponentFields_Fields = {
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  brandImg?: Maybe<AcfMediaItemConnectionEdge>;
  /**
   * The name of the field group
   * @deprecated Use __typename instead
   */
  fieldGroupName?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  image?: Maybe<AcfMediaItemConnectionEdge>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  link1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  link2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  linkText1?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  linkText2?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  text?: Maybe<Scalars['String']['output']>;
  /** Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;YMCAComponentFields&quot; Field Group */
  title?: Maybe<Scalars['String']['output']>;
};

/** The ymcaComponent type */
export type YmcaComponent = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfYmcaComponentFields & {
  __typename?: 'YmcaComponent';
  /**
   * The ancestors of the content node.
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  ancestors?: Maybe<YmcaComponentToYmcaComponentConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** Whether the ymca_comp object is password protected. */
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the ymca_comp object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Comment */
  isComment: Scalars['Boolean']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node represents the front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether  the node represents the blog page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The parent of the content node.
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  parent?: Maybe<YmcaComponentToParentConnectionEdge>;
  /** The password for the ymca_comp object. */
  password?: Maybe<Scalars['String']['output']>;
  /** Connection between the YmcaComponent type and the ymcaComponent type */
  preview?: Maybe<YmcaComponentToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
  /** Fields of the YMCAComponentFields ACF Field Group */
  yMCAComponentFields?: Maybe<YmcaComponentFields>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  ymcaComponentId: Scalars['Int']['output'];
};


/** The ymcaComponent type */
export type YmcaComponentAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The ymcaComponent type */
export type YmcaComponentEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The ymcaComponent type */
export type YmcaComponentEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The ymcaComponent type */
export type YmcaComponentTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A paginated collection of ymcaComponent Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of ymcaComponent Nodes */
export type YmcaComponentConnection = {
  /** A list of edges (relational context) between RootQuery and connected ymcaComponent Nodes */
  edges: Array<YmcaComponentConnectionEdge>;
  /** A list of connected ymcaComponent Nodes */
  nodes: Array<YmcaComponent>;
  /** Information about pagination in a connection. */
  pageInfo: YmcaComponentConnectionPageInfo;
};

/** Represents a connection to a ymcaComponent. Contains both the ymcaComponent Node and metadata about the relationship. */
export type YmcaComponentConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected ymcaComponent Node */
  node: YmcaComponent;
};

/** Pagination metadata specific to &quot;YmcaComponentConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;YmcaComponentConnectionEdge&quot; Nodes. */
export type YmcaComponentConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifier types for retrieving a specific YmcaComponent. Specifies which unique attribute is used to find an exact YmcaComponent. */
export enum YmcaComponentIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the YmcaComponent type and the ymcaComponent type */
export type YmcaComponentToParentConnectionEdge = Edge & OneToOneConnection & YmcaComponentConnectionEdge & {
  __typename?: 'YmcaComponentToParentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated This content type is not hierarchical and typically will not have a parent
   */
  node: YmcaComponent;
};

/** Connection between the YmcaComponent type and the ymcaComponent type */
export type YmcaComponentToPreviewConnectionEdge = Edge & OneToOneConnection & YmcaComponentConnectionEdge & {
  __typename?: 'YmcaComponentToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: YmcaComponent;
};

/** Connection between the YmcaComponent type and the ymcaComponent type */
export type YmcaComponentToYmcaComponentConnection = Connection & YmcaComponentConnection & {
  __typename?: 'YmcaComponentToYmcaComponentConnection';
  /** Edges for the YmcaComponentToYmcaComponentConnection connection */
  edges: Array<YmcaComponentToYmcaComponentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<YmcaComponent>;
  /** Information about pagination in a connection. */
  pageInfo: YmcaComponentToYmcaComponentConnectionPageInfo;
};

/** An edge in a connection */
export type YmcaComponentToYmcaComponentConnectionEdge = Edge & YmcaComponentConnectionEdge & {
  __typename?: 'YmcaComponentToYmcaComponentConnectionEdge';
  /**
   * A cursor for use in pagination
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The item at the end of the edge
   * @deprecated This content type is not hierarchical and typically will not have ancestors
   */
  node: YmcaComponent;
};

/** Pagination metadata specific to &quot;YmcaComponentToYmcaComponentConnection&quot; collections. Provides cursors and flags for navigating through sets of YmcaComponentToYmcaComponentConnection Nodes. */
export type YmcaComponentToYmcaComponentConnectionPageInfo = PageInfo & WpPageInfo & YmcaComponentConnectionPageInfo & {
  __typename?: 'YmcaComponentToYmcaComponentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type LoginUserMutationVariables = Exact<{
  username: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type LoginUserMutation = { __typename?: 'RootMutation', login?: { __typename?: 'LoginPayload', authToken?: string | null, refreshToken?: string | null } | null };

export type RefreshTokenMutationVariables = Exact<{
  input: RefreshJwtAuthTokenInput;
}>;


export type RefreshTokenMutation = { __typename?: 'RootMutation', refreshJwtAuthToken?: { __typename?: 'RefreshJwtAuthTokenPayload', authToken?: string | null } | null };

export type FooterQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type FooterQueryQuery = { __typename?: 'RootQuery', current990FormPdfs?: { __typename?: 'RootQueryToCurrent990FormPdfConnection', nodes: Array<{ __typename?: 'Current990FormPdf', current990FormPDFFields?: { __typename?: 'Current990FormPDFFields', pdfFile?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', mediaItemUrl?: string | null } } | null } | null }> } | null, donorPrivacyPolicyPdfs?: { __typename?: 'RootQueryToDonorPrivacyPolicyPdfConnection', nodes: Array<{ __typename?: 'DonorPrivacyPolicyPdf', donorPrivacyPolicyPDFFields?: { __typename?: 'DonorPrivacyPolicyPDFFields', pdfFile?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', mediaItemUrl?: string | null } } | null } | null }> } | null, giftAcceptancePolicyPdfs?: { __typename?: 'RootQueryToGiftAcceptancePolicyPdfConnection', nodes: Array<{ __typename?: 'GiftAcceptancePolicyPdf', giftAcceptancePolicyPDFFields?: { __typename?: 'GiftAcceptancePolicyPDFFields', pdfFile?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', mediaItemUrl?: string | null } } | null } | null }> } | null, adminCostPdfs?: { __typename?: 'RootQueryToAdminCostPdfConnection', nodes: Array<{ __typename?: 'AdminCostPdf', adminCostsPDFFields?: { __typename?: 'AdminCostsPDFFields', pdfFile?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', mediaItemUrl?: string | null } } | null } | null }> } | null, uwContactInfos?: { __typename?: 'RootQueryToUwContactInfoConnection', nodes: Array<{ __typename?: 'UwContactInfo', uWContactInformationFields?: { __typename?: 'UWContactInformationFields', facebookLink?: string | null, fieldGroupName?: string | null, googleMapsUrl?: string | null, instagramLink?: string | null, linkedinLink?: string | null, phoneNumber?: string | null, state?: string | null, streetAddress?: string | null, zip?: string | null, city?: string | null } | null }> } | null };

export type CampaignToolkitPageQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type CampaignToolkitPageQueryQuery = { __typename?: 'RootQuery', campaignToolkitAssets?: { __typename?: 'RootQueryToCampaignToolkitAssetConnection', nodes: Array<{ __typename?: 'CampaignToolkitAsset', campaignToolkitAssetFields?: { __typename?: 'CampaignToolkitAssetFields', pledgeForm?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', mediaItemUrl?: string | null } } | null, radioPsaAudio?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', mediaItemUrl?: string | null } } | null, radioPsaTranscript?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', mediaItemUrl?: string | null } } | null, workplacePacket?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', mediaItemUrl?: string | null } } | null, collageImages?: { __typename?: 'CampaignToolkitAssetFieldsCollageImages', image1?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', altText?: string | null, sourceUrl?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null } } | null, image2?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', altText?: string | null, sourceUrl?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null } } | null, image3?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', altText?: string | null, sourceUrl?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null } } | null, image4?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', altText?: string | null, sourceUrl?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null } } | null, image5?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', altText?: string | null, sourceUrl?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null } } | null, image6?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', altText?: string | null, sourceUrl?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null } } | null, image7?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', altText?: string | null, sourceUrl?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null } } | null } | null } | null }> } | null };

export type GetInvolvedPageQueryVariables = Exact<{ [key: string]: never; }>;


export type GetInvolvedPageQuery = { __typename?: 'RootQuery', getInvolvedHeroes?: { __typename?: 'RootQueryToGetInvolvedHeroConnection', nodes: Array<{ __typename?: 'GetInvolvedHero', getInvolvedHeroFields?: { __typename?: 'GetInvolvedHeroFields', text?: string | null, title?: string | null, bgMobile?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', sourceUrl?: string | null } } | null, bg?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', sourceUrl?: string | null } } | null } | null }> } | null };

export type HealthyCommunityPageQueryVariables = Exact<{ [key: string]: never; }>;


export type HealthyCommunityPageQuery = { __typename?: 'RootQuery', mobileFoodPantryComponents?: { __typename?: 'RootQueryToMobileFoodPantryComponentConnection', nodes: Array<{ __typename?: 'MobileFoodPantryComponent', mobileFoodPantryComponentFields?: { __typename?: 'MobileFoodPantryComponentFields', buttonText?: string | null, link?: string | null, text?: string | null, title?: string | null, image?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', sourceUrl?: string | null, altText?: string | null } } | null, bgMobile?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', sourceUrl?: string | null, altText?: string | null } } | null } | null }> } | null };

export type HomePageQueryVariables = Exact<{ [key: string]: never; }>;


export type HomePageQuery = { __typename?: 'RootQuery', homePageHeroes?: { __typename?: 'RootQueryToHomePageHeroConnection', nodes: Array<{ __typename?: 'HomePageHero', homePageHeroFields?: { __typename?: 'HomePageHeroFields', heading?: string | null, subheading?: string | null, bg?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', sourceUrl?: string | null } } | null, bgMobile?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', sourceUrl?: string | null } } | null, feature1?: { __typename?: 'HomePageHeroFieldsFeature1', link?: string | null, text?: string | null, linkText?: string | null, secondLink?: string | null, secondLinkText?: string | null, title?: string | null, optionalMediaLabel?: string | null, image?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', sourceUrl?: string | null, altText?: string | null } } | null, optionalMedia?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', mediaItemUrl?: string | null } } | null } | null, feature2?: { __typename?: 'HomePageHeroFieldsFeature2', link?: string | null, linkText?: string | null, secondLink?: string | null, secondLinkText?: string | null, text?: string | null, title?: string | null, optionalMediaLabel?: string | null, image?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', sourceUrl?: string | null, altText?: string | null } } | null, optionalMedia?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', mediaItemUrl?: string | null } } | null } | null, feature3?: { __typename?: 'HomePageHeroFieldsFeature3', link?: string | null, linkText?: string | null, secondLink?: string | null, secondLinkText?: string | null, text?: string | null, title?: string | null, optionalMediaLabel?: string | null, image?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', sourceUrl?: string | null, altText?: string | null } } | null, optionalMedia?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', mediaItemUrl?: string | null } } | null } | null } | null }> } | null };

export type OurCulturePageQueryVariables = Exact<{ [key: string]: never; }>;


export type OurCulturePageQuery = { __typename?: 'RootQuery', mediaItem1?: { __typename?: 'RootQueryToMediaItemConnection', nodes: Array<{ __typename?: 'MediaItem', mediaItemUrl?: string | null, altText?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null }> } | null, mediaItem2?: { __typename?: 'RootQueryToMediaItemConnection', nodes: Array<{ __typename?: 'MediaItem', mediaItemUrl?: string | null, altText?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null }> } | null };

export type OurLeadershipPageQueryVariables = Exact<{ [key: string]: never; }>;


export type OurLeadershipPageQuery = { __typename?: 'RootQuery', mediaItem1?: { __typename?: 'RootQueryToMediaItemConnection', nodes: Array<{ __typename?: 'MediaItem', mediaItemUrl?: string | null, altText?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null }> } | null, mediaItem2?: { __typename?: 'RootQueryToMediaItemConnection', nodes: Array<{ __typename?: 'MediaItem', mediaItemUrl?: string | null, altText?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null }> } | null, mediaItem3?: { __typename?: 'RootQueryToMediaItemConnection', nodes: Array<{ __typename?: 'MediaItem', mediaItemUrl?: string | null, altText?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null }> } | null };

export type PartnerPageQueryVariables = Exact<{ [key: string]: never; }>;


export type PartnerPageQuery = { __typename?: 'RootQuery', partnerPageHeroes?: { __typename?: 'RootQueryToPartnerPageHeroConnection', nodes: Array<{ __typename?: 'PartnerPageHero', partnerPageHeroFields?: { __typename?: 'PartnerPageHeroFields', text?: string | null, title?: string | null, bg?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', altText?: string | null, sourceUrl?: string | null } } | null, bgMobile?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', altText?: string | null, sourceUrl?: string | null } } | null } | null }> } | null };

export type ValuesHistoryQueryVariables = Exact<{ [key: string]: never; }>;


export type ValuesHistoryQuery = { __typename?: 'RootQuery', valuesHistories?: { __typename?: 'RootQueryToValuesHistoryConnection', nodes: Array<{ __typename?: 'ValuesHistory', valuesAndHistoryFields?: { __typename?: 'ValuesAndHistoryFields', imageAlt1?: string | null, imageAlt2?: string | null, imageAlt3?: string | null, image1?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', sourceUrl?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null } } | null, image2?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', sourceUrl?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null } } | null, image3?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', sourceUrl?: string | null, mediaDetails?: { __typename?: 'MediaDetails', height?: number | null, width?: number | null } | null } } | null } | null }> } | null };

export type YouthOpportunityPageQueryVariables = Exact<{ [key: string]: never; }>;


export type YouthOpportunityPageQuery = { __typename?: 'RootQuery', ymcaComponents?: { __typename?: 'RootQueryToYmcaComponentConnection', nodes: Array<{ __typename?: 'YmcaComponent', yMCAComponentFields?: { __typename?: 'YMCAComponentFields', link1?: string | null, link2?: string | null, linkText1?: string | null, text?: string | null, linkText2?: string | null, title?: string | null, brandImg?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', sourceUrl?: string | null, altText?: string | null } } | null, image?: { __typename?: 'AcfMediaItemConnectionEdge', node: { __typename?: 'MediaItem', altText?: string | null, sourceUrl?: string | null } } | null } | null }> } | null };
